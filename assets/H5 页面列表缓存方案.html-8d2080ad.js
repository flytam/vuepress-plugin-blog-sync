import{_ as o,z as e,A as c,Y as n,C as s,U as p,a6 as t,Q as l}from"./framework-cb9358d9.js";const i={},u=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3bf822e6a48d4361acf424804ca9f80e~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1),r={href:"https://zoo.team/article/h5-list-buffer",target:"_blank",rel:"noopener noreferrer"},k=t('<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/86de46280f51408bb5eb271166eb83c2~tplv-k3u1fbpfcp-watermark.image" alt="的卢.png"></p><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>&gt; 在 H5 日常开发中，会经常遇到列表点击进入详情页面然后返回列表的情况，对于电商类平台尤为常见，像我们平常用的淘宝、京东等电商平台都是做了缓存，而且不只是列表，很多地方都用到了缓存。但刚才说的都是 App，在原生 App 中，页面是一层层的 View，盖在 <code>LastPage</code> 上，天然就能够保存上一个页面的状态，而 H5 不同，从详情返回到列表后，状态会被清除掉，重新走一遍生命周期，会重新发起请求，会有新的状态写入，对于分页接口，列表很长，当用户翻了好几页后，点击详情看看商品详情后再返回列表，此时页面回到第一页，这样用户体验很差，如果在进入详情的时候将列表数据缓存起来，返回列表的时候用缓存数据，而不是重新请求数据，停留在离开列表页时的浏览位置；或者是能够像 App 那样，将页面一层层堆叠在 <code>LastPage</code> 上，返回的时候展示对应的页面，这样用户体验会好很多，本文简单介绍一下在自己在做列表缓存的时候考虑的几点，后附简单实现。</p><h2 id="思考" tabindex="-1"><a class="header-anchor" href="#思考" aria-hidden="true">#</a> 思考</h2><h3 id="状态丢失的原因" tabindex="-1"><a class="header-anchor" href="#状态丢失的原因" aria-hidden="true">#</a> 状态丢失的原因</h3>',5),d={href:"https://react-guide.github.io/react-router-cn/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://dvajs.com/api/#dva-router",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"Component",-1),b=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">RouterConfig</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> history<span class="token punctuation">,</span> app <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> routerData <span class="token operator">=</span> <span class="token function">getRouterData</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>ConnectedRouter history<span class="token operator">=</span><span class="token punctuation">{</span>history<span class="token punctuation">}</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
      <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>Route
        path<span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>
        render<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>Layouts routerData<span class="token operator">=</span><span class="token punctuation">{</span>routerData<span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">}</span>
        redirectPath<span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">/</span>exception<span class="token operator">/</span><span class="token number">403</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>
      <span class="token operator">/</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>ConnectedRouter<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 路由配置说明（你不用加载整个配置，</span>
<span class="token comment">// 只需加载一个你想要的根路由，</span>
<span class="token comment">// 也可以延迟加载这个配置）。</span>
React<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">(</span>
  <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>Router<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>Route path<span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>App<span class="token punctuation">}</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
      <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>Route path<span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>about<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>About<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
      <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>Route path<span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>users<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Users<span class="token punctuation">}</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>Route path<span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">user</span><span class="token regex-delimiter">/</span></span><span class="token operator">:</span>userId<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>User<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
      <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>Route<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
      <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>Route path<span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>NoMatch<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>Route<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>Router<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
<span class="token punctuation">)</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span>body<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="如何解决" tabindex="-1"><a class="header-anchor" href="#如何解决" aria-hidden="true">#</a> 如何解决</h3><p>原因找到了，那么我们怎么去缓存页面或者数据呢？一般有两种解决方式：1. 路由切换时自动保存状态 。 2. 手动保存状态。在 <code>Vue</code> 中，可以直接使用 <code>keep-alive</code> 来实现组件缓存，只要使用了 <code>keep-alive</code> 标签包裹的组件，在页面切换的时候会自动缓存 <code>失活</code> 的组件，使用起来非常方便，简单例子如下。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">!</span><span class="token operator">--</span> 失活的组件将会被缓存！<span class="token operator">--</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>keep<span class="token operator">-</span>alive<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>component v<span class="token operator">-</span>bind<span class="token operator">:</span>is<span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>currentTabComponent<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>component<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>keep<span class="token operator">-</span>alive<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),h=n("code",null,"React",-1),f=n("code",null,"keep-alive",-1),_={href:"https://github.com/facebook/react/issues/12039",target:"_blank",rel:"noopener noreferrer"},g=n("img",{src:"https://www.zoo.team/images/upload/upload_aaf3e0fb0e623a1362f6d18cdc8e39bf.png",alt:""},null,-1),w={href:"https://github.com/facebook/react/issues/12039",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"Redux",-1),x=n("code",null,"Mobx",-1),C=n("code",null,"React.createPortal",-1),R=n("code",null,"API",-1),E=n("code",null,"React",-1),A={href:"https://github.com/Sam618/react-keep-alive",target:"_blank",rel:"noopener noreferrer"},P=n("code",null,"React Keep Alive",-1),H=t('<p>个人认为需要注意的有以下几点：</p><h3 id="存什么-何时存-存在哪-何时取-在哪取" tabindex="-1"><a class="header-anchor" href="#存什么-何时存-存在哪-何时取-在哪取" aria-hidden="true">#</a> 存什么？何时存？存在哪？何时取？在哪取？</h3><h4 id="存什么" tabindex="-1"><a class="header-anchor" href="#存什么" aria-hidden="true">#</a> 存什么</h4><p>首先我们需要关心的是: 存什么？既然要缓存，那么我们要存的是什么？是缓存整个 <code>Component</code> 、列表数据还是滚动容器的 <code>scrollTop</code> 。举个例子，微信公众号里的文章就做了缓存，任意点击一篇文章浏览，浏览到一半后关闭退出，再一次打开该文章时会停留在之前的位置，而且大家可以自行测试一下，再次打开的时候文章数据是重新获取的，在这种场景下，是缓存了文章详情滚动容器的滚动高度，在离开页面的时候存起来，再次进入的时候拿到数据后跳转到之前的高度，除此之外，还有很多别的缓存的方式，可以缓存整个页面，缓存 <code>state</code> 的数据等等，这些都可以达到我们想要的效果，具体用哪一种要看具体的业务场景。</p><h4 id="何时存" tabindex="-1"><a class="header-anchor" href="#何时存" aria-hidden="true">#</a> 何时存</h4><p>其次，我们需要考虑的是什么时候存，页面跳转时会有多种 <code>action</code> 导航操作，比如：<code>POP</code>、<code>PUSH</code> 、<code>REPLACE</code> 等，当我们结合一些比较通用的路由库时，<code>action</code> 会区分的更加细致，对于不同的 <code>action</code> 在不同的业务场景下处理的方式也不尽相同，还是拿微信公众号举例，文章详情页面就是无脑存，无论是 <code>PUSH</code>、<code>POP</code> 都会存高度数据，所以我们无论跳转多少次页面，再次打开总能跳转到之前离开时的位置，对于商品列表的场景时，就不能无脑存了，因为从 <code>List</code> -&gt; <code>Detail</code> -&gt; <code>List</code> 需要缓存没问题，但是用户从 <code>List </code> 返回到其他页面后再次进入 <code>List</code> 时，是进入一个新的页面，从逻辑上来说就不应该在用之前缓存的数据，而是重新获取数据。正确的方式应该是进行 <code>PUSH</code> 操作的时候存， <code>POP</code> 的时候取。</p><h4 id="存在哪" tabindex="-1"><a class="header-anchor" href="#存在哪" aria-hidden="true">#</a> 存在哪</h4>',7),N=n("code",null,"URL",-1),S=n("code",null,"localStorage",-1),j=n("code",null,"URL",-1),M=n("code",null,"URL",-1),T=n("code",null,"pass",-1),D=n("code",null,"URL",-1),L=n("code",null,"URL",-1),U=n("code",null,"localStorage",-1),q=n("code",null,"getItem",-1),O=n("code",null,"setItem",-1),z=n("code",null,"Serialize",-1),B=n("code",null,"IndexDB",-1),I=n("code",null,"WebSQL",-1),W={href:"https://www.zhangxinxu.com/wordpress/2017/07/html5-indexeddb-js-example/",target:"_blank",rel:"noopener noreferrer"},V=n("li",null,[s("内存。 对于不需要做持久化的列表或数据来说，放内存可能是一个更好的方式，如果进行频繁的读写操作，放内存中操作 I/O 速度快，方便。因此，可以放到 "),n("code",null,"redux"),s(" 或 "),n("code",null,"rematch"),s(" 等状态管理工具中，封装一些通用的存取方法，很方便，对于一般的单页应用来说，还可以放到全局的 "),n("code",null,"window"),s(" 中。")],-1),G=t(`<h4 id="何时取" tabindex="-1"><a class="header-anchor" href="#何时取" aria-hidden="true">#</a> 何时取</h4><p>在进入缓存页面的时候取，取的时候又有几种情况</p><ol><li>当导航操作为 <code>POP</code> 时取， 因为每当 <code>PUSH</code> 时，都算是进入一个新的页面，这种情况是不应该用缓存数据。</li><li>无论哪种导航操作都进行取数据，这种情况需要和何时存一起看待。</li><li>看具体的业务场景，来判断取的时机。</li></ol><h4 id="在哪取" tabindex="-1"><a class="header-anchor" href="#在哪取" aria-hidden="true">#</a> 在哪取</h4><p>这个问题很简单，存在哪就从哪里取。</p><h2 id="cachehoc-的方案" tabindex="-1"><a class="header-anchor" href="#cachehoc-的方案" aria-hidden="true">#</a> <code>CacheHoc</code> 的方案</h2><ul><li>存什么: 列表数据 + 滚动容器的滚动高度</li><li>何时存: 页面离开且导航操作为 <code>PUSH</code></li><li>存在哪: <code>window</code></li><li>何时取: 页面初始化阶段且导航操作为 <code>POP</code> 的时候</li><li>在哪取: <code>window</code></li></ul><p><code>CacheHoc</code> 是一个高阶组件，缓存数据统一存到 <code>window</code> 内，通过 <code>CACHE_STORAGE</code> 收敛，外部仅需要传入 <code>CACHE_NAME</code>，<code>scrollElRefs</code> 即可，<code>CACHE_NAME</code> 相当于缓存数据的 <code>key</code>，而 <code>scrollElRefs</code> 则是一个包含滚动容器的数组，为啥用数组呢，是考虑到页面多个滚动容器的情况，在 <code>componentWillUnmount</code> 生命周期函数中记录对应滚动容器的 <code>scrollTop</code>、<code>state</code>，在 <code>constructor</code> 内初始化 <code>state</code>，在 <code>componentDidMount</code> 中更新 <code>scrollTop</code>。</p><h3 id="简单使用" tabindex="-1"><a class="header-anchor" href="#简单使用" aria-hidden="true">#</a> 简单使用</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> React from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>react<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> connect <span class="token punctuation">}</span> from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>react<span class="token operator">-</span>redux<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> cacheHoc from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>utils<span class="token operator">/</span>cache_hoc<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">connect</span></span><span class="token punctuation">(</span>mapStateToProps<span class="token punctuation">,</span> mapDispatch<span class="token punctuation">)</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">cacheHoc</span></span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token keyword">extends</span></span> React<span class="token punctuation">.</span>Component <span class="token punctuation">{</span>
  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token operator">...</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token operator">...</span>props<span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">withRef</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 设置 CACHE_NAME</span>
  <span class="token constant">CACHE_NAME</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">customerList</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>index<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  
  scrollDom <span class="token operator">=</span> <span class="token keyword">null</span>

  state <span class="token operator">=</span> <span class="token punctuation">{</span>
    orderBy<span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
    loading<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    num<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    dataSource<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    keyWord<span class="token operator">:</span> <span class="token keyword">undefined</span>
  <span class="token punctuation">}</span>

  <span class="token function">componentDidMount</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 设置滚动容器list</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>scrollElRefs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>scrollDom<span class="token punctuation">]</span>
    <span class="token comment">// 请求数据，更新 state</span>
  <span class="token punctuation">}</span>

  <span class="token function">render</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> history <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props
    <span class="token keyword">const</span> <span class="token punctuation">{</span> dataSource<span class="token punctuation">,</span> orderBy<span class="token punctuation">,</span> loading <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state

    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>div className<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">gcmc</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>wrapper<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>MeScroll
          className<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">gcmc</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>wrapper<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
          getMs<span class="token operator">=</span><span class="token punctuation">{</span>ref <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>scrollDom <span class="token operator">=</span> ref<span class="token punctuation">)</span><span class="token punctuation">}</span>
          loadMore<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>fetchData<span class="token punctuation">}</span>
          refresh<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>refresh<span class="token punctuation">}</span>
          up<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>
            page<span class="token operator">:</span> <span class="token punctuation">{</span>
              num<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 当前页码,默认0,回调之前会加1,即callback(page)会从1开始</span>
              size<span class="token operator">:</span> <span class="token number">15</span> <span class="token comment">// 每页数据的数量</span>
              <span class="token comment">// time: null // 加载第一页数据服务器返回的时间; 防止用户翻页时,后台新增了数据从而导致下一页数据重复;</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token punctuation">}</span>
          down<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> auto<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
        <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
          <span class="token punctuation">{</span>loading <span class="token operator">?</span> <span class="token punctuation">(</span>
            <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>div className<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">gcmc</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>loading<span class="token operator">-</span>wrapper<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
              <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>Loading <span class="token operator">/</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>div<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
          <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>
            dataSource<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">(</span>
              <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>Card
                key<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>clienteleId<span class="token punctuation">}</span>
                data<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">}</span>
                <span class="token punctuation">{</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">}</span>
                onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
                  history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token operator">/</span>detail<span class="token operator">/</span>id<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
              <span class="token operator">/</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
            <span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token punctuation">)</span><span class="token punctuation">}</span>
        <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>MeScroll<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>div className<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">[</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>sort<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
          <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>div className<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">[</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>sort<span class="token operator">-</span>wrapper<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">}</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>_toSort<span class="token punctuation">}</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>span style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> marginRight<span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>最近下单时间<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>span<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>img
              src<span class="token operator">=</span><span class="token punctuation">{</span>orderBy <span class="token operator">===</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span> <span class="token operator">?</span> <span class="token constant">SORT_UP</span> <span class="token operator">:</span> <span class="token constant">SORT_DOWN</span><span class="token punctuation">}</span>
              alt<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>sort<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>
              style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> width<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> height<span class="token operator">:</span> <span class="token number">16</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
            <span class="token operator">/</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
          <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>div<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>div<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
      <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>div<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果如下:</p><p><img src="https://www.zoo.team/images/upload/upload_c0ea09d99fcdb1c8799c026f1e6a4cc6.gif" alt=""></p><p><img src="https://www.zoo.team/images/upload/upload_ab0cbf52ecf598d0cc3c399efd7d0faa.gif" alt=""></p><p>缓存的数据: <img src="https://www.zoo.team/images/upload/upload_ea16dd814f9752647bb970ee1a6981ce.gif" alt=""></p><h3 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> storeName <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token constant">CACHE_STORAGE</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>
window<span class="token punctuation">[</span>storeName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> Comp <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name">CacheWrapper</span> <span class="token keyword">extends</span> <span class="token class-name">Comp</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>
      <span class="token comment">// 初始化</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>window<span class="token punctuation">[</span>storeName<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">CACHE_NAME</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        window<span class="token punctuation">[</span>storeName<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">CACHE_NAME</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token literal-property property">history</span><span class="token operator">:</span> <span class="token punctuation">{</span> action <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">=</span> props
      <span class="token comment">// 取 state</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>action <span class="token operator">===</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token constant">POP</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> <span class="token punctuation">{</span> state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">=</span> window<span class="token punctuation">[</span>storeName<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">CACHE_NAME</span><span class="token punctuation">]</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>
          <span class="token operator">...</span>state<span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">async</span> <span class="token function">componentDidMount</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span>componentDidMount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">await</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token literal-property property">history</span><span class="token operator">:</span> <span class="token punctuation">{</span> action <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props
      <span class="token keyword">if</span> <span class="token punctuation">(</span>action <span class="token operator">!==</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token constant">POP</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token keyword">return</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span> scrollTops <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token operator">=</span> window<span class="token punctuation">[</span>storeName<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">CACHE_NAME</span><span class="token punctuation">]</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span> scrollElRefs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span>
      <span class="token comment">// 取 scrollTop</span>
      scrollElRefs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>el <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> el<span class="token punctuation">.</span>scrollTop <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          el<span class="token punctuation">.</span>scrollTop <span class="token operator">=</span> scrollTops<span class="token punctuation">[</span>index<span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token function">componentWillUnmount</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token literal-property property">history</span><span class="token operator">:</span> <span class="token punctuation">{</span> action <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span>componentWillUnmount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>action <span class="token operator">===</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token constant">PUSH</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> scrollTops <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">const</span> <span class="token punctuation">{</span> scrollElRefs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span>
        scrollElRefs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>ref <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>ref <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> ref<span class="token punctuation">.</span>scrollTop <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            scrollTops<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ref<span class="token punctuation">.</span>scrollTop<span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        window<span class="token punctuation">[</span>storeName<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">CACHE_NAME</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>state
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          scrollTops
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>action <span class="token operator">===</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token constant">POP</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        window<span class="token punctuation">[</span>storeName<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">CACHE_NAME</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>以上的 <code>CacheHoc</code>只是最简单的一种实现，还有很多可以改进的地方，譬如：1. 直接存在 <code>window</code> 中有点粗暴，多页应用下存到 <code>window</code> 会丢失数据，可以考虑存到 <code>IndexDB</code> 或者 <code>localStorage</code> 中，另外这种方案若不配合上 <code>mescroll</code> 需要在 <code>componentDidMount</code> 判断 <code>state</code> 内的数据，若有值就不初始化数据，这算是一个 <code>bug</code>。</p><p>缓存方案纵有多种，但需要考虑的问题就以上几点。另外在讲述需要注意的五个点的时候，着重介绍了存什么和存在哪，其实存在哪不太重要，也不需要太关心，找个合适的地方存着就行，比较重要的是存什么、何时存，需要结合实际的应用场景，来选择合适的方式，可能不同的页面采用的方式都不同，没有固定的方案，重要的是分析存取的时机和位置。</p><h2 id="推荐阅读" tabindex="-1"><a class="header-anchor" href="#推荐阅读" aria-hidden="true">#</a> 推荐阅读</h2>`,20),Q={href:"https://juejin.cn/post/6935226614020046878",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://juejin.cn/post/6940414376486633503",target:"_blank",rel:"noopener noreferrer"},J=n("h2",{id:"招贤纳士",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#招贤纳士","aria-hidden":"true"},"#"),s(" 招贤纳士")],-1),K=n("p",null,"政采云前端团队（ZooTeam），一个年轻富有激情和创造力的前端团队，隶属于政采云产品研发部，Base 在风景如画的杭州。团队现有 40 余个前端小伙伴，平均年龄 27 岁，近 3 成是全栈工程师，妥妥的青年风暴团。成员构成既有来自于阿里、网易的“老”兵，也有浙大、中科大、杭电等校的应届新人。团队在日常的业务对接之外，还在物料体系、工程平台、搭建平台、性能体验、云端应用、数据分析及可视化等方向进行技术探索和实战，推动并落地了一系列的内部技术产品，持续探索前端技术体系的新边界。",-1),Y=n("p",null,[s("如果你想改变一直被事折腾，希望开始能折腾事；如果你想改变一直被告诫需要多些想法，却无从破局；如果你想改变你有能力去做成那个结果，却不需要你；如果你想改变你想做成的事需要一个团队去支撑，但没你带人的位置；如果你想改变既定的节奏，将会是“5 年工作时间 3 年工作经验”；如果你想改变本来悟性不错，但总是有那一层窗户纸的模糊… 如果你相信相信的力量，相信平凡人能成就非凡事，相信能遇到更好的自己。如果你希望参与到随着业务腾飞的过程，亲手推动一个有着深入的业务理解、完善的技术体系、技术创造价值、影响力外溢的前端团队的成长历程，我觉得我们该聊聊。任何时间，等着你写点什么，发给 "),n("code",null,"ZooTeam@cai-inc.com")],-1),$=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8e2195417d81439e9f55ac164cff0330~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1);function F(X,nn){const a=l("ExternalLinkIcon");return e(),c("div",null,[u,n("p",null,[s("> 这是第 95 篇不掺水的原创，想获取更多原创好文，请搜索公众号关注我们吧~ 本文首发于政采云前端博客："),n("a",r,[s("H5 页面列表缓存方案"),p(a)])]),k,n("p",null,[s("通常在页面开发中，我们是通过路由去管理不同的页面，常用的路由库也有很多，譬如："),n("a",d,[s("React-Router"),p(a)]),s("，"),n("a",m,[s("Dva-router"),p(a)]),s("...... 当我们切换路由时，没有被匹配到的 "),v,s(" 也会被整体替换掉，原有的状态也丢失了，因此，当用户从详情页退回到列表页时，会重新加载列表页面组件，重新走一遍生命周期，获取的就是第一页的数据，从而回到了列表顶部，下面是常用的路由匹配代码段。")]),b,n("p",null,[s("但是，"),h,s(" 中并没有 "),f,s(" 这种类似的标签或功能，"),n("a",_,[s("官方认为这个功能容易造成内存泄漏，暂不考虑支持"),p(a)]),s("。 "),g]),n("p",null,[s("所以只能是在路由层做手脚，在路由切换时做对应的缓存操作，之前有开发者提出了一种方案："),n("a",w,[s("通过样式来控制组件的显示/隐藏"),p(a)]),s("，但是这可能会有问题，例如切换组件的时候无法使用动画，或者使用 "),y,s("、"),x,s(" 这样的数据流管理工具，还有开发者通过 "),C,s(),R,s(" 实现了 "),E,s(" 版本的 "),n("a",A,[P,p(a)]),s("，并且使用起来也比较方便。第二种解决方案就是手动保存状态，即在页面卸载时手动将页面的状态收集存储起来，在页面挂载的时候进行数据恢复，个人采用的就是简单粗暴的后者，实现上比较简单。缓存缓存，无外乎就是两件事，存和取，那么在存、取的过程中需要注意哪些问题呢？")]),H,n("ol",null,[n("li",null,[s("持久化缓存。 如果是数据持久化可存到 "),N,s(" 或 "),S,s(" 中，放到 "),j,s(" 上有一个很好点在于确定性，易于传播。但 "),M,s(" 可以先 "),T,s(" 掉，因为在复杂列表的情况下，需要存的数据比较多，全部放到 "),D,s(" 是不现实的，即使可以，也会让 "),L,s(" 显得极其冗长，显然不妥。 "),U,s(" 是一种方式，提供的 "),q,s("、"),O,s(" 等 api 也足够支持存取操作，最大支持 5M，容量也够，通过序列化 "),z,s(" 整合也可以满足需求，另外 "),B,s(" 也不失为一种好的方式，"),I,s(" 已废弃，就不考虑了，详细可点击张鑫旭的这篇文章"),n("a",W,[s("《HTML5 indexedDB前端本地存储数据库实例教程》"),p(a)]),s("查看对比。")]),V]),G,n("p",null,[n("a",Q,[s("如何用 JS 实现二叉堆"),p(a)])]),n("p",null,[n("a",Z,[s("编写高质量可维护的代码：程序范式"),p(a)])]),J,K,Y,$])}const an=o(i,[["render",F],["__file","H5 页面列表缓存方案.html.vue"]]);export{an as default};
