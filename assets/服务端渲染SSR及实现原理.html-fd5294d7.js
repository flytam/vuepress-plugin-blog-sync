import{_ as t,z as o,A as c,Y as n,C as s,U as e,a6 as p,Q as l}from"./framework-cb9358d9.js";const i={},r=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d4eb6a01e6564840817b127265b07edd~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1),u=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2b5a12de950d49279e345ca0e728d9ec~tplv-k3u1fbpfcp-watermark.image?",alt:"可橙.png"})],-1),k={href:"https://www.zoo.team/article/web-ssr",target:"_blank",rel:"noopener noreferrer"},d=p(`<h1 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h1><p>在日常前端开发中，在需要首屏渲染速度优化的场景下，大家或多或少都听到过服务端渲染( SSR )。本文将结合 Vue 来对 SSR 的实现逻辑来进行解读。通过阅读本文你将了解到:</p><ul><li>服务端渲染的使用场景</li><li>Vue SSR 的实现原理</li><li>可开箱即用的 SSR 脚手架</li></ul><h1 id="服务端渲染" tabindex="-1"><a class="header-anchor" href="#服务端渲染" aria-hidden="true">#</a> 服务端渲染</h1><p>服务端渲染 SSR (Server-Side Rendering)，是指在服务端完成页面的html 拼接处理， 然后再发送给浏览器，将不具有交互能力的html结构绑定事件和状态，在客户端展示为具有完整交互能力的应用程序。</p><h2 id="适用场景" tabindex="-1"><a class="header-anchor" href="#适用场景" aria-hidden="true">#</a> 适用场景</h2><p>以下两种情况 SSR 可以提供很好的场景支持</p><ul><li><p><strong>需更好的支持 SEO</strong> 优势在于<strong>同步</strong>。搜索引擎爬虫是不会等待异步请求数据结束后再抓取信息的，如果 SEO 对应用程序至关重要，但你的页面又是异步请求数据，那 SSR 可以帮助你很好的解决这个问题。</p></li><li><p><strong>需更快的到达时间</strong> 优势在于<strong>慢网络和运行缓慢的设备场景</strong>。传统 SPA 需完整的 JS 下载完成才可执行，而SSR 服务器渲染标记在服务端渲染 html 后即可显示，用户会更快的看到首屏渲染页面。如果首屏渲染时间转化率对应用程序至关重要，那可以使用 SSR 来优化。</p></li></ul><h2 id="不适用场景" tabindex="-1"><a class="header-anchor" href="#不适用场景" aria-hidden="true">#</a> 不适用场景</h2><p>以下三种场景 SSR 使用需要慎重</p><ul><li><p><strong>同构资源的处理</strong> 劣势在于程序需要具有通用性。结合 Vue 的钩子来说，能在 SSR 中调用的生命周期只有 <strong>beforeCreate</strong> 和 <strong>created</strong>，这就导致在使用三方 API 时必须保证运行不报错。在三方库的引用时需要特殊处理使其支持服务端和客户端都可运行。</p></li><li><p><strong>部署构建配置资源的支持</strong> 劣势在于运行环境单一。程序需处于 <strong>node.js server</strong> 运行环境。</p></li><li><p><strong>服务器更多的缓存准备</strong> 劣势在于高流量场景需采用缓存策略。应用代码需在双端运行解析，cpu 性能消耗更大，负载均衡和多场景缓存处理比 SPA 做更多准备。</p></li></ul><p>我们来结合 Vue.js 来看看 Vue 是如何实现 SSR 的。</p><h1 id="vue-ssr-的实现原理" tabindex="-1"><a class="header-anchor" href="#vue-ssr-的实现原理" aria-hidden="true">#</a> Vue SSR 的实现原理</h1><h2 id="先决条件" tabindex="-1"><a class="header-anchor" href="#先决条件" aria-hidden="true">#</a> 先决条件</h2><h3 id="组件基于-vnode-来实现渲染" tabindex="-1"><a class="header-anchor" href="#组件基于-vnode-来实现渲染" aria-hidden="true">#</a> <strong>组件基于 VNode 来实现渲染</strong></h3><p>VNode 本身是 js 对象，<strong>兼容性极强</strong>，不依赖当前的执行的环境，从而可以在服务端渲染及原生渲染。虚拟 DOM 频繁修改，最后比较出真实 DOM 需要更改的地方，可以达到<strong>局部渲染</strong>的目的，<strong>减少性能损耗</strong>。</p><h3 id="vue-server-renderer" tabindex="-1"><a class="header-anchor" href="#vue-server-renderer" aria-hidden="true">#</a> <strong>vue-server-renderer</strong></h3><p>是一个具有<strong>独立渲染应用程序</strong>能力的包，是 Vue 服务端渲染的核心代码。</p><p>本文下面的源码也结合这个包展开，此处不多冗余介绍。</p><h2 id="ssr-渲染架构" tabindex="-1"><a class="header-anchor" href="#ssr-渲染架构" aria-hidden="true">#</a> SSR 渲染架构</h2><p>我们结合<strong>官网图</strong>和<strong>项目架构</strong>两个维度来整体了解一下 SSR 全貌 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fa8537a57adc413096499b4184f57757~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><h3 id="项目架构" tabindex="-1"><a class="header-anchor" href="#项目架构" aria-hidden="true">#</a> 项目架构</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>src
├── components
├── App<span class="token punctuation">.</span>vue
├── app<span class="token punctuation">.</span>js <span class="token operator">--</span><span class="token operator">--</span>通用 entry
├── entry<span class="token operator">-</span>client<span class="token punctuation">.</span>js <span class="token operator">--</span><span class="token operator">--</span>仅运行于浏览器
└── entry<span class="token operator">-</span>server<span class="token punctuation">.</span>js <span class="token operator">--</span><span class="token operator">--</span>仅运行于服务器
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>app.js</strong> 导出 createApp 函数工厂，此函数是可以被重复执行的，从根 Vue 实例注入，用于创建router，store 以及应用程序实例。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> Vue from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>vue<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> App from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token operator">/</span>App<span class="token punctuation">.</span>vue<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>
<span class="token comment">// 导出一个工厂函数，用于创建新的应用程序、router 和 store 实例</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createApp</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">render</span><span class="token operator">:</span> h <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span> app <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>entry-client.js</strong> 负责创建应用程序，挂载实例 DOM ，仅运行于浏览器。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token operator">/</span>app<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> app <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// #app 为根元素，名称可替换</span>
app<span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>#app<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>entry-server.js</strong> 创建返回应用实例，同时还会进行路由匹配和数据的预处理，仅运行于服务器。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token operator">/</span>app<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> context <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> app <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> app
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="服务端和客户端代码编写原则" tabindex="-1"><a class="header-anchor" href="#服务端和客户端代码编写原则" aria-hidden="true">#</a> 服务端和客户端代码编写原则</h3><p>作为同构框架，应用代码编译过程 Vue SSR 提供了两个编译入口，来作为抹平由于环境不同的代码差异。Client entry 和 Server entry 中编写代码逻辑的区分有<strong>两条原则</strong></p><ol><li><p>通用型代码 可通用性的代码，由于鉴权逻辑和网关配置不同，需要在 webpack resolve.alias 中配置不同的模块环境应用。</p></li><li><p>非通用性代码 Client entry  负责挂载 DOM 节点代码，以及三方包引入和具有兼容性库的加载。 Server entry 只生成 Vue 对象。</p></li></ol><h3 id="两个编译产物" tabindex="-1"><a class="header-anchor" href="#两个编译产物" aria-hidden="true">#</a> 两个编译产物</h3><p>经过 webpack 打包之后会有两个 bundle 产物</p><p>server bundle 用于生成 vue-ssr-server-bundle.json，我们熟悉的 sourceMap 和需要在服务端运行的代码列表都在这个产物中。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>vue<span class="token operator">-</span><span class="token constant">SSR</span><span class="token operator">-</span>server<span class="token operator">-</span>bundle<span class="token punctuation">.</span>json
<span class="token punctuation">{</span> 
  <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>entry<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">:</span> <span class="token punctuation">,</span> 
  <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>files<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token constant">A</span>：包含了所有要在服务端运行的代码列表
    <span class="token constant">B</span>：入口文件
  <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>client Bundle 用于生成 vue-SSR-client-manifest.json，包含所有的静态资源，首次渲染需要加载的 script 标签，以及需要在客户端运行的代码。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>vue<span class="token operator">-</span><span class="token constant">SSR</span><span class="token operator">-</span>client<span class="token operator">-</span>manifest<span class="token punctuation">.</span>json
<span class="token punctuation">{</span> 
  <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>publicPath<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">:</span> 公共资源路径文件地址<span class="token punctuation">,</span> 
  <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>all<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">:</span> 资源列表
  <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>initial<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">:</span>输出 html 字符串
  <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>async<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">:</span> 异步加载组件集合
  <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>modules<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">:</span> moduleIdentifier 和 all 数组中文件的映射关系
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<strong>先决条件</strong>中我们提到了一个重要的包 <strong>vue-server-renderer</strong>，那我们来重点看看这个包里面的值得我们学习关注的内容。</p><h3 id="vue-server-renderer-1" tabindex="-1"><a class="header-anchor" href="#vue-server-renderer-1" aria-hidden="true">#</a> vue-server-renderer</h3><p>是 Vue SSR 的核心代码，值得我们关注的是<strong>应用初始化</strong>和<strong>应用输出</strong>。两个阶段提供了完整的应用层代码编译和组装逻辑。</p><h4 id="应用初始化" tabindex="-1"><a class="header-anchor" href="#应用初始化" aria-hidden="true">#</a> 应用初始化</h4><p>在应用初始化过程中，重点展开介绍<strong>实例化流程</strong>和<strong>防止交叉污染。</strong></p><p>首先我们先来看看一个 Vue SSR 的应用是如何被初始化的。</p><p><strong>实例化流程</strong></p><ol><li>生成 Vue 对象</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> Vue <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>vue<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>生成 renderer，值得关注的两个对象 render 和 templateRenderer</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> renderer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>vue<span class="token operator">-</span>server<span class="token operator">-</span>renderer<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createRenderer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// createRenderer 函数中有两个重要的对象： render 和 templateRenderer</span>
<span class="token keyword">function</span> <span class="token function">createRenderer</span> <span class="token punctuation">(</span><span class="token parameter">ref</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// render: 渲染 html 组件</span>
  <span class="token keyword">var</span> render <span class="token operator">=</span> <span class="token function">createRenderFunction</span><span class="token punctuation">(</span>modules<span class="token punctuation">,</span> directives<span class="token punctuation">,</span> isUnaryTag<span class="token punctuation">,</span> cache<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// templateRenderer: 模版渲染，clientManifest 文件</span>
  <span class="token keyword">var</span> templateRenderer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplateRenderer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    template<span class="token operator">:</span> template<span class="token punctuation">,</span>
    inject<span class="token operator">:</span> inject<span class="token punctuation">,</span>
    shouldPreload<span class="token operator">:</span> shouldPreload<span class="token punctuation">,</span>
    shouldPrefetch<span class="token operator">:</span> shouldPrefetch<span class="token punctuation">,</span>
    clientManifest<span class="token operator">:</span> clientManifest<span class="token punctuation">,</span>
    serializer<span class="token operator">:</span> serializer
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>经过这个过程的 render 和 templateRenderer 并没有被调用，这两个函数真正的调用是在项目实例化 <strong>createBundleRenderer</strong> 函数的时候，即第三步创建的函数。</p><ol start="3"><li>创建沙盒vm，实例化 Vue 的入口文件</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>vm<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 调用 createBundleRunner 函数实例对象，rendererOptions 支持可配置</span>
<span class="token keyword">var</span> run <span class="token operator">=</span> <span class="token function">createBundleRunner</span><span class="token punctuation">(</span> 
  entry<span class="token punctuation">,</span> <span class="token operator">--</span><span class="token operator">--</span>入口文件集合
  files<span class="token punctuation">,</span> <span class="token operator">--</span><span class="token operator">--</span>打包文件集合
  basedir<span class="token punctuation">,</span> 
  rendererOptions<span class="token punctuation">.</span>runInNewContext。
<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 createBundleRunner 方法的源码到其实例了一个叫 compileModule 的一个方法，这个方法做了中有两个函数：<strong>getCompiledScript</strong> 和 <strong>evaluateModule</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createBundleRunner</span> <span class="token punctuation">(</span><span class="token parameter">entry<span class="token punctuation">,</span> files<span class="token punctuation">,</span> basedir<span class="token punctuation">,</span> runInNewContext</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//触发 compileModule 方法，找到 webpack 编译形成的 code</span>
  <span class="token keyword">var</span> evaluate <span class="token operator">=</span> <span class="token function">compileModule</span><span class="token punctuation">(</span>files<span class="token punctuation">,</span> basedir<span class="token punctuation">,</span> runInNewContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>getCompiledScript： 编译 wrapper ，找到入口文件的 files 文件名及 script 脚本的编译执行</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getCompiledScript</span> <span class="token punctuation">(</span><span class="token parameter">filename</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>compiledScripts<span class="token punctuation">[</span>filename<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> compiledScripts<span class="token punctuation">[</span>filename<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 在入口文件 files 中找到对应的文件名称</span>
    <span class="token keyword">var</span> code <span class="token operator">=</span> files<span class="token punctuation">[</span>filename<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> wrapper <span class="token operator">=</span> NativeModule<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 在沙盒上下文中执行构建 script 脚本</span>
    <span class="token keyword">var</span> script <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">vm<span class="token punctuation">.</span>Script</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      filename<span class="token operator">:</span> filename<span class="token punctuation">,</span>
      displayErrors<span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    compiledScripts<span class="token punctuation">[</span>filename<span class="token punctuation">]</span> <span class="token operator">=</span> script<span class="token punctuation">;</span>
    <span class="token keyword">return</span> script
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>evaluateModule： 根据 runInThisContext 中的配置项来决定是在当前上下文执行还是单独上下文执行。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">evaluateModule</span> <span class="token punctuation">(</span><span class="token parameter">filename<span class="token punctuation">,</span> sandbox<span class="token punctuation">,</span> evaluatedFiles</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> evaluatedFiles <span class="token operator">===</span> <span class="token keyword">void</span> <span class="token number">0</span> <span class="token punctuation">)</span> evaluatedFiles <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>evaluatedFiles<span class="token punctuation">[</span>filename<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> evaluatedFiles<span class="token punctuation">[</span>filename<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">var</span> script <span class="token operator">=</span> <span class="token function">getCompiledScript</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 用于判断是在当前的那种模式下面执行沙盒上下文，此时存在两个函数的相互调用</span>
    <span class="token keyword">var</span> compiledWrapper <span class="token operator">=</span> runInNewContext <span class="token operator">===</span> <span class="token boolean">false</span>
      <span class="token operator">?</span> script<span class="token punctuation">.</span><span class="token function">runInThisContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token operator">:</span> script<span class="token punctuation">.</span><span class="token function">runInNewContext</span><span class="token punctuation">(</span>sandbox<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// m: 函数导出的 exports 数据</span>
    <span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">exports</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// r: 替代原生 require 用来解析 bundle 中通过 require 函数引用的模块</span>
    <span class="token keyword">var</span> <span class="token function-variable function">r</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">file</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token operator">...</span>
      <span class="token keyword">return</span> <span class="token function">require</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述的函数执行完成之后会调用 compiledWrapper.call，传参对应上面的 exports、require、module, 我们就能拿到入口函数。</p><ol start="4"><li>错误抛出容错和全局错误监听 renderToString: 在没有 cb 函数时做了 promise 的返回，那说明我们在调用次函数的时候可以直接做 try catch的处理，用于全局错误的抛出容错。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function-variable function">renderToString</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> assign<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> context <span class="token operator">===</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token keyword">function</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      cb <span class="token operator">=</span> context<span class="token punctuation">;</span>
      context <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">var</span> promise<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token punctuation">(</span><span class="token punctuation">(</span>assign <span class="token operator">=</span> <span class="token function">createPromiseCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> promise <span class="token operator">=</span> assign<span class="token punctuation">.</span>promise<span class="token punctuation">,</span> cb <span class="token operator">=</span> assign<span class="token punctuation">.</span>cb<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token operator">...</span>
    <span class="token keyword">return</span> promise
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>renderToStream：对抛错做了监听机制, 抛错的钩子函数将在这个方法中触发。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token function-variable function">renderToStream</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PassThrough</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">run</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">rewriteErrorTrace</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> maps<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 此处做了监听器的容错</span>
      process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>error<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">app</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>app<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> renderStream <span class="token operator">=</span> renderer<span class="token punctuation">.</span><span class="token function">renderToStream</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">...</span> 
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>防止交叉污染</strong></p><p>Node.js 服务器是一个长期运行的进程，在客户端编写的代码在进入进程时，变量的上下文将会被保留，导致交叉请求状态污染。 因此不可共享一个实例，所以说 createApp 是一个可被重复执行的函数。其实在包内部，变量之间也存在防止交叉污染的能力。</p><p>防止交叉污染的能力是由 rendererOptions.runInNewContext 这个配置项来提供的，这个配置支持 true， false，和 once 三种配置项传入。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// rendererOptions.runInNewContext 可配置项如下</span>
  <span class="token boolean">true</span><span class="token operator">:</span> 
  新上下文模式：创建新上下文并重新评估捆绑包在每个渲染上。
  确保每个应用程序的整个应用程序状态都是新的渲染，但会产生额外的评估成本。
  <span class="token boolean">false</span><span class="token operator">:</span>
  直接模式：
  每次渲染时，它只调用导出的函数。而不是在上重新评估整个捆绑包
  模块评估成本较高，但需要结构化源代码
  once<span class="token operator">:</span> 
  初始上下文模式
  仅用于收集可能的非组件vue样式加载程序注入的样式。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>特别说明一下 false 和 once 的场景， 为了防止交叉污染，在渲染的过程中对作用域要求很严格，以此来保证在不同的对象彼此之间不会形成污染。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>runner<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">var</span> sandbox <span class="token operator">=</span> runInNewContext <span class="token operator">===</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>once<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>
      <span class="token operator">?</span> <span class="token function">createSandbox</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token operator">:</span> global<span class="token punctuation">;</span>
    initialContext <span class="token operator">=</span> sandbox<span class="token punctuation">.</span>__VUE_SSR_CONTEXT__ <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    runner <span class="token operator">=</span> <span class="token function">evaluate</span><span class="token punctuation">(</span>entry<span class="token punctuation">,</span> sandbox<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//在后续渲染中，_VUE_SSR_CONTEXT_uu 将不可用</span>
    <span class="token comment">//防止交叉污染</span>
    <span class="token keyword">delete</span> sandbox<span class="token punctuation">.</span>__VUE_SSR_CONTEXT__<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> runner <span class="token operator">!==</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token keyword">function</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>
        <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>bundle <span class="token keyword">export</span> should be a <span class="token keyword">function</span> when using <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span> <span class="token operator">+</span>
        <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">{</span> <span class="token literal-property property">runInNewContext</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>
      <span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="应用输出" tabindex="-1"><a class="header-anchor" href="#应用输出" aria-hidden="true">#</a> 应用输出</h4><p>在应用输出这个阶段中，SSR 将更多侧重<strong>加载脚本内容</strong>和<strong>模版渲染</strong>，在模版渲染时在代码中是否定义过模版引擎源码将提供不同的 html<strong>拼接结构</strong>。</p><p><strong>加载脚本内容</strong></p><p>此过程会将上个阶段构造的 reader 和 templateRender 方法实现数据绑定。</p><p>templateRenderer： 负责 html 封装，其原型上会有如下几个方法， 这些函数的作用如下图。值得一提的是：bindRenderFns 函数是将4个 render 函数绑定到用户上下文的 context 中,用户在拿到这些内容之后就可以做内容的自定义组装和渲染。</p><p><img src="https://www.zoo.team/images/upload/upload_64ca29cf8a9f0b3baf35006bd093baad.png" alt=""></p><p>render: 函数会被递归调用按照从父到子的顺序，将组件全部转化为 html。</p><p><img src="https://www.zoo.team/images/upload/upload_b6af11e3efb7ac0e16cbb09240e7b181.png" alt=""></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createRenderFunction</span> <span class="token punctuation">(</span>
  <span class="token parameter">modules<span class="token punctuation">,</span>
  directives<span class="token punctuation">,</span>
  isUnaryTag<span class="token punctuation">,</span>
  cache</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">render</span> <span class="token punctuation">(</span>
    <span class="token parameter">component<span class="token punctuation">,</span>
    write<span class="token punctuation">,</span>
    userContext<span class="token punctuation">,</span>
    done</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    warned <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RenderContext</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      activeInstance<span class="token operator">:</span> component<span class="token punctuation">,</span>
      userContext<span class="token operator">:</span> userContext<span class="token punctuation">,</span>
      write<span class="token operator">:</span> write<span class="token punctuation">,</span> <span class="token literal-property property">done</span><span class="token operator">:</span> done<span class="token punctuation">,</span> <span class="token literal-property property">renderNode</span><span class="token operator">:</span> renderNode<span class="token punctuation">,</span>
      isUnaryTag<span class="token operator">:</span> isUnaryTag<span class="token punctuation">,</span> <span class="token literal-property property">modules</span><span class="token operator">:</span> modules<span class="token punctuation">,</span> <span class="token literal-property property">directives</span><span class="token operator">:</span> directives<span class="token punctuation">,</span>
      cache<span class="token operator">:</span> cache
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">installSSRHelpers</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">normalizeRender</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>
​    <span class="token comment">// 渲染 node 节点，绑定用户作用上下文</span>
    <span class="token keyword">var</span> <span class="token function-variable function">resolve</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">renderNode</span><span class="token punctuation">(</span>component<span class="token punctuation">.</span><span class="token function">_render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// 等待组件 serverPrefetch 执行完成之后，_render 生成子节点的 vnode 进行渲染</span>
    <span class="token function">waitForServerPrefetch</span><span class="token punctuation">(</span>component<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> done<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
​
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在经过上面的编译流程之后，我们已经拿到了 html 字符串，但如果要在浏览器中展示页面还需js, css 等标签与这个 html 组装成一个完整的报文输出到浏览器中， 因此需要模版渲染阶段来将这些元素实现组装。</p><p><strong>模版渲染</strong></p><p>经过应用初始化阶段，代码被编译获取了 html 字符串，context 渲染需要依赖的 templateRenderer.prototype.bindRenderFns 中绑定的 state, script , styles 等资源。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">TemplateRenderer</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">bindRenderFns</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">bindRenderFns</span> <span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> renderer <span class="token operator">=</span> <span class="token keyword">this</span>
  <span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>ResourceHints<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>State<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>Scripts<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>Styles<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    context<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>render<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span> <span class="token operator">+</span> type<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> renderer<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>render<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span> <span class="token operator">+</span> type<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>renderer<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  context<span class="token punctuation">.</span>getPreloadFiles <span class="token operator">=</span> r<span class="token operator">**</span>erer<span class="token punctuation">.</span>ge<span class="token operator">**</span><span class="token operator">**</span>：<span class="token operator">**</span><span class="token function">reloadFiles</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>renderer<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在具体渲染模版时，会有以下两种情况：</p><ul><li><p>未定义模版引擎 渲染结果会被直接返回给 renderToString 的回调函数，而页面所需要的脚本依赖我们通过用户上下文 context 的 renderStyles，renderResourceHints、renderState、renderScripts 这些函数分别获得。</p></li><li><p>定义了模版引擎 templateRender 会帮助我们进行 html 组装</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">TemplateRenderer</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">render</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">render</span> <span class="token punctuation">(</span><span class="token parameter">content<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">// parsedTemplate 用于解析函数得到的包含三个部分的 compile 对象，</span>
<span class="token comment">// 按照顺序进行字符串模版的拼接</span>
  <span class="token keyword">var</span> template <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>parsedTemplate<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>template<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>render cannot be called without a template<span class="token punctuation">.</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  context <span class="token operator">=</span> context <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
 
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> template <span class="token operator">===</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token keyword">function</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">template</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> context<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
 
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>inject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      template<span class="token punctuation">.</span><span class="token function">head</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">+</span>
      <span class="token punctuation">(</span>context<span class="token punctuation">.</span>head <span class="token operator">||</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token operator">+</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderResourceHints</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">+</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderStyles</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">+</span>
      template<span class="token punctuation">.</span><span class="token function">neck</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">+</span>
      content <span class="token operator">+</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderState</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">+</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderScripts</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">+</span>
      template<span class="token punctuation">.</span><span class="token function">tail</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此我们了解了 Vue SSR 的<strong>整体架构逻辑</strong>和 vue-server-renderer 的**核心代码，**当然 SSR 也是有很多开箱即用的脚手架来供我们选择的。</p><h1 id="开箱即用的ssr脚手架" tabindex="-1"><a class="header-anchor" href="#开箱即用的ssr脚手架" aria-hidden="true">#</a> 开箱即用的SSR脚手架</h1><p>目前前端流行的三种技术栈 React, Vue 和 Angula ，已经孵化出对应的服务端渲染框架，开箱即用，感兴趣的同学可以自主学习使用。</p><ul><li>React: Next.js</li><li>Vue: Nuxt.js</li><li>Angula: Nest.js</li></ul><h1 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h1><p>服务端渲染 ( SSR ) 是一个同构程序，是否使用 SSR 取决于<strong>内容到达时间</strong>对应用程序的重要程度。如果对初始加载的几百毫秒可接受，SSR 的使用就有点小题大做了。</p><p>对于源码的学习可以帮助更好借鉴优秀的程序写法和激发对日常代码编程架构的思考，如果你更倾向箱即用的解决方案，那可以使用现有的 SSR 脚手架来搭建项目，这些脚手架的模版抽象和额外的功能扩展可以提供平滑的开箱体验。</p><h1 id="参考文献" tabindex="-1"><a class="header-anchor" href="#参考文献" aria-hidden="true">#</a> 参考文献</h1>`,93),v={href:"https://ssr.vuejs.org/zh",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.w3cschool.cn/vuessr/vuessr-jep83epx.html",target:"_blank",rel:"noopener noreferrer"},b={href:"https://juejin.cn/post/6844903812700831757",target:"_blank",rel:"noopener noreferrer"},h=n("h2",{id:"号外号外",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#号外号外","aria-hidden":"true"},"#"),s(" 号外号外")],-1),f=n("p",null,"你一票我一票,政采云明天就出道，掘金 2021 年度作者榜单火热打榜中！",-1),g=n("p",null,"请大家动动小小指头，将手中的票投给我们。您的支持就是我们前行的最大动力，",-1),w={href:"https://rank.juejin.cn/rank/2021/3456520257288974?utm_campaign=annual_2021&utm_medium=self_web_share&utm_source=%E6%94%BF%E9%87%87%E4%BA%91%E5%89%8D%E7%AB%AF%E5%9B%A2%E9%98%9F",target:"_blank",rel:"noopener noreferrer"},y=n("li",null,"app 入口: 请滚动到文章最顶部，然后按下图操作↓",-1),x=p('<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f2593ef5d2f94427a24f2499eb6db5a0~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h2 id="推荐阅读" tabindex="-1"><a class="header-anchor" href="#推荐阅读" aria-hidden="true">#</a> 推荐阅读</h2><ul><li>[sketch插件开发指南](https://juejin.cn/post/7033911797279096845 &quot;sketch插件开发指南&quot;)</li><li>[在 Vue 中为什么不推荐用 index 做 key](https://juejin.cn/post/7026119446162997261 &quot;在 Vue 中为什么不推荐用 index 做 key&quot;)</li><li>[浅析Web录屏技术方案与实现](https://juejin.cn/post/7028723258019020836 &quot;浅析Web录屏技术方案与实现&quot;)</li></ul><h2 id="开源作品" tabindex="-1"><a class="header-anchor" href="#开源作品" aria-hidden="true">#</a> 开源作品</h2><ul><li>政采云前端小报</li></ul>',5),S={href:"https://www.zoo.team/openweekly/",target:"_blank",rel:"noopener noreferrer"},j=n("ul",null,[n("li",null,"商品选择 sku 插件")],-1),_={href:"https://github.com/zcy-inc/skuPathFinder-back",target:"_blank",rel:"noopener noreferrer"},R=n("h2",{id:"招贤纳士",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#招贤纳士","aria-hidden":"true"},"#"),s(" 招贤纳士")],-1),V=n("p",null,"政采云前端团队（ZooTeam），一个年轻富有激情和创造力的前端团队，隶属于政采云产品研发部，Base 在风景如画的杭州。团队现有 60 余个前端小伙伴，平均年龄 27 岁，近 4 成是全栈工程师，妥妥的青年风暴团。成员构成既有来自于阿里、网易的“老”兵，也有浙大、中科大、杭电等校的应届新人。团队在日常的业务对接之外，还在物料体系、工程平台、搭建平台、性能体验、云端应用、数据分析及可视化等方向进行技术探索和实战，推动并落地了一系列的内部技术产品，持续探索前端技术体系的新边界。",-1),q=n("p",null,[s("如果你想改变一直被事折腾，希望开始能折腾事；如果你想改变一直被告诫需要多些想法，却无从破局；如果你想改变你有能力去做成那个结果，却不需要你；如果你想改变你想做成的事需要一个团队去支撑，但没你带人的位置；如果你想改变既定的节奏，将会是“5 年工作时间 3 年工作经验”；如果你想改变本来悟性不错，但总是有那一层窗户纸的模糊… 如果你相信相信的力量，相信平凡人能成就非凡事，相信能遇到更好的自己。如果你希望参与到随着业务腾飞的过程，亲手推动一个有着深入的业务理解、完善的技术体系、技术创造价值、影响力外溢的前端团队的成长历程，我觉得我们该聊聊。任何时间，等着你写点什么，发给 "),n("code",null,"ZooTeam@cai-inc.com")],-1),C=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/98d3aa3d1f8646a8bcda8cfd9e335a4b~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1);function T(N,E){const a=l("ExternalLinkIcon");return o(),c("div",null,[r,u,n("p",null,[s("> 这是第 128 篇不掺水的原创，想获取更多原创好文，请搜索公众号关注我们吧~ 本文首发于政采云前端博客："),n("a",k,[s("服务端渲染SSR及实现原理"),e(a)])]),d,n("ul",null,[n("li",null,[n("a",v,[s("Vue SSR 官网"),e(a)])]),n("li",null,[n("a",m,[s("Vue 使用指南"),e(a)])]),n("li",null,[n("a",b,[s("Vue SSR 源码解析"),e(a)])])]),h,f,g,n("ul",null,[n("li",null,[s("web 入口: "),n("a",w,[s("点我投票"),e(a)])]),y]),x,n("p",null,[n("strong",null,[s("开源地址 "),n("a",S,[s("www.zoo.team/openweekly/"),e(a)])]),s(" (小报官网首页有微信交流群)")]),j,n("p",null,[n("strong",null,[s("开源地址 "),n("a",_,[s("https://github.com/zcy-inc/skuPathFinder-back/"),e(a)])])]),R,V,q,C])}const F=t(i,[["render",T],["__file","服务端渲染SSR及实现原理.html.vue"]]);export{F as default};
