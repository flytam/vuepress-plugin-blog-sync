import{_ as e,z as o,A as c,Y as n,C as s,U as t,a6 as p,Q as l}from"./framework-cb9358d9.js";const i={},u=n("p",null,[n("img",{src:"//p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/375a376557e345a0ba1679d3f947bb12~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1),r={href:"https://zoo.team/article/performance-testing-system",target:"_blank",rel:"noopener noreferrer"},k=p('<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fc6dd747b530492aa97fd427984f2d7b~tplv-k3u1fbpfcp-watermark.image" alt=""></p><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>前端页面性能对用户留存、用户直观体验有着重要影响，当页面加载时间超过 2 秒后，加载时间每增加一秒，就会有大量的用户流失，所以做好页面性能优化，无疑对网站来说是一个非常重要的步骤。</p><p>那如何才能知道一个页面的性能情况呢？知道了页面性能情况后又如何进行优化呢？一个页面的性能指标非常多，面对一大堆性能指标，可能一个老手也一时间不知道从何开始分析。而且不同团队，负责的业务不同，性能分析的指标也不能够一概而论。打个比方说，对于一般的电商网站，一定会有很多图片，那图片加载的性能提升对网站的性能提升作用就比较大。而对于一些由表单组成的中台页面，提升图片加载速度的收益远小于电商网站。</p><p>总结来说，不同的团队有着各自不同的业务，业务之间千差万别，性能指标也不能一概而论，所以用一套统一的检测模型覆盖所有场景是不现实的。本文将介绍如何定制一个属于自己团队的性能检测平台。</p><p>先看下政采云的性能检测平台——百策</p><p><img src="//p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/694b793b53144ba19007cf09b34f8712~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>在聊性能指标之前，先讲一下 Lighthouse。</p><h2 id="lighthouse" tabindex="-1"><a class="header-anchor" href="#lighthouse" aria-hidden="true">#</a> Lighthouse</h2>',9),d={href:"https://github.com/GoogleChrome/lighthouse",target:"_blank",rel:"noopener noreferrer"},m=p('<p>下图为 Lighthouse 检测页面性能的一个最终结果，可以看到其实指标已经比较完善了。</p><p><img src="//p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d89b612278c943e6a43ccf26cfbd8253~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>可能有人会问，为什么不直接使用 Lighthouse。首先，由于不可描述的原因，国内直接使用 Chrome 开发者工具中的 Lighthouse 时，会一直处于 Lighthouse is warming up 状态。其次，Chrome 扩展程序对于需要登录的页面也不支持。最后，对于前言中，某一些定制需求 Lighthouse 也不能全然满足，所以要基于 Lighthouse 进行定制，做一个满足业务要求的性能检测平台。</p><h2 id="整体设计架构" tabindex="-1"><a class="header-anchor" href="#整体设计架构" aria-hidden="true">#</a> 整体设计架构</h2><p>下图是百策系统的一个整体架构</p><ul><li>前端主要使用的是 Antd 和 Antd Charts，包含常规页面的展示和部分性能走势图表的展示。</li><li>服务端基于 nestjs 开发，接入 Sentry 做报警监控。helmet 用于保护系统免受一些众所周知的 Web 漏洞影响。</li><li>node-schedule 用于每周定时计算已统计入系统的页面性能，并通过 nodemailer 发送邮件。</li><li>Compression 主要用于启用 gzip。</li><li>最主要的检测服务基于 Puppeteer 和 Lighthouse 开发。</li></ul><p><img src="//p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a6ca9804b77d423f926451fa804bb46f~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><h2 id="百策采集页面性能数据的流程" tabindex="-1"><a class="header-anchor" href="#百策采集页面性能数据的流程" aria-hidden="true">#</a> 百策采集页面性能数据的流程</h2>',8),v={href:"https://www.infoq.cn/article/Dxa8aM44oz*Lukk5Ufhy",target:"_blank",rel:"noopener noreferrer"},b=p(`<p>先看下 Chrome Lighthouse 的架构图（图来源于 Lighthouse Git），主要基于 4 个主要步骤实现，分别是交互驱动，收集，审计以及记录组成，参考了 Chrome Lighthouse，百策的检测模型逻辑也主要由这 4 步组成：</p><p>1、页面交互后，发起请求调用服务。</p><p>2、遍历当前页面所需要的收集器，合并为一个总的收集器，并采集数据。</p><p>3、将第二步采集到的数据做性能计算和评分。</p><p>4、将性能检测结果存入数据库。</p><p><img src="//p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/569316ef9edb4515bd7bb4fd3b1b6e08~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><h2 id="百策采集页面性能数据的实现方案" tabindex="-1"><a class="header-anchor" href="#百策采集页面性能数据的实现方案" aria-hidden="true">#</a> 百策采集页面性能数据的实现方案</h2><p>百策实现页面性能数据采集的方案主要依靠无头浏览器 Puppeteer 结合 Lighthouse，Puppeteer 是 Chrome 团队提供的一个无界面 Chrome 工具，人称无头浏览器，通过 API 来控制 Node 端的 Chrome。百策的主要逻辑是在服务端起一个无需显示的 Chrome，通过 Lighthouse 的 API 新建一个标签页并打开，Lighthouse 会计算具体的性能指标，具体的检测逻辑可以参考下图。接下来我会用关键代码说明如何实现其中的关键步骤。</p><p><img src="//p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8e5e3231877d4f99aa3ccba2e2a33ff3~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><h3 id="○-开始入口" tabindex="-1"><a class="header-anchor" href="#○-开始入口" aria-hidden="true">#</a> ○ 开始入口</h3><p>以下是百策价值 1 个亿的代码，主要流程如下，钩子函数是用于在页面打开的不同时间获取性能数据</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/**
  * 执行页面信息收集
  *
  * <span class="token keyword">@param</span> <span class="token punctuation">{</span>PassContext<span class="token punctuation">}</span> passContext
  */</span>
<span class="token keyword">async</span> <span class="token function">run</span><span class="token punctuation">(</span>runOptions<span class="token operator">:</span> RunOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> gathererResults <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token comment">// 使用 Puppeteer 创建无头浏览器，创建页面</span>
  <span class="token keyword">const</span> passContext <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span>runOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token comment">// 根据用户是否输入了用户名和密码判断是否要登录政采云</span>
    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">preLogin</span><span class="token punctuation">(</span>passContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 页面打开前的钩子函数</span>
    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">beforePass</span><span class="token punctuation">(</span>passContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 打开页面，获取页面数据</span>
    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getLhr</span><span class="token punctuation">(</span>passContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 页面打开后的钩子函数</span>
    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">afterPass</span><span class="token punctuation">(</span>passContext<span class="token punctuation">,</span> gathererResults<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 收集页面性能</span>
    <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">collectArtifact</span><span class="token punctuation">(</span>passContext<span class="token punctuation">,</span> gathererResults<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> error<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
    <span class="token comment">// 关闭页面和无头浏览器</span>
    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">disposeDriver</span><span class="token punctuation">(</span>passContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="○-创建无头浏览器" tabindex="-1"><a class="header-anchor" href="#○-创建无头浏览器" aria-hidden="true">#</a> ○ 创建无头浏览器</h3>`,13),h={href:"https://zhaoqize.github.io/puppeteer-api-zh_CN/#?product=Puppeteer&version=v5.3.0&show=api-puppeteerlaunchoptions",target:"_blank",rel:"noopener noreferrer"},g=p(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/**
  * 登录前准备工作，创建浏览器和页面
  *
  * <span class="token keyword">@param</span> <span class="token punctuation">{</span>RunOptions<span class="token punctuation">}</span> runOptions
  */</span>
<span class="token keyword">async</span> <span class="token function">prepare</span><span class="token punctuation">(</span>runOptions<span class="token operator">:</span> RunOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// puppeteer 启动的配置项</span>
  <span class="token keyword">const</span> launchOptions<span class="token operator">:</span> puppeteer<span class="token punctuation">.</span>LaunchOptions <span class="token operator">=</span> <span class="token punctuation">{</span>
    headless<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 是否无头模式</span>
    defaultViewport<span class="token operator">:</span> <span class="token punctuation">{</span> width<span class="token operator">:</span> <span class="token number">1440</span><span class="token punctuation">,</span> height<span class="token operator">:</span> <span class="token number">960</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 指定打开页面的宽高</span>
    <span class="token comment">// 浏览器实例的参数配置，具体配置可以参考此链接：https://peter.sh/experiments/chromium-command-line-switches/</span>
    args<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token operator">--</span>no<span class="token operator">-</span>sandbox<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token operator">--</span>disable<span class="token operator">-</span>dev<span class="token operator">-</span>shm<span class="token operator">-</span>usage<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    executablePath<span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>chromium<span class="token operator">-</span>browser<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token comment">// 默认 Chromium 执行的路径，此路径指的是服务器上 Chromium 安装的位置</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token comment">// 服务器上运行时使用服务器上独立安装的 Chromium</span>
  <span class="token comment">// 本地运行的时候使用 node_modules 中的 Chromium</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>development<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">delete</span> launchOptions<span class="token punctuation">.</span>executablePath<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 创建浏览器对象</span>
  <span class="token keyword">const</span> browser <span class="token operator">=</span> <span class="token keyword">await</span> puppeteer<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span>launchOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 获取浏览器对象的默认第一个标签页</span>
  <span class="token keyword">const</span> page <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">pages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token comment">// 返回浏览器和页面对象</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span> browser<span class="token punctuation">,</span> page <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="○-模拟登录" tabindex="-1"><a class="header-anchor" href="#○-模拟登录" aria-hidden="true">#</a> ○ 模拟登录</h3>`,2),f={href:"https://juejin.cn/post/6844903955852591111#heading-14",target:"_blank",rel:"noopener noreferrer"},w=n("h3",{id:"○-打开页面",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#○-打开页面","aria-hidden":"true"},"#"),s(" ○ 打开页面")],-1),y={href:"https://github.com/GoogleChrome/lighthouse/blob/master/docs/puppeteer.md",target:"_blank",rel:"noopener noreferrer"},_=p(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/**
  * 在 Puppeteer 中使用 Lighthouse
  *
  * <span class="token keyword">@param</span> <span class="token punctuation">{</span>RunOptions<span class="token punctuation">}</span> runOptions
  */</span>
<span class="token keyword">async</span> <span class="token function">getLhr</span><span class="token punctuation">(</span>passContext<span class="token operator">:</span> PassContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 获取浏览器对象和检测链接</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> browser<span class="token punctuation">,</span> url <span class="token punctuation">}</span> <span class="token operator">=</span> passContext<span class="token punctuation">;</span>
  <span class="token comment">// 开始检测</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> artifacts<span class="token punctuation">,</span> lhr <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">lighthouse</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    port<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token constant">URL</span></span><span class="token punctuation">(</span>browser<span class="token punctuation">.</span><span class="token function">wsEndpoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>port<span class="token punctuation">,</span>
    output<span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>json<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
    logLevel<span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>info<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
    emulatedFormFactor<span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>desktop<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
    throttling<span class="token operator">:</span> <span class="token punctuation">{</span>
      rttMs<span class="token operator">:</span> <span class="token number">40</span><span class="token punctuation">,</span>
      throughputKbps<span class="token operator">:</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span>
      cpuSlowdownMultiplier<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
      requestLatencyMs<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 0 means unset</span>
      downloadThroughputKbps<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      uploadThroughputKbps<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    disableDeviceEmulation<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    onlyCategories<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>performance<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 是否只检测 performance</span>
    <span class="token comment">// chromeFlags: [&amp;#39;--disable-mobile-emulation&amp;#39;, &amp;#39;--disable-storage-reset&amp;#39;],</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 回填数据</span>
  passContext<span class="token punctuation">.</span>lhr <span class="token operator">=</span> lhr<span class="token punctuation">;</span>
  passContext<span class="token punctuation">.</span>artifacts <span class="token operator">=</span> artifacts<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="○-钩子函数" tabindex="-1"><a class="header-anchor" href="#○-钩子函数" aria-hidden="true">#</a> ○ 钩子函数</h3><p>钩子函数实际是一个抽象类，在运行不同的 Gathering 时，对应的 Class 会实现该抽象类。钩子函数的主要功能在于不同时期注册回调，主要有 2 个钩子函数，beforePass 和 afterPass。beforePass 的作用主要是在页面还没加载前先注册一些监听器，比如说想在页面 load 之后，就拿到 DOM 节点的深度，那就需要在 beforePass 中注册监听。afterPass 主要是页面性能统计完成之后，返回结构化的数据。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/**
  * 执行所有收集器中的 afterPass 方法
  *
  * <span class="token keyword">@param</span> <span class="token punctuation">{</span>PassContext<span class="token punctuation">}</span> passContext
  * <span class="token keyword">@param</span> <span class="token punctuation">{</span>GathererResults<span class="token punctuation">}</span> gathererResults
  */</span>
<span class="token keyword">async</span> <span class="token function">afterPass</span><span class="token punctuation">(</span>passContext<span class="token operator">:</span> PassContext<span class="token punctuation">,</span> gathererResults<span class="token operator">:</span> GathererResults<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> page<span class="token punctuation">,</span> gatherers <span class="token punctuation">}</span> <span class="token operator">=</span> passContext<span class="token punctuation">;</span>
  <span class="token comment">// 遍历所有收集器，执行 afterPass 方法</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> gatherer <span class="token keyword">of</span> gatherers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> gathererResult <span class="token operator">=</span> <span class="token keyword">await</span> gatherer<span class="token punctuation">.</span><span class="token function">afterPass</span><span class="token punctuation">(</span>passContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
    gathererResults<span class="token punctuation">[</span>gatherer<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> gathererResult<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 执行完所有方法后截图记录</span>
  gathererResults<span class="token punctuation">.</span>screenshotBuffer <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">screenshot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="○-收集器的实现" tabindex="-1"><a class="header-anchor" href="#○-收集器的实现" aria-hidden="true">#</a> ○ 收集器的实现</h3><p>百策总共有 6 个收集器，分别是 Domstats Gathering，Image Elements Gathering，Lighthouse Gathering，Metrics Gathering， Network Recorder Gathering 和 Performance Gathering。</p><p>每个收集器都会实现特定的收集功能：</p><ul><li>Domstats Gathering： 收集 DOM 相关的数据，比如 DOM 元素数量，DOM 最大深度，document 是否有滚动条等。</li><li>Image Elements Gathering：收集所有的图片，并记录下图片的宽高，定位等属性。</li><li>Lighthouse Gathering：收集 Lighthouse 相关的指标：比如 FCP、LCP、TBT、CLS 等等。</li><li>Metrics Gathering：收集 JS 事件监听数量，JS 堆栈大小等。</li><li>Network Recorder Gathering：收集所有页面请求，包括状态码，请求方式，请求头，响应头等。</li><li>Performance Gathering：主要记录了 window.performance 下的一些数据，用于计算一些时间。</li></ul><p>以 Domstats Gathering 做为例子，详细说明如何获取页面检测数据。首先实现抽象类的 2 个方法：beforePass 和 afterPass。beforePass 的实现逻辑是对 page 对象添加 domcontentloaded 时间点的监听方法，监听方法的主要功能是判断 document 是否有横向滚动条。afterPass 方法主要是获取 Lighthouse lhr 中的数据，分析并得到 DOM 最大深度，DOM 节点数等。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Gatherer <span class="token punctuation">}</span> from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token operator">/</span>gatherer<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> PassContext <span class="token punctuation">}</span> from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>interfaces<span class="token operator">/</span>pass<span class="token operator">-</span>context<span class="token punctuation">.</span>interface<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token comment">// 实现 Gatherer 抽象类</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">DOMStats</span> <span class="token keyword">extends</span> <span class="token class-name">Gatherer</span> <span class="token punctuation">{</span>
  horizontalScrollBar<span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
  * 页面打开前的钩子函数
  *
  * <span class="token keyword">@param</span> <span class="token punctuation">{</span>PassContext<span class="token punctuation">}</span> passContext
  */</span>
  <span class="token keyword">async</span> <span class="token function">beforePass</span><span class="token punctuation">(</span>passContext<span class="token operator">:</span> PassContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> browser <span class="token punctuation">}</span> <span class="token operator">=</span> passContext<span class="token punctuation">;</span>
    <span class="token comment">// 当浏览器的对象发生变化的时候，说明新打开页面了，此时可以获取到标签页 page 对象</span>
    browser<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>targetchanged<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> target <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> page <span class="token operator">=</span> <span class="token keyword">await</span> target<span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 等待 dom 文档加载完成的时候</span>
      page<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>domcontentloaded<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 通过 evaluate 方法可以获取到页面上的元素和方法</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>horizontalScrollBar <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollWidth <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientWidth<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token doc-comment comment">/**
  * 页面执行结束后的钩子函数
  *
  * <span class="token keyword">@param</span> <span class="token punctuation">{</span>PassContext<span class="token punctuation">}</span> passContext
  */</span>
  <span class="token keyword">async</span> <span class="token function">afterPass</span><span class="token punctuation">(</span>passContext<span class="token operator">:</span> PassContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> artifacts <span class="token punctuation">}</span> <span class="token operator">=</span> passContext<span class="token punctuation">;</span>
        <span class="token comment">// 从 lighthouse 结果对象 lhr 中获取 dom 节点的 depth，width 和 totalBodyElements</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span>
      DOMStats<span class="token operator">:</span> <span class="token punctuation">{</span> depth<span class="token punctuation">,</span> width<span class="token punctuation">,</span> totalBodyElements <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span> <span class="token operator">=</span> artifacts<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      numElements<span class="token operator">:</span> totalBodyElements<span class="token punctuation">,</span>
      maxDepth<span class="token operator">:</span> depth<span class="token punctuation">.</span>max<span class="token punctuation">,</span>
      maxWidth<span class="token operator">:</span> width<span class="token punctuation">.</span>max<span class="token punctuation">,</span>
      hasHorizontalScrollBar<span class="token operator">:</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>horizontalScrollBar<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>等待所有 Gathering 都执行完成之后，数据就可以落库了。</p><h3 id="○-根据模型计算得分" tabindex="-1"><a class="header-anchor" href="#○-根据模型计算得分" aria-hidden="true">#</a> ○ 根据模型计算得分</h3><p>数据入库后还要根据不同的模型计算不同的得分。前台页面重展示，并且图片加载会比较多，中台页面重表单提交，所以不同的模型一定有不同的计算逻辑。在政采云，前台页面我们使用的框架是 Vue， 中台页面使用的是 React（部分页面由于历史原因用的还是 jQuery）。所以大致可以根据框架来区分模型。判断框架是 Vue 还是 React 可以根据 DOM 是否包含 <code>_reactRootContainer</code> 和 <code>__vue__</code> 来判断。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/**
  * 计算得分方法，根据模型上的得分配置项最终生成得分并入库
  *
  * <span class="token keyword">@param</span> <span class="token punctuation">{</span>Artifact<span class="token punctuation">}</span> artifact
  * <span class="token keyword">@param</span> <span class="token punctuation">{</span>string[]<span class="token punctuation">}</span> whitelist
  */</span>
<span class="token keyword">async</span> <span class="token function">calc</span><span class="token punctuation">(</span>artifact<span class="token operator">:</span> Artifact<span class="token punctuation">,</span> whitelist<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>AuditDto<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 根据每条 metaid 动态加载不同的计算方法文件，每个 metaid 指的就是一个性能评分指标，比如说是否有横向滚动条</span>
  <span class="token keyword">const</span> audit <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">../audits/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>m <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> m<span class="token punctuation">.</span>default<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 执行每个计算方法文件中的 audit 方法，计算得分，比如没有横向滚动条的时候得5分，有横向滚动条不得分</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> rawValue<span class="token punctuation">,</span> score<span class="token punctuation">,</span> displayValue<span class="token punctuation">,</span> details <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token operator">=</span> audit<span class="token punctuation">.</span><span class="token function">audit</span><span class="token punctuation">(</span>artifact<span class="token punctuation">,</span> whitelist<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> auditDto <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AuditDto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  auditDto<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
    <span class="token comment">// 检测指标名称展示</span>
  auditDto<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>title<span class="token punctuation">;</span>
    <span class="token comment">// 检测指标描述</span>
  auditDto<span class="token punctuation">.</span>description <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>description<span class="token punctuation">;</span>
    <span class="token comment">// 检测指标详情</span>
  auditDto<span class="token punctuation">.</span>details <span class="token operator">=</span> details<span class="token punctuation">;</span>
    <span class="token comment">// 检测指标登记，判断是否计算入得分</span>
  auditDto<span class="token punctuation">.</span>level <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>level<span class="token punctuation">;</span>
  <span class="token comment">// 扣分上限根据不同的 meta，可能上限也有不同，upperLimitScore 指的是扣分上限，从数据库获取</span>
  auditDto<span class="token punctuation">.</span>score <span class="token operator">=</span> score <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>weight <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">=</span> <span class="token operator">-</span><span class="token keyword">this</span><span class="token punctuation">.</span>upperLimitScore <span class="token operator">?</span> <span class="token operator">-</span><span class="token keyword">this</span><span class="token punctuation">.</span>upperLimitScore <span class="token operator">:</span> score <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>weight<span class="token punctuation">;</span>
    <span class="token comment">// 得分情况</span>
  auditDto<span class="token punctuation">.</span>rawValue <span class="token operator">=</span> rawValue<span class="token punctuation">;</span>
    <span class="token comment">// 得分如何展示</span>
  auditDto<span class="token punctuation">.</span>displayValue <span class="token operator">=</span> displayValue<span class="token punctuation">;</span>
  <span class="token keyword">return</span> auditDto<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下是政采云前台模型，每一项都是一个检测指标，告警项只做提示，不实际扣分，前台主要以图片加载和展示为准，所以模型设计上，会更加侧重页面加载时间的关键指标，并且会着重考虑图片的展示。 <img src="//p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/521dcc0b89264035854a90d1387f3c47~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>前面内容主要介绍了百策的数据采集和评分功能，这也是百策最主要的功能。除了核心功能外，百策还有数据看版、提供性能解决方案、性能走势，性能对比，定时监测等功能。在这篇文章中我也不一一阐述了。</p><h3 id="○-自动检测" tabindex="-1"><a class="header-anchor" href="#○-自动检测" aria-hidden="true">#</a> ○ 自动检测</h3><p>当然除了上面这些手动检测以外，百策也支持自动检测。自动检测的主要目的是统计所有收录在系统中的页面，统计哪些页面性能优化的最好，哪些优化欠佳。具体的逻辑：每周五 2 点会对所有收录在百策中的页面进行检测，将检测成绩最高的 10 个页面，检测成绩最低的 10 个页面，检测成绩进步最快的 10 个页面，自动检测的逻辑主要通过 node-schedule 实现。发送邮件可以 ejs 实现渲染模版，定义好模版后通过 nodemailer 发送即可。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>
  Injectable<span class="token punctuation">,</span>
  OnModuleInit<span class="token punctuation">,</span>
<span class="token punctuation">}</span> from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">nestjs</span></span><span class="token operator">/</span>common<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> schedule from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>node<span class="token operator">-</span>schedule<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ScheduleService</span> <span class="token keyword">implements</span> <span class="token class-name">OnModuleInit</span> <span class="token punctuation">{</span>
  <span class="token function">onModuleInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">async</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 本地启动时不执行一系列定时任务</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>development<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 每周五02:00开始收集页面性能</span>
      schedule<span class="token punctuation">.</span><span class="token function">scheduleJob</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">hawkeye-weekly-report</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 调用检测接口记录性能评分</span>
        <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">report</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 每周五18:00发送周报</span>
      schedule<span class="token punctuation">.</span><span class="token function">scheduleJob</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">hawkeye-weekly-send</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">18</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 发送邮件的具体实现方法，主要通过 ejs 渲染模版，通过 nodemailer 发送邮件</span>
        <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="//p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a982a9cf1b4c48a89a591fb4f3fb6595~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><h3 id="○-对接鲁班" tabindex="-1"><a class="header-anchor" href="#○-对接鲁班" aria-hidden="true">#</a> ○ 对接鲁班</h3>`,21),x={href:"https://juejin.cn/post/6844903950508883982",target:"_blank",rel:"noopener noreferrer"},C=n("p",null,"在对接鲁班时，主要包括了鲁班页面的性能数据的录入和鲁班页面的录入（方便后续每周定时检测）。",-1),P=n("ul",null,[n("li",null,"鲁班性能数据的录入：和在鲁班生成页面时提供一个检测按钮，调用百策性能评分接口，生成检测数据。"),n("li",null,"鲁班页面的录入：在鲁班的新页面上线的时候，会自动调用百策录入接口，新增的页面会被录入到百策系统中。")],-1),L=n("h2",{id:"结尾",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#结尾","aria-hidden":"true"},"#"),s(" 结尾")],-1),j=n("p",null,"如果你也想搭建一个属于自己的性能检测平台，并且恰巧看到了这篇文章，希望此文对你有所帮助。",-1),D=n("p",null,"本文最主要讲的是如何搭建一个性能平台。当你已经能够搭建性能平台之后，不妨可以思考下业务页面的检测模型。",-1),O=n("h2",{id:"推荐阅读",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#推荐阅读","aria-hidden":"true"},"#"),s(" 推荐阅读")],-1),G={href:"https://juejin.cn/post/6882539694170013710",target:"_blank",rel:"noopener noreferrer"},R={href:"https://juejin.cn/post/6877155538430328845",target:"_blank",rel:"noopener noreferrer"},z=n("h2",{id:"招贤纳士",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#招贤纳士","aria-hidden":"true"},"#"),s(" 招贤纳士")],-1),M=n("p",null,"政采云前端团队（ZooTeam），一个年轻富有激情和创造力的前端团队，隶属于政采云产品研发部，Base 在风景如画的杭州。团队现有 40 余个前端小伙伴，平均年龄 27 岁，近 3 成是全栈工程师，妥妥的青年风暴团。成员构成既有来自于阿里、网易的“老”兵，也有浙大、中科大、杭电等校的应届新人。团队在日常的业务对接之外，还在物料体系、工程平台、搭建平台、性能体验、云端应用、数据分析及可视化等方向进行技术探索和实战，推动并落地了一系列的内部技术产品，持续探索前端技术体系的新边界。",-1),S=n("p",null,[s("如果你想改变一直被事折腾，希望开始能折腾事；如果你想改变一直被告诫需要多些想法，却无从破局；如果你想改变你有能力去做成那个结果，却不需要你；如果你想改变你想做成的事需要一个团队去支撑，但没你带人的位置；如果你想改变既定的节奏，将会是“5 年工作时间 3 年工作经验”；如果你想改变本来悟性不错，但总是有那一层窗户纸的模糊… 如果你相信相信的力量，相信平凡人能成就非凡事，相信能遇到更好的自己。如果你希望参与到随着业务腾飞的过程，亲手推动一个有着深入的业务理解、完善的技术体系、技术创造价值、影响力外溢的前端团队的成长历程，我觉得我们该聊聊。任何时间，等着你写点什么，发给 "),n("code",null,"ZooTeam@cai-inc.com")],-1),E=n("p",null,[n("img",{src:"//p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/90b6a3cc0a8845b5b75900b591dd4c04~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1);function N(V,I){const a=l("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("> 这是第 74 篇不掺水的原创，想获取更多原创好文，请搜索公众号关注我们吧~ 本文首发于政采云前端博客："),n("a",r,[s("如何从 0 到 1 搭建性能检测系统"),t(a)])]),k,n("p",null,[s("Lighthouse 是一个开源的自动化工具，用于分析和改善 Web 应用的质量。运行 Lighthouse 共有 4 种方式，分别在 Chrome 开发者工具，Chrome 扩展程序，Node CLI 和 Node module。百策主要基于 Node module 方式，在其基础上进行扩展开发，Lighthouse 详细使用参见 Git："),n("a",d,[s("https://github.com/GoogleChrome/lighthouse"),t(a)])]),m,n("p",null,[s("百策系统监控页面的方式主要采用的方式是合成监控，对于什么是合成监控，可以参考此文章："),n("a",v,[s("蚂蚁金服如何把前端性能监控做到极致"),t(a)]),s("。总结来说，合成监控的优势就是：能够采集的数据更丰富，并且可以根据不同的场景定制不同的运行环境等。首先百策要根据不同的场景，比如政采云前台页面、政采云中台页面制定不同的检测模型。其次百策的主要目标是提升页面性能，并且需要保证环境和硬件条件一致的情况下对页面做性能比对，所以选择采用合成监控更加适合。")]),b,n("p",null,[s("创建无头浏览器和页面，并指定浏览器对应的宽高，指定运行的参数，关于浏览器的参数可以参考如下文章："),n("a",h,[s("Puppeteer API"),t(a)]),s("。可以将 headless 设置为 false 看到浏览器的创建和 page 的新建，本地调试可以使用。")]),g,n("p",null,[s("模拟登录的场景可以参考另一篇，"),n("a",f,[s("“百策系统”实现模拟登录"),t(a)]),s("的实现，大致的实现逻辑如下：通过无头浏览器打开政采云登录页，通过 Puppeteer API 模拟输入用户名密码，并模拟点击登录按钮。根据同一浏览器下相同的域名共享 Cookie 的特性，再新开标签页打开需要检测的 URL，便可以开始性能检测。")]),w,n("p",null,[s("如何在 Puppeteer 中使用 Lighthouse 可以参考"),n("a",y,[s("Using Puppeteer with Lighthouse"),t(a)]),s("。下面的代码主要检测的是桌面端 Web 页面的性能，后续会放开更改检测环境的功能：可以根据政采云域名来判断页面是手机端还是电脑端，根据不同的系统环境，切换不同的浏览器参数。")]),_,n("p",null,[s("关于鲁班是什么，可以参考这篇文章："),n("a",x,[s("前端工程实践之可视化搭建系统"),t(a)]),s("，用一句话来总结，可以说鲁班就是政采云的页面搭建系统。")]),C,P,L,j,D,O,n("p",null,[n("a",G,[s("浅析 vue-router 源码和动态路由权限分配"),t(a)])]),n("p",null,[n("a",R,[s("编写高质量可维护的代码：一目了然的注释"),t(a)])]),z,M,S,E])}const A=e(i,[["render",N],["__file","如何从 0 到 1 搭建性能检测系统.html.vue"]]);export{A as default};
