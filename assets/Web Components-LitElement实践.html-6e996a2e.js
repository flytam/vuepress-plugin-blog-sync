import{_ as p,z as e,A as o,Y as n,C as s,U as t,a6 as l,Q as i}from"./framework-cb9358d9.js";const c={},u=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d4eb6a01e6564840817b127265b07edd~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1),r=n("p",null,[n("img",{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a969ebe9e6114d0ab1d2ac6e5e29089e~tplv-k3u1fbpfcp-watermark.image?",alt:"鹿竹.png"})],-1),d={href:"https://www.zoo.team/article/webcomponents",target:"_blank",rel:"noopener noreferrer"},k=n("h1",{id:"前言",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),s(" 前言")],-1),m=n("p",null,"Google 在 2011 年首次正式提出 Web Components 组件化概念时，它主要依赖三个技术：Custom Element、Shadow Dom、HTML Templates。直到 2015 年 Google 才真正投入生产进行使用，那时其他浏览器厂商还没有大规模支持这个特性，应用起来存在很大的兼容问题。",-1),v=n("p",null,"在这期间，Angular、React 和 Vue 三大框架崛起，并且都有“组件化”这个功能，也形成了各自的生态圈，但都与框架强关联。由于这个原因，开发者对于 Web Components 的呼声一直是只增不减。",-1),b=n("p",null,"直到今天，由于各大浏览器厂商的支持并结合 polyfills，在使用 Web Components 时，兼容性已经不是问题，开发者开始积极探索并实践 Web Components 技术。",-1),h=n("p",null,"如何更好地应用 Web Components 技术呢？有轻便的框架可以简化原生较为复杂的写法吗？那么我们来看看 LitElement 做了什么，能不能让 Web Components 变得更好用些。",-1),g=n("h1",{id:"回顾",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#回顾","aria-hidden":"true"},"#"),s(" 回顾")],-1),y={href:"https://juejin.cn/post/7096265630466670606",target:"_blank",rel:"noopener noreferrer"},f=l(`<ol><li>三要素和生命周期；</li><li>基本的组件通信，包括如何利用 observedAttributes 属性监听和 attributeChangedCallback 生命周期获取最新属性和通过 CustomEvent 抛出自定义事件来模拟实现状态的“双向绑定”；</li><li>如何设计组件库；</li><li>如何在原生、React 和 Vue 中优雅地使用我们封装的组件。</li></ol><p>但使用 Web Components 的原生写法确实存在一些不简洁的地方：</p><ol><li>属性监听：observedAttributes API 需要结合 attributeChangedCallback 生命周期，写起来代码量大；</li><li>组件通信时传入复杂数据类型：只能通过 stringify 后的 attribute 传递，特殊对象格式如 Date，Function 等传递起来会非常复杂，和现在的组件库能力上相比功能会比较弱，使用场景相对单一；</li><li>组件通信时双向绑定：需要结合自定义事件，写法会比较复杂。</li></ol><p>为了更丰富的开发场景和更好的开发体验，LitElement 把以上问题进行了归纳转化，即：</p><ol><li>如何响应 reactive properties的变化，并应用到UI上。</li><li>如何解决模板语法。</li></ol><p>它用了两个核心库来解决这个问题，分别是 lit-element 和 lit-html。</p><h1 id="litelement介绍" tabindex="-1"><a class="header-anchor" href="#litelement介绍" aria-hidden="true">#</a> LitElement介绍</h1><h2 id="基本内容" tabindex="-1"><a class="header-anchor" href="#基本内容" aria-hidden="true">#</a> 基本内容</h2><p>Lit 的核心是一个组件基类，它提供响应式、scoped 样式和一个小巧、快速且富有表现力的声明性模板系统，且支持 TypeScript 类型声明。Lit 在开发过程中不需要编译或构建，几乎可以在无工具的情况下使用。</p><p>我们知道 HTMLElement 是浏览器内置的类，LitElement 基类则是 HTMLElement 的子类，因此 Lit 组件继承了所有标准 HTMLElement 属性和方法。更具体来说，LitElement 继承自 ReactiveElement，后者实现了响应式属性，而后者又继承自 HTMLElement。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a0aeff8c5e50429aba5b7abde0b9b416~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>创建 Lit 组件还涉及许多概念，我们一一了解。</p><h2 id="定义一个组件" tabindex="-1"><a class="header-anchor" href="#定义一个组件" aria-hidden="true">#</a> 定义一个组件</h2><p>Lit 组件作为 Custom Element 的实现，并在浏览器中注册。</p><p>原生的写法主要是继承 HTMLElement 类并重写它的方法。而 LitElement 框架则是基于 HTMLElement 类二次封装了 LitElement 类，它将很多的写法通过一些语法糖的封装变得更简单了，极大地简化了这些代码。开发者只需继承 LitElement 类开发自己的组件然后通过浏览器原生方法 customElements.define 注册即可。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">LitButton</span> <span class="token keyword">extends</span> <span class="token class-name">LitElement</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span>  <span class="token punctuation">}</span>
customElements<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>lit<span class="token operator">-</span>button<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> LitButton<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>当定义一个 Lit 组件时，就是定义了一个自定义 HTML 元素。因此，可以像使用任何内置元素一样使用新元素。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>lit<span class="token operator">-</span>button type<span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>primary<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>lit<span class="token operator">-</span>button<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="渲染" tabindex="-1"><a class="header-anchor" href="#渲染" aria-hidden="true">#</a> 渲染</h2><p>组件具有 render 方法，该方法被调用以渲染组件的内容。</p><p>虽然 Lit 模板看起来像字符串插值，但 Lit 解析并创建一次静态 HTML，然后只更新表达式中需要更改的值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">LitButton</span> <span class="token keyword">extends</span> <span class="token class-name">LitElement</span> <span class="token punctuation">{</span>
	<span class="token comment">/* ... */</span>
	
	<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 使用模板字符串，可以包含表达式</span>
    <span class="token keyword">return</span> html<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
      &amp;lt;div&amp;gt;&amp;lt;slot name=&amp;quot;btnText&amp;quot;&amp;gt;&amp;lt;/slot&amp;gt;&amp;lt;/div&amp;gt;
    </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通常，组件的 render() 方法返回单个 TemplateResult 对象（与 html 标记函数返回的类型相同）。</p><p>&gt; TemplateResult对象：是 lit-html 接收模板字符串并经过它的 html 标记函数处理得到的一个纯值对象。</p><p>但是，它可以返回 Lit 可以渲染的任何内容，包括：</p><ul><li>primitive 原始类型值，如字符串、数字或布尔值。</li><li>由 html 函数创建的 TemplateResult 对象。</li><li>DOM 节点。</li><li>任何受支持类型的数组或可迭代对象。</li></ul><h2 id="响应式properties" tabindex="-1"><a class="header-anchor" href="#响应式properties" aria-hidden="true">#</a> 响应式properties</h2><p>&gt; DOM 中 property 与 attribute 的区别： &gt; &gt; - attribute 是HTML标签上的特性，可以理解为标签属性，它的值只能够是 String 类型，并且会自动添加同名 DOM 属性作为 property 的初始值； &gt; - property 是 DOM 中的属性，是 JavaScript 里的对象，有同名 attribiute 标签属性的 property 属性值的改变也并不会同步引起 attribute 标签属性值的改变；</p><p>Lit 组件接收标签属性 attribute 并将其状态存储为 JavaScript 的 class 字段属性或 properties。响应式 properties 是可以在更改时触发响应式更新周期、重新渲染组件以及可选地读取或重新写入 attribute 的属性。每一个 properties 属性都可以配置它的选项对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">LitButton</span> <span class="token keyword">extends</span> <span class="token class-name">LitElement</span> <span class="token punctuation">{</span>
	<span class="token comment">// 在静态属性类字段中声明属性，Lit会处理为响应式属性</span>
  <span class="token keyword">static</span> properties <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
      <span class="token literal-property property">reflect</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token comment">/*...其他选项属性...*/</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">other</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> Object
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  
  <span class="token comment">/* ... */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它的选项对象可以具有以下属性：</p><ul><li>attribute：表示是否与 property 关联，或者 attribute 关联属性的自定义名称。默认值：true，表示 property 会与标签属性 attribute 进行关联。如果设置为 false，则下面的 converter 转换器、reflect 反射和 type 类型选项将被忽略。主要用来将 attribute 与 property 建立关联。</li><li>type：在将 String 类型的 attribute 转换为 property 时，Lit 的默认属性转换器会将 String 类型解析为给定的类型。将 property 反映到 attribute 时反之亦然。如果设置了 converter 转换器，则将此字段传递给转换器。如果未指定类型，则默认转换器将其视为 String 类型。</li><li>converter：用于在 attribute 和 property 之间转换的自定义转换器。如果未指定，则使用默认属性转换器。主要用来决定 attribute 与 property 确定建立关联后如何进行数据转换，毕竟 attribute 只能是 String 类型而 property 却是可以自定义的类型，默认属性转换器则是依据 property 配置的 type 选项进行目标类型的转换。上例中表示接受的 other 属性的 attribute 后会序列化为目标 Object 类型。</li><li>hasChanged：每当设置属性时调用的函数以确定属性是否已更改，并应触发更新。如果未指定，LitElement 将使用严格的不等式检查 <code>(newValue !== oldValue)</code> 来确定属性值是否已更改。</li><li>reflect：property 属性值是否反映回关联的 attribute 属性。默认值：false，即 property 的改变不会主动引起 attribute 的改变。上例中表示接收 type 组件属性 properties 的改动会同步到对应 attribute 标签属性上。</li><li>state：设置为 true 以将 property 属性声明为内部 state。内部 state 的改变也会触发更新，就像响应式属性 property，但 Lit 不会为其生成 attribute 属性，用户不应从组件外部访问它。这些属性应标记为 private 或 protected。还建议使用前导下划线 (_) 之类的约定来标识 JavaScript 用户的 private 或 protected 属性。可以为 state 内部状态指定的唯一选项是 hasChanged 函数。</li></ul><p>省略选项对象或指定一个空的选项对象等效于为所有选项指定默认值。</p><p>另外，Lit 为每个响应式属性生成一个 getter/setter 对。当响应式属性发生变化时，组件会安排更新。Lit 也会自动应用 super 类声明的属性选项。除非需要更改选项，否则不需要重新声明该属性。</p><h2 id="样式" tabindex="-1"><a class="header-anchor" href="#样式" aria-hidden="true">#</a> 样式</h2><p>组件模板被渲染到它的 shadow root。添加到组件的样式会自动作用于 shadow root，并且只会影响组件 shadow root 中的元素。</p><p>Shadow DOM 为样式提供了强大的封装。如果 Lit 没有使用 Shadow DOM，则必须非常小心不要意外地为组件之外的元素设置样式，无论是组件的父组件还是子组件。这可能涉及编写冗长而繁琐的类名。通过使用 Shadow DOM，Lit 确保编写的任何选择器仅适用于 Lit 组件的 shadow root 中的元素。</p><p>可以使用标记的模板 css 函数在静态 styles 类字段中定义 scoped 样式。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">LitButton</span> <span class="token keyword">extends</span> <span class="token class-name">LitElement</span> <span class="token punctuation">{</span>
	<span class="token comment">// 使用纯CSS为组件定义scoped样式</span>
  <span class="token keyword">static</span> styles <span class="token operator">=</span> css<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
    .lit-button {
      display: inline-block;
      padding: 4px 20px;
      font-size: 14px;
      line-height: 1.5715;
      font-weight: 400;
      border: 1px solid #1890ff;
      border-radius: 2px;
      background-color: #1890ff;
      color: #fff;
      box-shadow: 0 2px #00000004;
      cursor: pointer;
    }
  </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  
  <span class="token comment">/* ... */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0a590ab8a7cd49948b5fcd5afb4308c6~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>如图同样应用了 lit-button 样式，但样式只对 shodow root 中的部分起作用。</p><p>静态 styles 类字段的值可以是：</p><ul><li><p>单个标记的模板文字。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">static</span> styles <span class="token operator">=</span> css<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">...</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>一组标记的模板文字。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">static</span> styles <span class="token operator">=</span> <span class="token punctuation">[</span> css<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">...</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> css<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">...</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><p>此外，styles 也支持在样式中使用表达式、使用语句、继承父类样式、共享样式、使用 unicode escapes 以及在模板 template 中使用样式等功能。Lit 也提供了两个指令，classMap 和 styleMap，可以方便地在 HTML 模板中条件式的应用 class 和 style。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>LitElement<span class="token punctuation">,</span> html<span class="token punctuation">,</span> css<span class="token punctuation">}</span> from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>lit<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>classMap<span class="token punctuation">}</span> from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>lit<span class="token operator">/</span>directives<span class="token operator">/</span><span class="token keyword">class</span><span class="token operator">-</span>map<span class="token punctuation">.</span>js<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>styleMap<span class="token punctuation">}</span> from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>lit<span class="token operator">/</span>directives<span class="token operator">/</span>style<span class="token operator">-</span>map<span class="token punctuation">.</span>js<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">LitButton</span> <span class="token keyword">extends</span> <span class="token class-name">LitElement</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> properties <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">classes</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">styles</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">static</span> styles <span class="token operator">=</span> css<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
  	.lit-button {
      display: inline-block;
      padding: 4px 20px;
      font-size: 14px;
      line-height: 1.5715;
      font-weight: 400;
      border: 1px solid #1890ff;
      border-radius: 2px;
      background-color: #1890ff;
      color: #fff;
      box-shadow: 0 2px #00000004;
      cursor: pointer;
    }
    .someclass {
      color: #000;
    }
    .anotherclass {
      font-size: 16px;
    }
  </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>classes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>lit<span class="token operator">-</span>button<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">someclass</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">anotherclass</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>styles <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">fontFamily</span><span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>Roboto<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> html<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
      &amp;lt;div class=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">classMap</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>classes<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> style=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">styleMap</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>styles<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;gt;
        &amp;lt;slot name=&amp;quot;btnText&amp;quot;&amp;gt;&amp;lt;/slot&amp;gt;
      &amp;lt;/div&amp;gt;
    </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
customElements<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>lit<span class="token operator">-</span>button<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> LitButton<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期" aria-hidden="true">#</a> 生命周期</h2><p>Lit 组件可以继承原生的自定义元素生命周期方法。但如果需要使用自定义元素生命周期方法，确保调用 super 类的生命周期，以保证父子组件生命周期的一致。</p><p><strong>标准的自定义组件生命周期</strong></p><ul><li>constructor()：创建元素时调用。适用于执行必须在第一次更新之前完成的一次性初始化任务。</li><li>connectedCallback()：在将组件添加到文档的 DOM 时调用。适用于仅在元素连接到文档时才发生的任务。其中最常见的是将事件侦听器添加到元素节点。</li><li>disconnectedCallback()：当组件从文档的 DOM 中移除时调用，用于移除对元素的引用。比如移除添加到元素节点的事件侦听器。</li><li>attributeChangedCallback()：当元素的 observedAttributes 之一更改时调用。</li><li>adoptedCallback()：当组件移动到新文档时调用。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">connectedCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">connectedCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>keydown<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_handleKeydown<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">disconnectedCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">disconnectedCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>keydown<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_handleKeydown<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了标准的自定义元素生命周期之外，Lit 组件还实现了响应式更新周期。Lit 异步执行更新，因此属性更改是批处理的，如果在请求更新后但在更新开始之前发生了更多属性更改，则所有更改都将在同一个更新中进行。当响应式 prpperties 属性发生变化或显式调用 requestUpdate() 方法时，将触发响应更新周期，它会将更改呈现给 DOM。</p><p><strong>响应式更新周期</strong></p><p>第一阶段：触发更新</p><ul><li><p>haschanged()：在设置响应式属性时隐式调用。默认情况下 hasChanged() 会进行严格的相等性检查，如果返回 true，则会安排更新。</p></li><li><p>requestUpdate()：调用 requestUpdate() 来安排显式更新。如果需要在与属性无关的内容发生更改时更新和呈现元素，将很有用。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">connectedCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">connectedCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>_timerInterval <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">requestUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">disconnectedCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">disconnectedCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">clearInterval</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_timerInterval<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>第二阶段：执行更新</p><ul><li>shouldUpdate()：调用以确定是否需要更新周期。</li><li>willUpdate()：在 update() 之前调用以计算更新期间所需的值。</li><li>update()：调用以更新组件的 DOM。</li><li>render()：由 update() 调用，并应实现返回用于渲染组件 DOM 的可渲染结果（例如 TemplateResult）。</li></ul><p>第三阶段：完成更新</p><ul><li>firstUpdated()：在组件的 DOM 第一次更新后调用，紧接在调用 updated() 之前。</li><li>updated()：每当组件的更新完成并且元素的 DOM 已更新和呈现时调用。</li><li>updateComplete()：updateComplete Promise 在元素完成更新时更新为 resolved 状态。</li></ul><p>其他：</p><ul><li>performUpdate()：调用 performUpdate() 以立即处理挂起的更新。这通常不需要，但在需要同步更新的极少数情况下可以这样做。</li><li>hasUpdated()：如果组件至少更新过一次，则 hasUpdated 属性返回 true。仅当组件尚未更新时，才可以在任何生命周期方法中使用 hasUpdated 来执行工作。</li><li>getUpdateComplete()：在执行 updateComplete 之前等待其他条件执行完成。</li></ul><p>整个流程图示如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6ab6506e796a431984dc138502bff731~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>了解了基本的概念和内容，如果你做过任何现代的、基于组件的 Web 开发，你应该对 Lit 的系列概念和用法感到似曾相识并且容易上手。下面通过一些案例了解 LitElement 的其他特性。</p><h2 id="传入复杂数据类型" tabindex="-1"><a class="header-anchor" href="#传入复杂数据类型" aria-hidden="true">#</a> 传入复杂数据类型</h2><p>对于复杂数据的处理，为什么会存在这个问题，根本原因还是因为 attribute 标签属性值只能是 String 类型，其他类型需要进行序列化。在 LitElement 中，只需要在父组件模板的属性值前使用(.)操作符，这样子组件内部 properties 就可以正确序列化为目标类型。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 父组件-复杂数据类型
 */</span>
 <span class="token keyword">import</span> <span class="token punctuation">{</span> html<span class="token punctuation">,</span> LitElement <span class="token punctuation">}</span> from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>lit<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
 <span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token operator">/</span>person<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>

 <span class="token keyword">class</span> <span class="token class-name">LitComplex</span> <span class="token keyword">extends</span> <span class="token class-name">LitElement</span> <span class="token punctuation">{</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>person<span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>name<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token operator">:</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>cai<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>friends <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>name<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token operator">:</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>zheng<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>name<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token operator">:</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>yun<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

   <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">return</span> html<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
     &amp;lt;div&amp;gt;复杂数据类型&amp;lt;/div&amp;gt;
     &amp;lt;lit-person .person=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>person<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> .friends=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>friends<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;gt;&amp;lt;/lit-person&amp;gt;
     </span><span class="token template-punctuation string">\`</span></span>
   <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>

 customElements<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>lit<span class="token operator">-</span>complex<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> LitComplex<span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token keyword">export</span> <span class="token keyword">default</span> LitComplex<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 基础组件
 */</span>
 <span class="token keyword">import</span> <span class="token punctuation">{</span> html<span class="token punctuation">,</span> LitElement <span class="token punctuation">}</span> from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>lit<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>

 <span class="token keyword">class</span> <span class="token class-name">LitPerson</span> <span class="token keyword">extends</span> <span class="token class-name">LitElement</span> <span class="token punctuation">{</span>
   <span class="token keyword">static</span> properties <span class="token operator">=</span> <span class="token punctuation">{</span>
     <span class="token literal-property property">person</span><span class="token operator">:</span> <span class="token punctuation">{</span>
       <span class="token literal-property property">type</span><span class="token operator">:</span> Object
     <span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token literal-property property">friends</span><span class="token operator">:</span> <span class="token punctuation">{</span>
       <span class="token literal-property property">type</span><span class="token operator">:</span> Array<span class="token punctuation">,</span>
     <span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token literal-property property">date</span><span class="token operator">:</span> <span class="token punctuation">{</span>
       <span class="token literal-property property">type</span><span class="token operator">:</span> Date<span class="token punctuation">,</span>
     <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>

   <span class="token function">firstUpdated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>person <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>friends <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>date <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
     <span class="token comment">// true true true</span>
   <span class="token punctuation">}</span>

   <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">return</span> html<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
     &amp;lt;div&amp;gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>person<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">有</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>friends<span class="token punctuation">.</span>length<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">个朋友&amp;lt;/div&amp;gt;
     </span><span class="token template-punctuation string">\`</span></span>
   <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>

 customElements<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>lit<span class="token operator">-</span>person<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> LitPerson<span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token keyword">export</span> <span class="token keyword">default</span> LitPerson<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样可以支持各种类型数据的传递使用。</p><h2 id="数据的双向绑定" tabindex="-1"><a class="header-anchor" href="#数据的双向绑定" aria-hidden="true">#</a> 数据的双向绑定</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 数据绑定-father
 */</span>
 <span class="token keyword">import</span> <span class="token punctuation">{</span> html<span class="token punctuation">,</span> LitElement <span class="token punctuation">}</span> from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>lit<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
 <span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token operator">/</span>lit<span class="token operator">-</span>input<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">LitInputFather</span> <span class="token keyword">extends</span> <span class="token class-name">LitElement</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> properties <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> String
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> html<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
    &amp;lt;lit-input value=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;gt;&amp;lt;/lit-input&amp;gt;
    </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

customElements<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>lit<span class="token operator">-</span>input<span class="token operator">-</span>father<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> LitInputFather<span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token keyword">export</span> <span class="token keyword">default</span> LitInputFather<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 数据绑定
 */</span>
 <span class="token keyword">import</span> <span class="token punctuation">{</span> html<span class="token punctuation">,</span> LitElement <span class="token punctuation">}</span> from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>lit<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>

 <span class="token keyword">class</span> <span class="token class-name">LitInput</span> <span class="token keyword">extends</span> <span class="token class-name">LitElement</span> <span class="token punctuation">{</span>
   <span class="token keyword">static</span> properties <span class="token operator">=</span> <span class="token punctuation">{</span>
     <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token punctuation">{</span>
       <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
       <span class="token literal-property property">reflect</span><span class="token operator">:</span> <span class="token boolean">true</span>
     <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>

   change <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
     <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

   <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">return</span> html<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
     &amp;lt;div&amp;gt;输入：&amp;lt;input value=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> @input=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>change<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/&amp;gt;&amp;lt;/div&amp;gt;
     </span><span class="token template-punctuation string">\`</span></span>
   <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>

 customElements<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>lit<span class="token operator">-</span>input<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> LitInput<span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token keyword">export</span> <span class="token keyword">default</span> LitInput<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里子组件接收了父组件的 value 属性，默认值设为了<code>&amp;#39;default&amp;#39;</code>，在子组件内通过监听输入事件更新了 value 值，因为 value 属性配置了 reflect 为 true，即可将属性值的改变反映回关联的 attribute 属性。</p><p>如图：input 组件默认值为<code>&amp;#39;default&amp;#39;</code>并在紧接着输入<code>&amp;#39;123&amp;#39;</code>后，组件的标签属性 value 同时发生了变化。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b5c9eedee1ea4def83841a934f5bc261~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>这时在父组件通过获取子组件的 attribute 即可获得子组件同步改动的值。以此实现数据的双向绑定，但 LitElement 本身是单向的数据流。</p><h2 id="指令使用" tabindex="-1"><a class="header-anchor" href="#指令使用" aria-hidden="true">#</a> 指令使用</h2><p>指令是可以通过自定义表达式呈现方式来扩展 Lit 的函数。 Lit 包含许多内置指令，可帮助满足各种渲染需求：以组件缓存为例。</p><p>在更改模板而不是丢弃 DOM 时缓存渲染的 DOM。在大型模板之间频繁切换时，可以使用此指令优化渲染性能。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * cache内置指令使用
 */</span>
 <span class="token keyword">import</span> <span class="token punctuation">{</span>LitElement<span class="token punctuation">,</span> html<span class="token punctuation">}</span> from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>lit<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
 <span class="token keyword">import</span> <span class="token punctuation">{</span>cache<span class="token punctuation">}</span> from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>lit<span class="token operator">/</span>directives<span class="token operator">/</span>cache<span class="token punctuation">.</span>js<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>

 <span class="token keyword">class</span> <span class="token class-name">LitCache</span> <span class="token keyword">extends</span> <span class="token class-name">LitElement</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> properties <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">detail</span><span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>detail<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">sumary</span><span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>sumary<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  detailView <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> html<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&amp;lt;div&amp;gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>data<span class="token punctuation">.</span>detail<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;lt;/div&amp;gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>

  summaryView <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> html<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&amp;lt;div&amp;gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>data<span class="token punctuation">.</span>sumary<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;lt;/div&amp;gt;</span><span class="token template-punctuation string">\`</span></span>

  changeTab <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>show <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>show<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> html<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">cache</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>show
      <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">detailView</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span>
      <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">summaryView</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">
    &amp;lt;button @click=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>changeTab<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;gt;切换&amp;lt;/button&amp;gt;
    </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
customElements<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>lit<span class="token operator">-</span>cache<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> LitCache<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子在模板中使用了语句表达式，再通过 click 事件切换组件时展示不同的模板内容；引入了 cache 指令函数，实现了 DOM 的缓存。</p><p>LitElement 内置了大量的指令函数可以使用。</p><p>此外，它还有丰富的 Mixins 和 Decoratrs 等内容值得细细学习，在此不再做过多展开。</p><h1 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h1><p>总的来说，LitElement 在 Web Components 开发方面有着很多比原生的优势，它具有以下特点：</p><ul><li>简单：在 Web Components 标准之上构建，Lit 添加了响应式、声明性模板和一些周到的功能，减少了模板文件。</li><li>快速：更新速度很快，因为 Lit 会跟踪 UI 的动态部分，并且只在底层状态发生变化时更新那些部分——无需重建整个虚拟树并将其与 DOM 的当前状态进行比较。</li><li>轻便： Lit 的压缩后大小约为 5 KB，有助于保持较小的包大小并缩短加载时间。</li><li>高扩展性：lit-html 基于标记的 template，它结合了 ES6 中的模板字符串语法，使得它无需预编译、预处理，就能获得浏览器原生支持，并且扩展能力强。</li><li>兼容良好：对浏览器兼容性非常好，对主流浏览器都能有非常好的支持。</li></ul><p>结合这些点，基本可以满足项目开发中的大部分场景。</p>`,86),w={href:"https://github.com/CYLpursuit/lit-element-ui",target:"_blank",rel:"noopener noreferrer"},_={href:"https://marketplace.visualstudio.com/items?itemName=runem.lit-plugin",target:"_blank",rel:"noopener noreferrer"},L=n("h1",{id:"尾声",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#尾声","aria-hidden":"true"},"#"),s(" 尾声")],-1),j=n("p",null,[s("我们知道，W3C 仿照 jQuery 的 $ 函数，实现了 "),n("code",null,"querySelector()"),s(" 和 "),n("code",null,"querySelectorAll()"),s(" 方法并逐渐取代了 jQuery 快速选择 DOM 元素的功能，加速了 jQuery 的没落，带着前端迈向了新的阶段。那么随着 Web Components 的不断发展，它会取代现有的前端框架吗？")],-1),x=n("p",null,"现阶段来看，还并不会，因为 Web Components 与各前端框架之间的关系是“共存”而非互斥，两者可以完美的互补。虽然前端框架 React 和 Vue 中组件化是其中非常重要的功能，但它们还有页面路由，数据绑定，模块化，CSS 预处理器，虚拟 DOM，Diff 算法以及各种庞大的生态等功能。而 Web components 所解决的仅仅是组件化这么一项功能。不论是 React 还是 Vue，从它们的官方文档有关于Web Components 的说明中，都可以更好帮助我们理解它们与 Web Components 之间的关系。",-1),C=n("h1",{id:"ui组件库",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#ui组件库","aria-hidden":"true"},"#"),s(" UI组件库")],-1),E={href:"https://shoelace.style/",target:"_blank",rel:"noopener noreferrer"},M={href:"https://wiredjs.com/",target:"_blank",rel:"noopener noreferrer"},W={href:"https://sap.github.io/ui5-webcomponents/playground/getting-started",target:"_blank",rel:"noopener noreferrer"},D={href:"https://kor-ui.com/introduction/welcome",target:"_blank",rel:"noopener noreferrer"},S=n("h1",{id:"参考资料",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考资料","aria-hidden":"true"},"#"),s(" 参考资料")],-1),O={href:"https://developer.mozilla.org/en-US/docs/Web/Web_Components",target:"_blank",rel:"noopener noreferrer"},T={href:"https://github.com/webcomponents/polyfills",target:"_blank",rel:"noopener noreferrer"},U={href:"https://lit.dev/docs/components/overview/",target:"_blank",rel:"noopener noreferrer"},I=n("h2",{id:"推荐阅读",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#推荐阅读","aria-hidden":"true"},"#"),s(" 推荐阅读")],-1),z={href:"https://juejin.cn/post/7101457212085633054",target:"_blank",rel:"noopener noreferrer"},V={href:"https://juejin.cn/post/7098854314365419533",target:"_blank",rel:"noopener noreferrer"},$=n("p",null,'[如何基于 WebComponents 封装 UI 组件库](https://juejin.cn/post/7096265630466670606 "# 如何基于 WebComponents 封装 UI 组件库")',-1),q={href:"https://juejin.cn/post/7091068088975622175",target:"_blank",rel:"noopener noreferrer"},B={href:"https://juejin.cn/post/7085873582588297224",target:"_blank",rel:"noopener noreferrer"},H=n("h2",{id:"开源作品",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#开源作品","aria-hidden":"true"},"#"),s(" 开源作品")],-1),R=n("ul",null,[n("li",null,"政采云前端小报")],-1),A={href:"https://www.zoo.team/openweekly/",target:"_blank",rel:"noopener noreferrer"},F=n("ul",null,[n("li",null,"商品选择 sku 插件")],-1),P={href:"https://github.com/zcy-inc/skuPathFinder-back",target:"_blank",rel:"noopener noreferrer"},N=n("h2",{id:"招贤纳士",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#招贤纳士","aria-hidden":"true"},"#"),s(" 招贤纳士")],-1),K=n("p",null,"政采云前端团队（ZooTeam），一个年轻富有激情和创造力的前端团队，隶属于政采云产品研发部，Base 在风景如画的杭州。团队现有 60 余个前端小伙伴，平均年龄 27 岁，近 4 成是全栈工程师，妥妥的青年风暴团。成员构成既有来自于阿里、网易的“老”兵，也有浙大、中科大、杭电等校的应届新人。团队在日常的业务对接之外，还在物料体系、工程平台、搭建平台、性能体验、云端应用、数据分析及可视化等方向进行技术探索和实战，推动并落地了一系列的内部技术产品，持续探索前端技术体系的新边界。",-1),Q=n("p",null,[s("如果你想改变一直被事折腾，希望开始能折腾事；如果你想改变一直被告诫需要多些想法，却无从破局；如果你想改变你有能力去做成那个结果，却不需要你；如果你想改变你想做成的事需要一个团队去支撑，但没你带人的位置；如果你想改变既定的节奏，将会是“5 年工作时间 3 年工作经验”；如果你想改变本来悟性不错，但总是有那一层窗户纸的模糊… 如果你相信相信的力量，相信平凡人能成就非凡事，相信能遇到更好的自己。如果你希望参与到随着业务腾飞的过程，亲手推动一个有着深入的业务理解、完善的技术体系、技术创造价值、影响力外溢的前端团队的成长历程，我觉得我们该聊聊。任何时间，等着你写点什么，发给 "),n("code",null,"ZooTeam@cai-inc.com")],-1),G=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/98d3aa3d1f8646a8bcda8cfd9e335a4b~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1);function J(Y,Z){const a=i("ExternalLinkIcon");return e(),o("div",null,[u,r,n("p",null,[s("> 这是第 145 篇不掺水的原创，想获取更多原创好文，请搜索公众号关注我们吧~ 本文首发于政采云前端博客："),n("a",d,[s("Web Components-LitElement实践"),t(a)])]),k,m,v,b,h,g,n("p",null,[s("通过阅读上篇文章"),n("a",y,[s("如何基于 Web Components 封装 UI 组件库"),t(a)]),s("，我们掌握了原生 Web Components 的一些内容，包括：")]),f,n("p",null,[s("以上就是关于 LitElement 介绍的主要内容，更多内容可以前往官网学习了解，文中案例地址可以"),n("a",w,[s("在此获得"),t(a)]),s("，同时推荐安装 "),n("a",_,[s("lit-plugin"),t(a)]),s(" VS Code 插件来更好的预览和改动代码。")]),L,j,x,C,n("ul",null,[n("li",null,[n("a",E,[s("shoelace"),t(a)])]),n("li",null,[n("a",M,[s("Wired Elements"),t(a)])]),n("li",null,[n("a",W,[s("UI5 Web Components"),t(a)])]),n("li",null,[n("a",D,[s("Kor"),t(a)])])]),S,n("ul",null,[n("li",null,[n("a",O,[s("WebComponents | MDN"),t(a)])]),n("li",null,[n("a",T,[s("webcomponents/polyfills | Github"),t(a)])]),n("li",null,[n("a",U,[s("LitElement | 官方文档"),t(a)])])]),I,n("p",null,[n("a",z,[s("模块联邦浅析"),t(a)])]),n("p",null,[n("a",V,[s("性能优化——图片压缩、加载和格式选择"),t(a)])]),$,n("p",null,[n("a",q,[s("Web Worker"),t(a)])]),n("p",null,[n("a",B,[s("如何落地一个智能机器人"),t(a)])]),H,R,n("p",null,[n("strong",null,[s("开源地址 "),n("a",A,[s("www.zoo.team/openweekly/"),t(a)])]),s(" (小报官网首页有微信交流群)")]),F,n("p",null,[n("strong",null,[s("开源地址 "),n("a",P,[s("https://github.com/zcy-inc/skuPathFinder-back/"),t(a)])])]),N,K,Q,G])}const nn=p(c,[["render",J],["__file","Web Components-LitElement实践.html.vue"]]);export{nn as default};
