import{_ as e,z as o,A as c,Y as n,C as s,U as p,a6 as t,Q as l}from"./framework-cb9358d9.js";const i={},u=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d4eb6a01e6564840817b127265b07edd~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1),r=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a5683af50e01462c88e480d2b0451d47~tplv-k3u1fbpfcp-watermark.image",alt:"1629709383643_毅轩.png"})],-1),k={href:"https://zoo.team/article/vscode-wechat",target:"_blank",rel:"noopener noreferrer"},d=n("h2",{id:"前言",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),s(" 前言")],-1),m=n("p",null,"开发当中我们会经常碰到很多觉得麻烦的事情，一些流程又臭又长，像老太太裹脚布一样的步骤。比如我们亲爱的小程序，那流程那步骤让我的 Mac 13 寸丐中丐版很是蛋疼。每次都得打开 N 多东西才能发布到预览。蓝瘦，真是个磨人的小妖精。",-1),v=n("h2",{id:"分析和拆解",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#分析和拆解","aria-hidden":"true"},"#"),s(" 分析和拆解")],-1),b={href:"https://code.visualstudio.com/api",target:"_blank",rel:"noopener noreferrer"},h=t('<p>由于我们使用的是 uni-app 作为多端统一的方向，所以在每次开发或者提测小程序需要发到预览版上的时候都需要经历如下步骤：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/982554bcf52d40018a9c612a9123d117~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>ok，既然都已经大致理清楚流程了，那么拥有程序员严谨态度的我们，分析分析整个过程中需要用到的哪些能力？接下来我们只对每个环节关键的部分做一些分析和拆解，不做全盘 Vscode 插件代码的结构和代码分析。</p><ol><li>前置工作 <ul><li>选择构建分支，版本并填写描述 <ul><li>Vscode 插件 window 能力 - 输入描述，下拉框选择</li><li>Git 能力 - 拉取分支</li></ul></li><li>临时保存当前分支修改 <ul><li>Git 能力 - 保存当前分支</li></ul></li><li>切换到目标分支 <ul><li>Git 能力- 切换分支</li></ul></li></ul></li><li>本地构建 <ul><li>自动生成版本号 <ul><li>微信开发平台 api 能力- 获取当前 AppID 最近模板列表</li></ul></li><li>注入目标小程序 AppID <ul><li>Shell 调用能力- 修改文件内容注入 AppID</li></ul></li><li>运行 uni-app 构建命令 <ul><li>Shell 调用能力 - 执行构建命令</li></ul></li><li>撤销发布临时修改文件 <ul><li>Git 调用能力- 使用 Git 来撤销修改文件</li></ul></li></ul></li><li>部署小程序 <ul><li>上传云端草稿箱 <ul><li>微信开发工具调用能力</li></ul></li><li>移动到模板库 <ul><li>微信开发平台 api 能力</li></ul></li><li>部署预览版 <ul><li>Dubbo 能力 - 由于后端已经存在微信开发平台 accessToken 能力，直接调用获取</li></ul></li></ul></li></ol><p>Vscode 插件的 window 能力是默认就带的不需要实现，所以就 Shell 调用，Git 调用，Dubbo调用，微信开发平台 api 调用，微信开发工具调用需要实现。</p><p>再归归类，其实 Git 调用，和微信开发工具调用都是命令行调用也就是 Shell 调用，微信开发平台 api 调用其实本质就是 http 请求，但是里面最最重要的 accessKey 呢是直接调用政采云后端 Dubbo 接口获取，所以才需要 Dubbo。下面看看大致怎么去做呢？</p><h4 id="shell-的调用" tabindex="-1"><a class="header-anchor" href="#shell-的调用" aria-hidden="true">#</a> Shell 的调用</h4>',7),g=n("code",null,"child_process",-1),y={href:"https://nodejs.org/api/child_process.html",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"child_process",-1),f=t(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// shell.ts 部分核心代码</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> execFile<span class="token punctuation">,</span> ExecFileOptions <span class="token punctuation">}</span> from <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>child_process<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">namespace</span> Shell <span class="token punctuation">{</span>
  <span class="token comment">// 在 shell 中直接调用 git 的执行文件执行原始命令</span>
  <span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> exec<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>TOut <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span> <span class="token operator">|</span> Buffer<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">(</span>
    args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    options<span class="token operator">:</span> ExecFileOptions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>TOut<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> stdin<span class="token punctuation">,</span> stdinEncoding<span class="token punctuation">,</span> execFileNameOrPath<span class="token punctuation">,</span> <span class="token operator">...</span>opts <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
      maxBuffer<span class="token operator">:</span> <span class="token number">100</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span>
      <span class="token operator">...</span>options<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>TOut<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>execFileNameOrPath<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>error<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> proc <span class="token operator">=</span> <span class="token function">execFile</span><span class="token punctuation">(</span>
          execFileNameOrPath<span class="token punctuation">,</span>
          args<span class="token punctuation">,</span>
          opts<span class="token punctuation">,</span>
          <span class="token punctuation">(</span>error<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> stdout<span class="token punctuation">,</span> stderr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>error <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token function">resolve</span><span class="token punctuation">(</span>
              stdout <span class="token keyword">as</span> TOut
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>stdin <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          proc<span class="token punctuation">.</span>stdin<span class="token operator">?.</span><span class="token function">end</span><span class="token punctuation">(</span>stdin<span class="token punctuation">,</span> stdinEncoding <span class="token operator">??</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>utf8<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后就可以通过 Shell.exec 方法传入参数就能直接调用了</p><h4 id="git-的调用" tabindex="-1"><a class="header-anchor" href="#git-的调用" aria-hidden="true">#</a> Git 的调用</h4><p>有了上一个 Shell 作为基础我们就可以开干 Git 的调用了，在 Shell 中第一个参数是命令的执行文件，所以我们需要得到当前的 Git 的执行文件的地址作为第一个参数，后面其实就是正常的 Git 命令的拼接就够了。那么怎么知道当前 Git 的执行文件路径呢？</p><p>通过 Vscode 插件中集成的 Git 能力去得到 <code>extensions.getExtension(&amp;quot;vscode.git&amp;quot;)</code>，如下方式</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 获取 Vscode 内置的 Git Api</span>
  <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token function">getBuiltInGitApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>BuiltInGitApi <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> extension <span class="token operator">=</span> extensions<span class="token punctuation">.</span><span class="token function">getExtension</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>vscode<span class="token punctuation">.</span>git<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> Extension<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>
        GitExtension
      <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>extension <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> gitExtension <span class="token operator">=</span> extension<span class="token punctuation">.</span>isActive
          <span class="token operator">?</span> extension<span class="token punctuation">.</span>exports
          <span class="token operator">:</span> <span class="token keyword">await</span> extension<span class="token punctuation">.</span><span class="token function">activate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> gitExtension<span class="token punctuation">.</span><span class="token function">getAPI</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在返回的对象中 <code>gitApi.git.path </code> 就是 Git 的执行文件路径。为了更加方便的调用，我们也封装了一个 git.ts 作为 Git 最最核心最最基础的调用</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">//git.ts 的部分核心代码</span>
<span class="token keyword">export</span> <span class="token keyword">namespace</span> Git <span class="token punctuation">{</span>
  <span class="token keyword">export</span> <span class="token keyword">namespace</span> Core <span class="token punctuation">{</span>
    <span class="token comment">// 在 shell 中直接调用  git 的执行文件执行原始命令</span>
    <span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> exec<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>TOut <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span> <span class="token operator">|</span> Buffer<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">(</span>
      args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      options<span class="token operator">:</span> GitExecOptions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>TOut<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>

      options<span class="token punctuation">.</span>execFileNameOrPath <span class="token operator">=</span> gitInfo<span class="token punctuation">.</span>execPath <span class="token operator">||</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">;</span>

      args<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">-</span>c<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>core<span class="token punctuation">.</span>quotepath<span class="token operator">=</span><span class="token boolean">false</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">-</span>c<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>color<span class="token punctuation">.</span>ui<span class="token operator">=</span><span class="token boolean">false</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>platform <span class="token operator">===</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>win32<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        args<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">-</span>c<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>core<span class="token punctuation">.</span>longpaths<span class="token operator">=</span><span class="token boolean">true</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> Shell<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在外部我们直接用 Git.Core.exec 方法直接执行对应的 Git 命令</p><h4 id="微信开发工具调用" tabindex="-1"><a class="header-anchor" href="#微信开发工具调用" aria-hidden="true">#</a> 微信开发工具调用</h4><p>首选我们要先<strong>检查开发者工具设置：需要在开发者工具的设置 -&gt; 安全设置中开启服务端口</strong>。这样我们才能直接唤起开发者然后做些我们要做的事情。</p>`,11),x={href:"https://developers.weixin.qq.com/miniprogram/dev/devtools/cli.html",target:"_blank",rel:"noopener noreferrer"},_=t(`<p>macOS: <code>&amp;lt;安装路径&amp;gt;/Contents/MacOS/cli</code></p><p>windows: <code>&amp;lt;安装路径&amp;gt;/cli.bat</code></p><p>正常来说 Mac 地址 <strong>/Applications/wechatwebdevtools.app/Contents/MacOS/cli</strong></p><p>最后通过我们以前提供的 Shell 命令能力去执行就搞定了。是不是很简单。我们也封装了miniProgram.ts 来做这个事情</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">//miniProgram.ts 核心代码</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ExecFileOptions <span class="token punctuation">}</span> from <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>child_process<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> vscode from <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>vscode<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Shell <span class="token punctuation">}</span> from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>shell<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>

<span class="token keyword">interface</span> <span class="token class-name">MiniProgramExecOptions</span> <span class="token keyword">extends</span> <span class="token class-name">ExecFileOptions</span> <span class="token punctuation">{</span>
  branchName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  execFileNameOrPath<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  projectPath<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  userVersion<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  userDesc<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">namespace</span> MiniProgram <span class="token punctuation">{</span>
  <span class="token keyword">export</span> <span class="token keyword">namespace</span> Core <span class="token punctuation">{</span>
    <span class="token comment">// 在 shell 中直接调用 git 的执行文件执行原始命令</span>
    <span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> exec<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>TOut <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span> <span class="token operator">|</span> Buffer<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">(</span>
      args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      options<span class="token operator">:</span> MiniProgramExecOptions
    <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>TOut<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
      vscode<span class="token punctuation">;</span>
      options<span class="token punctuation">.</span>execFileNameOrPath <span class="token operator">=</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">/</span>Applications<span class="token operator">/</span>wechatwebdevtools<span class="token punctuation">.</span>app<span class="token operator">/</span>Contents<span class="token operator">/</span>MacOS<span class="token operator">/</span>cli<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> Shell<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="duddo-的调用" tabindex="-1"><a class="header-anchor" href="#duddo-的调用" aria-hidden="true">#</a> Duddo 的调用</h4><p>不明觉厉，都直接调 Dubbo 了吊的不行，其实很简单，有一个 nodeJs 的库 <code>node-zookeeper-dubbo</code> 再配合 <code>js-to-java</code> 这两个库就能搞定，只不过一些配置比较麻烦，我就把代码大致的贴出来</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> nzd <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>node<span class="token operator">-</span>zookeeper<span class="token operator">-</span>dubbo<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> j2j <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>js<span class="token operator">-</span>to<span class="token operator">-</span>java<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">DubboInstance</span> <span class="token punctuation">{</span>
  mp<span class="token operator">:</span> <span class="token punctuation">{</span>
    getComponentToken<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">DubboService</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> _dubbo<span class="token operator">:</span> DubboInstance<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">get</span> <span class="token function">dubbo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> DubboInstance <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_dubbo<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>
      application<span class="token operator">:</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>你的项目名称<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token comment">//项目名称</span>
      register<span class="token operator">:</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>你的服务器地址<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token comment">// zookeeper 服务器地址，多个服务器之间使用逗号分割  </span>
      dubboVer<span class="token operator">:</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>你的版本<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token comment">//dubbo 的版本，询问后端得知是2.3.5</span>
      root<span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>你的根节点<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token comment">//注册到 zookeeper 上的根节点名称</span>
      dependencies<span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token comment">//依赖的 dubbo 服务集,也就是你要调用的服务的配置集合</span>
        mp<span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token comment">//服务的标识，自定义的，按自己喜好</span>
          <span class="token keyword">interface</span><span class="token operator">:</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>你的后端 dubbo 服务地址<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token comment">//后端 dubbo 服务地址</span>
          version<span class="token operator">:</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>你的服务版本号<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token comment">//服务版本号</span>
          timeout<span class="token operator">:</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token number">30000</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token comment">//超时时间</span>
          group<span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>你的分组<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token comment">//分组的功能也没有使用</span>
          methodSignature<span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token comment">//服务里暴露的方法的签名，可以省略</span>
            getComponentToken<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      java<span class="token operator">:</span> j2j<span class="token punctuation">,</span> <span class="token comment">//使用 js-to-java 库来简化传递给 java  后端的值的写法</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_dubbo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">nzd</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此一些基本能力已经封装的差不多了</p><p>Shell：Shell.exec 方法</p><p>Git：Git.Core.exec 方法</p><p>微信开发工具： MiniProgram.Core.exec 方法</p><p>Dubbo: DobboService.dubbo.mp 方法</p><h2 id="搞起" tabindex="-1"><a class="header-anchor" href="#搞起" aria-hidden="true">#</a> 搞起</h2><h3 id="前置工作" tabindex="-1"><a class="header-anchor" href="#前置工作" aria-hidden="true">#</a> 前置工作</h3><p>因为我们要构建一个预发版，所以很有可能我们需要构建的分支不是我们当前工作的分支，所以这步骤的话更多的是要做好一些构建前的一些准备工作，总不能因为人家测试要一个预览测试版然后一不小心把我们自己本地的辛辛苦苦开发的东西弄没了吧，那真的是 f**k 了。</p><p>根据流程我们先来分解下大致的技术动作</p><ul><li>临时保存当前分支修改 <ul><li>获取当前分支。</li><li>如果是在当前分支啥都不管，否则 stash 下</li></ul></li><li>切换到需要发布分支 <ul><li>切换下分支</li></ul></li></ul><p>再精简下： 获取<strong>当前分支</strong> ---&gt; <strong>保存修改</strong> --&gt; <strong>切换分支</strong>。 都是 Git 的一些动作。那么在 nodeJs 中怎么开始自己的 Git 表演呢？一个关键点：Shell 脚本和命令的调用，所以这里的本质是调用 Shell。我们在上个章节中已经实现的 Shell 和 Git 的基本能力了，我们直接调用就行了。</p><h4 id="使用-symbolic-ref-获取当前分支" tabindex="-1"><a class="header-anchor" href="#使用-symbolic-ref-获取当前分支" aria-hidden="true">#</a> 使用 symbolic-ref 获取当前分支</h4><p>其实 Git 的命令分为两种</p><ul><li>高层命令（porcelain commands）</li><li>底层命令（plumbing commands）</li></ul>`,22),q={href:"https://git-scm.com/book/en/v2/Git-Internals-Plumbing-and-Porcelain",target:"_blank",rel:"noopener noreferrer"},E=t(`<p>symbolic-ref 命令能干嘛呢？</p><p>给定一个参数，读取哪个分支头部给定的符号 ref 引用并输出其相对于 <code>.git/</code> 目录的路径。通常，<code>HEAD </code> 以 &lt;name&gt; 参数的形式提供您的工作树所在的分支。</p><p>有了上面 git.ts 支持基本能力那么现在我们就很简单多了，<code>Git.Core.exec&amp;lt;string&amp;gt;([&amp;quot;symbolic-ref&amp;quot;, &amp;quot;--short&amp;quot;, &amp;quot;HEAD&amp;quot;], options);</code></p><p>在 git.ts 中增加基本命令方法</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// git.ts 部分代码</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">symbolicRef</span><span class="token punctuation">(</span>options<span class="token operator">:</span> GitExecOptions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">return</span> Core<span class="token punctuation">.</span>exec<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token builtin">string</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>symbolic<span class="token operator">-</span>ref<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">--</span>short<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token constant">HEAD</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 gitService 中实现 getCurrentBranch 方法</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// gitService.ts 部分代码</span>
<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token function">getCurrentBranch</span><span class="token punctuation">(</span>filePath<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token builtin">string</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> branchName <span class="token operator">=</span> <span class="token keyword">await</span> Git<span class="token punctuation">.</span>Cmd<span class="token punctuation">.</span><span class="token function">symbolicRef</span><span class="token punctuation">(</span><span class="token punctuation">{</span> cwd<span class="token operator">:</span> filePath <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> branchName<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\n</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="保存修改和切换分支" tabindex="-1"><a class="header-anchor" href="#保存修改和切换分支" aria-hidden="true">#</a> 保存修改和切换分支</h4><p>当我们获取到当前分支之后，和我们目标分支进行比对如果一致的话直接跳过该步骤，否则就需要对当前分支保存并且切换了。</p><p>为了方便对于保存和切换我们直接用了Git 的 stash 和 checkout 命令，并且封装了两个方法。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// git.ts 部分代码</span>
		<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">checkout</span><span class="token punctuation">(</span>options<span class="token operator">:</span> GitExecOptions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>checkout<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>
      <span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>branchName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        params<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>branchName<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>fileName<span class="token punctuation">)</span><span class="token punctuation">{</span>
        params<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token operator">--</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span>options<span class="token punctuation">.</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> Core<span class="token punctuation">.</span>exec<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token builtin">string</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">stash</span><span class="token punctuation">(</span>options<span class="token operator">:</span> GitExecOptions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>stash<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>
      <span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>stashPop<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        params<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>pop<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> Core<span class="token punctuation">.</span>exec<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token builtin">string</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="本地构建" tabindex="-1"><a class="header-anchor" href="#本地构建" aria-hidden="true">#</a> 本地构建</h3><p>继续分析下本地构建的基本流程</p><p>大致分以下几步</p><ul><li>自动生成版本号 <ul><li>得到当前 AppID 在微信模板库中版本号情况</li></ul></li><li>注入需要发布的小程序 AppID <ul><li>需要修改 src/manifest.json 文件中 AppID，方便开发工具上传使用</li></ul></li><li>运行 uni-app 构建命令 <ul><li>run uniapp 命令</li></ul></li><li>撤销发布时候的临时文件修改 <ul><li>撤销文件修改</li></ul></li></ul><p>能力上来说有那么几个</p><ol><li>微信 api 调用</li><li>文件读取和修改能力</li><li>Shell 命令执行能力</li><li>撤销文件修改能力</li></ol><p>首先怎么调用微信的 api，由于那时候我们亲爱的后端同学啃次啃次的已经吧微信 token 鉴权的能力已经做掉了，所以我们直接接后端的微信鉴权能力就可以了。但是怎么接又是个问题，虽然人家已经有个 restful 接口可以用，但是接口都要登录的啊，让人家为了我这个小小的需求弄个匿名的不大现实也不安全，想来想去那就不要用 restful 了，直接调他后面提供的 Dobbo 服务好了，完美。</p><h4 id="获取微信-accesstoken" tabindex="-1"><a class="header-anchor" href="#获取微信-accesstoken" aria-hidden="true">#</a> 获取微信 accessToken</h4><p>在获取微信 api 调用前我们需要先得到 accessToken。</p><p>所以我们会先用一个公共方法先去获取当前 accessToken， 然后在去请求微信开发平台 api。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// miniProgramService.ts 部分代码  </span>
  <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token function">retrieveWxToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token builtin">string</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Launcher<span class="token punctuation">.</span>dobboService<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>mp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>dubbo初始化错误<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span>
      success<span class="token operator">:</span> dobboSuccess<span class="token punctuation">,</span>
      error<span class="token punctuation">,</span>
      result<span class="token operator">:</span> wxToken<span class="token punctuation">,</span>
    <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> Launcher<span class="token punctuation">.</span>dobboService<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>mp<span class="token punctuation">.</span><span class="token function">getComponentToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dobboSuccess<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">dubbo调用失败:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>error<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>wxToken<span class="token operator">:</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> wxToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> wxToken<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22),S={href:"https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/access-token/auth.getAccessToken.html",target:"_blank",rel:"noopener noreferrer"},P=t(`<h4 id="微信开放平台-api-调用" tabindex="-1"><a class="header-anchor" href="#微信开放平台-api-调用" aria-hidden="true">#</a> 微信开放平台 api 调用</h4><p>其实微信开放平台 api 调用就是正常的 http 调用即可。</p><p>微信提供了一系列方法，对于我们这次的场景来说有如下接口</p><ul><li><p>getTemplateList 获取模板列表</p><ul><li><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>POST https://api.weixin.qq.com/wxa/gettemplatelist?access_token==ACCESS_TOKEN
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p>addtotemplate 移动草稿到模板库</p><ul><li><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>POST https://api.weixin.qq.com/wxa/gettemplatelist?access_token=ACCESS_TOKEN
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p>deleteTemplate 删除指定模板</p><ul><li><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>POST https://api.weixin.qq.com/wxa/deletetemplate?access_token=ACCESS_TOKEN
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p>getTemplateDraftList 获取草稿箱列表</p><ul><li><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>https://api.weixin.qq.com/wxa/gettemplatedraftlist?access_token=ACCESS_TOKEN
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li></ul>`,4),O={href:"https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/template-message/templateMessage.addTemplate.html",target:"_blank",rel:"noopener noreferrer"},G=t(`<p>版本号的自动生成主要是通过在你点击发布时候通过让用户选择发布的版本为“大版本”，“功能迭代”还是“补丁修复”，在结合这里提到的获取当前模板列表并用 AppID 找到当前最近的版本号再做自动计算累加的方式得到这次发布的版本号。</p><h4 id="构建小程序" tabindex="-1"><a class="header-anchor" href="#构建小程序" aria-hidden="true">#</a> 构建小程序</h4><p>构建小程序这边就直接沿用 uni-app 的能力直接做构建。封装了如下方法去构建小程序</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">//miniProgramService.ts 部分代码</span>
<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token function">buildMPForLocal</span><span class="token punctuation">(</span>env<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token builtin">string</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> buildEnv<span class="token punctuation">;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>env<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token constant">PROD</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">:</span>
        buildEnv <span class="token operator">=</span> EnvEnum<span class="token punctuation">.</span>prod<span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token constant">STAGING</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">:</span>
        buildEnv <span class="token operator">=</span> EnvEnum<span class="token punctuation">.</span>staging<span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token constant">TEST</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">:</span>
        buildEnv <span class="token operator">=</span> EnvEnum<span class="token punctuation">.</span>test<span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">default</span><span class="token operator">:</span>
        buildEnv <span class="token operator">=</span> EnvEnum<span class="token punctuation">.</span>dev<span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">./node_modules/.bin/cross-env NODE_ENV=production DEPLOY_ENV=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>buildEnv<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> UNI_PLATFORM=mp-weixin ./node_modules/.bin/vue-cli-service uni-build</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//正常需要这样传入 shell 参数才行</span>
    <span class="token comment">//[</span>
    <span class="token comment">// &amp;#39;NODE_ENV=production&amp;#39;,</span>
    <span class="token comment">// &amp;#39;DEPLOY_ENV=staging&amp;#39;,</span>
    <span class="token comment">// &amp;#39;UNI_PLATFORM=mp-weixin&amp;#39;,</span>
    <span class="token comment">// &amp;#39;./node_modules/.bin/vue-cli-service&amp;#39;,</span>
    <span class="token comment">// &amp;#39;uni-build&amp;#39;</span>
    <span class="token comment">//]</span>

    <span class="token keyword">const</span> options<span class="token operator">:</span> MPExecOptions <span class="token operator">=</span> <span class="token punctuation">{</span>
      execFileNameOrPath<span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>node<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
      cwd<span class="token operator">:</span> <span class="token function">getWorkspacePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> Shell<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>&gt; 其余的功能 &gt; &gt; - 剩余文件读取就正常使用 fs 库的 readFileSync 方法去读取和修改 &gt; - 撤销修改文件则是通过调用 Git 的 checkout 命令的能力去做，也是要使用上一章节的 Git 的基本能力调用</p><h3 id="部署小程序" tabindex="-1"><a class="header-anchor" href="#部署小程序" aria-hidden="true">#</a> 部署小程序</h3><p>我们 build 完成了，怎么上传呢？微信小程序这块还是需要借助微信开发工具的能力来上传</p><h4 id="微信开发工具上传" tabindex="-1"><a class="header-anchor" href="#微信开发工具上传" aria-hidden="true">#</a> 微信开发工具上传</h4><p>首选我们要先<strong>检查开发者工具设置：需要在开发者工具的设置 -&gt; 安全设置中开启服务端口</strong>。这样我们才能直接唤起开发者然后做些我们要做的事情。</p><p>再者我们需要知道微信开发者工具的执行文件地址。正常来说 Mac 地址</p><p>&gt; <strong>/Applications/wechatwebdevtools.app/Contents/MacOS/cli</strong></p><p>最后通过我们以前提供的 Shell 命令能力去执行就搞定了。是不是很简单。我们也封装了miniProgram.ts 来做这个事情</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// miniProgram.ts 核心代码</span>
<span class="token keyword">export</span> <span class="token keyword">namespace</span> Cmd <span class="token punctuation">{</span>
    <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">uploadMP</span><span class="token punctuation">(</span>options<span class="token operator">:</span> MiniProgramExecOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>upload<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
        <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token operator">--</span>project<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
        options<span class="token punctuation">.</span>projectPath<span class="token punctuation">,</span>
        <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token operator">-</span>v<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
        options<span class="token punctuation">.</span>userVersion<span class="token punctuation">,</span>
        <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token operator">-</span>d<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
        options<span class="token punctuation">.</span>userDesc<span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> Core<span class="token punctuation">.</span>exec<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token builtin">string</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>&gt; 其余的功能 &gt; &gt; - 移动到模板库和部署预览版直接调用微信开放平台 api 即可</p><p><strong>效果预览图：</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8ec1b2d1a55d4c1eb76da15def0bc044~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><h2 id="尾声" tabindex="-1"><a class="header-anchor" href="#尾声" aria-hidden="true">#</a> 尾声</h2><p>至此整个小程序部署的在 Vscode 插件中实现的几个关键的技术点已经逐一做了简要的说明，大家会不会觉得其实看下来不难，就是涉及的东西会比较多。其实还有其他的诸如整个构建流程步骤如何可视化，Vscode 插件里面的一些基础的能力等等在本文都没有详细提及。欢迎大家留言或者提问把自己想要知道的问题反馈给我们，也方便我们可以针对大家的问题再去做一篇更棒的关于 Vscode 插件开发的文章。</p><p>其实 Vscode 插件在整个开发提效场景中只是当中的一个环节，我们会以敦煌工作台为核心底座搭配 Chrome 插件，Vscode 插件，zoo-cli 形成一个开发提效的百宝箱。Vscode 插件更多的是想给开发者们带来<strong>沉浸式开发</strong>的体验。</p><p>最后送上我自己的座右铭- <strong>“懒”是人类进步的阶梯</strong>。为了更“懒”，我们不断的前进和探索。</p><h2 id="推荐阅读" tabindex="-1"><a class="header-anchor" href="#推荐阅读" aria-hidden="true">#</a> 推荐阅读</h2>`,21),T={href:"https://juejin.cn/post/6997536906967777316",target:"_blank",rel:"noopener noreferrer"},j={href:"https://juejin.cn/post/6984547134062198791",target:"_blank",rel:"noopener noreferrer"},C={href:"https://juejin.cn/post/6987140782595506189",target:"_blank",rel:"noopener noreferrer"},D={href:"https://juejin.cn/post/6961201207964598286",target:"_blank",rel:"noopener noreferrer"},N=n("h2",{id:"开源作品",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#开源作品","aria-hidden":"true"},"#"),s(" 开源作品")],-1),A=n("ul",null,[n("li",null,"政采云前端小报")],-1),V={href:"https://www.zoo.team/openweekly/",target:"_blank",rel:"noopener noreferrer"},I=n("h2",{id:"招贤纳士",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#招贤纳士","aria-hidden":"true"},"#"),s(" 招贤纳士")],-1),F=n("p",null,"政采云前端团队（ZooTeam），一个年轻富有激情和创造力的前端团队，隶属于政采云产品研发部，Base 在风景如画的杭州。团队现有 50 余个前端小伙伴，平均年龄 27 岁，近 3 成是全栈工程师，妥妥的青年风暴团。成员构成既有来自于阿里、网易的“老”兵，也有浙大、中科大、杭电等校的应届新人。团队在日常的业务对接之外，还在物料体系、工程平台、搭建平台、性能体验、云端应用、数据分析及可视化等方向进行技术探索和实战，推动并落地了一系列的内部技术产品，持续探索前端技术体系的新边界。",-1),M=n("p",null,[s("如果你想改变一直被事折腾，希望开始能折腾事；如果你想改变一直被告诫需要多些想法，却无从破局；如果你想改变你有能力去做成那个结果，却不需要你；如果你想改变你想做成的事需要一个团队去支撑，但没你带人的位置；如果你想改变既定的节奏，将会是“5 年工作时间 3 年工作经验”；如果你想改变本来悟性不错，但总是有那一层窗户纸的模糊… 如果你相信相信的力量，相信平凡人能成就非凡事，相信能遇到更好的自己。如果你希望参与到随着业务腾飞的过程，亲手推动一个有着深入的业务理解、完善的技术体系、技术创造价值、影响力外溢的前端团队的成长历程，我觉得我们该聊聊。任何时间，等着你写点什么，发给 "),n("code",null,"ZooTeam@cai-inc.com")],-1),z=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/98d3aa3d1f8646a8bcda8cfd9e335a4b~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1);function B(L,K){const a=l("ExternalLinkIcon");return o(),c("div",null,[u,r,n("p",null,[s("> 这是第 112 篇不掺水的原创，想获取更多原创好文，请搜索公众号关注我们吧~ 本文首发于政采云前端博客："),n("a",k,[s("百宝箱系列之vscode插件-微信小程序发布"),p(a)])]),d,m,v,n("p",null,[n("strong",null,[s("关于 Vscode 插件开发基础教程"),n("a",b,[s("请移步官方文档"),p(a)]),s("，这里就不过多赘述了，这边我们只把重心放到去实现小程序自动构建发布关键点的实现上。")])]),h,n("p",null,[s("听到 Shell 菊花一紧，不熟悉的人觉得天哪很复杂的样子，其实就是使用 "),g,s(" 去开一个子进程，然后你就快乐的玩耍吧。所以我们在项目中封装了一个 shell.ts 来做所有 Shell 脚本的执行动作。 "),n("a",y,[s("不熟悉"),w,s("的请移步这里"),p(a)])]),f,n("p",null,[s("再者我们需要知道微信开发者工具的执行文件地址。 "),n("a",x,[s("详细请移步文档"),p(a)])]),_,n("p",null,[s("常用的命令大家都很熟悉了，什么 branch 啊， init 啊，add 啊，commit 啊等等。底层命令又是什么鬼，其实所有的高层命令的本质都是会调用底层命令，可以类比为语言层面 Java，C#，Js 这些高级语言他的底层是使用 C 或者 C++ 是一个概念。 "),n("a",q,[s("有兴趣请移步"),p(a)])]),E,n("p",null,[s("> 如果你们的后端没有支持微信开发平台的鉴权能力的话就需要自己用 nodejs 方式去实现了，"),n("a",S,[s("具体的微信开放平台文案请移步"),p(a)])]),P,n("p",null,[n("a",O,[s("具体的微信开放平台文案请移步"),p(a)])]),G,n("p",null,[n("a",T,[s("你需要知道的项目管理知识"),p(a)])]),n("p",null,[n("a",j,[s("最熟悉的陌生人rc-form"),p(a)])]),n("p",null,[n("a",C,[s("如何搭建适合自己团队的构建部署平台"),p(a)])]),n("p",null,[n("a",D,[s("聊聊Deno的那些事"),p(a)])]),N,A,n("p",null,[n("strong",null,[s("开源地址 "),n("a",V,[s("www.zoo.team/openweekly/"),p(a)])]),s(" (小报官网首页有微信交流群)")]),I,F,M,z])}const J=e(i,[["render",B],["__file","百宝箱系列之vscode插件-微信小程序发布.html.vue"]]);export{J as default};
