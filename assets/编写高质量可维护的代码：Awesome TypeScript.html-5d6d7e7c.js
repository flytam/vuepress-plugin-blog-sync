import{_ as t,z as e,A as o,Y as n,C as s,U as p,a6 as c,Q as l}from"./framework-cb9358d9.js";const i={},u=n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e3248b9a4dc94224ba2bf337fa291b67~tplv-k3u1fbpfcp-zoom-1.image",alt:""},null,-1),r={href:"https://zoo.team/article/awesome-typescript",target:"_blank",rel:"noopener noreferrer"},k=c(`<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/51a9da69e08b4564b73b5299e3fbbad8~tplv-k3u1fbpfcp-watermark.image" alt=""></p><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>高质量可维护的代码应具备可读性高、结构清晰、低耦合、易扩展等特点。而原生的 JavaScript 由于其弱类型和没有模块化的缺点，不利于大型应用的开发和维护，因此，TypeScript 也就应运而生。</p><p>TypeScript 是 JavaScript 的一个超集，它的设计初衷并不是为了替代 JavaScript，而是基于 JavaScript 做了一系列的增强，包括增加了静态类型、接口、类、泛型、方法重载等等。所以，只要你有一定的 JavaScript 功底，那么 TypeScript 上手就非常简单。并且，你可以在 TypeScript 中愉快的使用 JavaScript 语法。</p><p>接下去，本文将给大家分享下，TypeScript 的重要特性以及在实际场景中的使用技巧，帮助大家更高效的编写高质量可维护的代码。</p><h2 id="typescript-vs-javascript" tabindex="-1"><a class="header-anchor" href="#typescript-vs-javascript" aria-hidden="true">#</a> Typescript VS Javascript</h2><p><strong>JavaScript</strong></p><ul><li>JavaScript 是动态类型语言，在代码编译阶段不会对变量进行类型检测，从而会把潜在的类型错误带到代码执行阶段。并且在遇到不同类型变量的赋值时，会自动进行类型转换，带来了不确定性，容易产生 bug。</li><li>JavaScript 原生没有命名空间，需要手动创建命名空间，来进行模块化。并且，JavaScript 允许同名函数的重复定义，后面的定义可以覆盖前面的定义。这也给我们开发和维护大型应用带来了不便。</li></ul><p><strong>TypeScript</strong></p><ul><li>TypeScript 是静态类型语言，通过类型注解提供编译时的静态类型检查。 <ul><li>在代码编译阶段会进行变量的类型检测，提前暴露潜在的类型错误问题。并且在代码执行阶段，不允许不同类型变量之间的赋值。</li><li>清晰的类型注解，不仅让代码的可读性更好，同时也增强了 IDE 的能力，包括代码补全、接口提示、跳转到定义等等。</li></ul></li><li>TypeScript 增加了模块类型，自带命名空间，方便了大型应用的模块化开发。</li><li>TypeScript 的设计一种完全面向对象的编程语言，具备模块、接口、类、类型注解等，可以让我们的代码组织结构更清晰。</li></ul><p>经过上述对比，可以看到 TypeScript 的出现很好的弥补了 JavaScript 的部分设计缺陷，给我们带来了很大的便利，也提高了代码的健壮性和扩展性。</p><h2 id="重要特性" tabindex="-1"><a class="header-anchor" href="#重要特性" aria-hidden="true">#</a> 重要特性</h2><h4 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h4><ul><li><p>基础数据类型包括：Boolean、Number、String、Array、Enum、Any、Unknown、Tuple、Void、Null、Undefined、Never。下面选择几个 TypeScript 特有的类型进行详解：</p><ul><li>Enum 枚举：在编码过程中，要避免使用硬编码，如果某个常量是可以被一一列举出来的，那么就建议使用枚举类型来定义，可以让代码更易维护。</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 包括 数字枚举、字符串枚举、异构枚举（数字和字符串的混合）。</span>
<span class="token comment">// 数字枚举在不设置默认值的情况下，默认第一个值为0，其他依次自增长</span>
<span class="token keyword">enum</span> <span class="token constant">STATUS</span> <span class="token punctuation">{</span>
  <span class="token constant">PENDING</span><span class="token punctuation">,</span>
  <span class="token constant">PROCESS</span><span class="token punctuation">,</span>
  <span class="token constant">COMPLETED</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> status<span class="token operator">:</span> <span class="token constant">STATUS</span> <span class="token operator">=</span> <span class="token constant">STATUS</span><span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">;</span>  <span class="token comment">// 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Any 类型：不建议使用。Any 类型为顶层类型，所有类型都可以被视为 any 类型，使用 Any 也就等同于让 TypeScript 的类型校验机制失效。</li><li>Unknown 类型：Unknown 类型也是顶层类型，它可以接收任何类型，但它与 Any 的区别在于，它首次赋值后就确定了数据类型，不允许变量的数据类型进行二次变更。所以，在需要接收所有类型的场景下，优先考虑用 Unknown 代替 Any。 <ul><li>Tuple 元组：支持数组内存储不同数据类型的元素，让我们在组织数据的时候更灵活。</li></ul></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> tupleType<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">boolean</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
tupleType <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>momo<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Void 类型：当函数没有返回值的场景下，通常将函数的返回值类型设置为 void。</li></ul></li></ul><h4 id="类型注解" tabindex="-1"><a class="header-anchor" href="#类型注解" aria-hidden="true">#</a> 类型注解</h4><ul><li>TypeScript 通过类型注解提供编译时的静态类型检查，可以在编译阶段就发现潜在 Bug，同时让编码过程中的提示也更智能。使用方式很简单，在 <code>:</code> 冒号后面注明变量的类型即可。</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> str<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>abc<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="接口" tabindex="-1"><a class="header-anchor" href="#接口" aria-hidden="true">#</a> 接口</h4><ul><li>在面向对象编程的语言里面，接口是实现程序解耦的关键，它只定义具体包含哪些属性和方法，而不涉及任何具体的实现细节。接口是基于类之上，更进一步对实体或行为进行抽象，会让程序具备更好的扩展性。</li><li>应用场景：比如我们在实现订单相关功能的时候，需要对订单进行抽象，定义一个订单的接口，包括订单基本信息以及对订单的相关操作，然后基于这个接口来做进一步的实现。后续如果订单的相关操作功能有变化，只需要重新定义一个类来实现这个接口即可。</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Monkey</span> <span class="token keyword">implements</span> <span class="token class-name">Padder</span> <span class="token punctuation">{</span>
<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>Monkey<span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="类" tabindex="-1"><a class="header-anchor" href="#类" aria-hidden="true">#</a> 类</h4><ul><li>TypeScript 的类除了包括最基本的属性和方法、getter 和 setter、继承等特性，还新增了私有字段。私有字段不能在包含的类之外访问，甚至不能被检测到。Javascript 的类中是没有私有字段的，如果想模拟私有字段的话，必须要用闭包来模拟。下面用一些示例来说明下类的使用：</li><li>属性和方法</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
<span class="token comment">// 静态属性</span>
<span class="token keyword">static</span> name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>momo<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token comment">// 成员属性</span>
gender<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token comment">// 构造函数</span>
<span class="token function">constructor</span><span class="token punctuation">(</span>str<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> str<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 静态方法</span>
<span class="token keyword">static</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 成员方法</span>
<span class="token function">getGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>Gender<span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>gender<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>female<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>getter 和 setter <ul><li>通过 getter 和 setter 方法来实现数据的封装和有效性校验，防止出现异常数据。</li></ul></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
<span class="token keyword">private</span> _name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token keyword">get</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">set</span> <span class="token function">name</span><span class="token punctuation">(</span>newName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> newName<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>momo<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// momo</span>
person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>new_momo<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// new_momo</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>继承</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token function">constructor</span><span class="token punctuation">(</span>nameStr<span class="token operator">=</span><span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> nameStr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>  
<span class="token function">move</span><span class="token punctuation">(</span>distanceInMeters<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> moved </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>distanceInMeters<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">m.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Snake</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
<span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
<span class="token function">move</span><span class="token punctuation">(</span>distanceInMeters <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span>distanceInMeters<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> snake <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Snake</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>snake<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
snake<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：&amp;#39;snake moved 5m&amp;#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>私有字段 <ul><li>私有字段以 <code>#</code> 字符开头。私有字段不能在包含的类之外访问，甚至不能被检测到。</li></ul></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
#name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>#name <span class="token operator">=</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 	<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>#name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>momo<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
person<span class="token punctuation">.</span>#name<span class="token punctuation">;</span>   <span class="token comment">// 访问会报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="泛型" tabindex="-1"><a class="header-anchor" href="#泛型" aria-hidden="true">#</a> 泛型</h4><ul><li><p>应用场景：当我们需要考虑代码的可复用性时，就需要用到泛型。让组件不仅能够支持当前的数据类型，同时也能支持未来的数据类型。泛型允许同一个函数接受不同类型参数，相比于使用 Any 类型，使用泛型来创建的组件可复用和易扩展性要更好，因为泛型会保留参数类型。泛型可以应用于接口、类、变量。下面用一些示例来说明下泛型的使用：</p></li><li><p>泛型接口</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">identityFn</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token constant">T</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
  <span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>泛型类</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">GenericNumber</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token constant">T</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
  zeroValue<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>
  add<span class="token operator">:</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token constant">T</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> myGenericNumber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericNumber</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token builtin">number</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myGenericNumber<span class="token punctuation">.</span>zeroValue <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
myGenericNumber<span class="token punctuation">.</span><span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>泛型变量</p><p>使用大写字母 A-Z 定义的类型变量都属于泛型，常见泛型变量如下：</p><ul><li>T（Type）：表示一个 TypeScript 类型</li><li>K（Key）：表示对象中的键类型</li><li>V（Value）：表示对象中的值类型</li><li>E（Element）：表示元素类型</li></ul></li></ul><h4 id="交叉类型" tabindex="-1"><a class="header-anchor" href="#交叉类型" aria-hidden="true">#</a> 交叉类型</h4><ul><li>交叉类型就是将多个类型合并为一个类型。通过 <code>&amp;amp;</code> 运算符定义。如下示例中，将 Person 类型和 Company 类型合并后，生成了新的类型 Staff，该类型同时具备这两种类型的所有成员。</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
gender<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">Company</span> <span class="token punctuation">{</span>
companyName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">type</span> <span class="token class-name">Staff</span> <span class="token operator">=</span> Person <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> Company<span class="token punctuation">;</span>
<span class="token keyword">const</span> staff<span class="token operator">:</span> Staff <span class="token operator">=</span> <span class="token punctuation">{</span>
name<span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>momo<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
gender<span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>female<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
companyName<span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token constant">ZCY</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="联合类型" tabindex="-1"><a class="header-anchor" href="#联合类型" aria-hidden="true">#</a> 联合类型</h4><ul><li>联合类型就是由具有或关系的多个类型组合而成，只要满足其中一个类型即可。通过 <code>|</code> 运算符定义。如下示例中，函数的入参为 string 或 number 类型即可。</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>param<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>This <span class="token keyword">is</span> the union type<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="类型保护" tabindex="-1"><a class="header-anchor" href="#类型保护" aria-hidden="true">#</a> 类型保护</h4><ul><li><p>类型保护就是在我们已经识别到当前数据是某种数据类型的情况下，安全的调用这个数据类型对应的属性和方法。常用的类型保护包括 <code>in</code> 类型保护、<code>typeof</code> 类型保护、<code>instanceof</code> 类型保护和 <code>自定义</code> 类型保护。具体见以下示例：</p><ul><li><code>in</code> 类型保护</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  gender<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  company<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">type</span> <span class="token class-name">UnknownStaff</span> <span class="token operator">=</span> Person <span class="token operator">|</span> Employee<span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">getInfo</span><span class="token punctuation">(</span>staff<span class="token operator">:</span> UnknownStaff<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>gender<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span> <span class="token keyword">in</span> staff<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>Person info<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>company<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span> <span class="token keyword">in</span> staff<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>Employee info<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>typeof</code> 类型保护</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">processData</span><span class="token punctuation">(</span>param<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">unknown</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> param <span class="token operator">===</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token builtin">string</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  	<span class="token keyword">return</span> param<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> param<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>instanceof</code> 类型保护：和 <code>typeof</code> 类型用法相似，它主要是用来判断是否是一个类的对象或者继承对象的。</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">processData</span><span class="token punctuation">(</span>param<span class="token operator">:</span> Date <span class="token operator">|</span> RegExp<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">unknown</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>param <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  	<span class="token keyword">return</span> param<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> param<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>自定义</code> 类型保护：通过类型谓词 <code>parameterName is Type</code> 来实现自定义类型保护。如下示例，实现了接口的请求参数的类型保护。</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">ReqParams</span> <span class="token punctuation">{</span>
	url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
 	onSuccess<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
 	onError<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 检测 request 对象包含参数符合要求的情况下，才返回 url</span>
<span class="token keyword">function</span> <span class="token function">validReqParams</span><span class="token punctuation">(</span>request<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span><span class="token operator">:</span> request <span class="token keyword">is</span> ReqParams <span class="token punctuation">{</span>
	<span class="token keyword">return</span> request <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> request<span class="token punctuation">.</span>url
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="开发小技巧" tabindex="-1"><a class="header-anchor" href="#开发小技巧" aria-hidden="true">#</a> 开发小技巧</h2><ul><li>需要连续判断某个对象里面是否存在某个深层次的属性，可以使用 <code>?.</code></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">if</span><span class="token punctuation">(</span>result <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> result<span class="token punctuation">.</span>data <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> result<span class="token punctuation">.</span>data<span class="token punctuation">.</span>list<span class="token punctuation">)</span> <span class="token comment">// JS</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token operator">?.</span>data<span class="token operator">?.</span>list<span class="token punctuation">)</span> <span class="token comment">// TS</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>联合判断是否为空值，可以使用 <code>??</code></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> temp <span class="token operator">=</span> <span class="token punctuation">(</span>val <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> val <span class="token operator">!==</span> <span class="token keyword">void</span> <span class="token number">0</span> <span class="token operator">?</span> val <span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// JS</span>
<span class="token keyword">let</span> temp <span class="token operator">=</span> val <span class="token operator">??</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token comment">// TS</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>不要完全依赖于类型检查，必要时还是需要编写兜底的防御性代码。</p><ul><li>因为类型报错不会影响代码生成和执行，所以原则上还是会存在 fn(&#39;str&#39;) 调用的可能性，所以需要 default 进行兜底的防御性代码。</li></ul></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>value<span class="token operator">:</span><span class="token builtin">boolean</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">switch</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>
  	<span class="token keyword">case</span> <span class="token boolean">true</span><span class="token operator">:</span> 
    	<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token boolean">true</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token boolean">false</span><span class="token operator">:</span> 
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token boolean">false</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span> 
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>dead code<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>对于函数，要严格控制返回值的类型.</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 推荐写法</span>
<span class="token keyword">function</span> getLocalStorage<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token constant">T</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> str <span class="token operator">=</span> window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> str <span class="token operator">?</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> data <span class="token operator">=</span> getLocalStorage<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>DataType<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token constant">USER_KEY</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>利用 new() 实现工厂模式</p><ul><li>TypeScript 语法实现工厂模式很简单，只需先定义一个函数，并声明一个构造函数的类型参数，然后在函数体里面返回 c 这个类构造出来的对象即可。以下示例中，工厂函数构造出来的是 T 类型的对象。</li></ul></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> create<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token constant">T</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">(</span>c<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">create</span><span class="token punctuation">(</span>Test<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>优先考虑使用 Unknown 类型而非 Any</p></li><li><p>使用 readonly 标记入参，保证参数不会在函数内被修改</p></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>arr<span class="token operator">:</span><span class="token keyword">readonly</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">let</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>num <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    sum <span class="token operator">+=</span> num<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用 Enum 维护常量表，实现更安全的类型检查</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 使用 const enum 维护常量</span>
<span class="token keyword">const</span> <span class="token keyword">enum</span> <span class="token constant">PROJ_STATUS</span> <span class="token punctuation">{</span>
  <span class="token constant">PENDING</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token constant">PENDING</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
  <span class="token constant">PROCESS</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token constant">PROCESS</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
  <span class="token constant">COMPLETED</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token constant">COMPLETED</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">handleProject</span> <span class="token punctuation">(</span>status<span class="token operator">:</span> <span class="token constant">PROJ_STATUS</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token function">handleProject</span><span class="token punctuation">(</span><span class="token constant">PROJ_STATUS</span><span class="token punctuation">.</span><span class="token constant">COMPLETED</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>建议开启以下编译检查选项，便于在编译环境发现潜在 Bug</li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  &amp;quot;compilerOptions&amp;quot;<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">/* 严格的类型检查选项 */</span>
    &amp;quot;strict&amp;quot;<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                    <span class="token comment">// 启用所有严格类型检查选项</span>
    &amp;quot;noImplicitAny&amp;quot;<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>             <span class="token comment">// 在表达式和声明上有隐含的 any类型时报错</span>
    &amp;quot;strictNullChecks&amp;quot;<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          <span class="token comment">// 启用严格的 null 检查</span>
    &amp;quot;noImplicitThis&amp;quot;<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token comment">// 当 this 表达式值为 any 类型的时候，生成一个错误</span>
    &amp;quot;alwaysStrict&amp;quot;<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>              <span class="token comment">// 以严格模式检查每个模块，并在每个文件里加入 &amp;#39;use strict&amp;#39;</span>
    
    <span class="token comment">/* 额外的检查 */</span>
    &amp;quot;noUnusedLocals&amp;quot;<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token comment">// 有未使用的变量时，抛出错误</span>
    &amp;quot;noUnusedParameters&amp;quot;<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token comment">// 有未使用的参数时，抛出错误</span>
    &amp;quot;noImplicitReturns&amp;quot;<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>         <span class="token comment">// 并不是所有函数里的代码都有返回值时，抛出错误</span>
    &amp;quot;noFallthroughCasesInSwitch&amp;quot;<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">// 报告 switch 语句的 fallthrough 错误。（即，不允许 switch 的 case 语句贯穿）</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关-vscode-插件推荐" tabindex="-1"><a class="header-anchor" href="#相关-vscode-插件推荐" aria-hidden="true">#</a> 相关 VSCode 插件推荐</h2><p>TypeScript Extension Pack，它集合了我们日常常用的 TypeScript 相关插件：</p><ul><li>TSLint：自动检测和修复不符合规范的 TypeScript 代码。</li><li>TypeScript Hero：对 import 引入模块顺序进行排序和组织 ，移除未被使用的。MacOS 上快捷键 <code>Ctrl+Opt+o</code>，Win/Linux 上快捷键 <code>Ctrl+Alt+o</code>。</li><li>json2ts：将剪切板中的 JSON 转化成 TypeScript 接口。MacOS 上快捷键 <code>Ctrl+Opt+V</code>，Win/Linux 上快捷键 <code>Ctrl+Alt+V</code>。</li><li>Move TS：在移动 TypeScript 文件或者包含 TypeScript 文件的文件夹时，会自动更新相关依赖模块的 import 路径。</li><li>Path Intellisense：路径和文件名的自动提示补全功能。</li><li>TypeScript Importer：import 引入模块时，自动搜索当前 workspace 下所有 export 的模块，并自动进行提示补全。</li><li>Prettier - Code formatter：格式化代码。</li></ul><h2 id="推荐阅读" tabindex="-1"><a class="header-anchor" href="#推荐阅读" aria-hidden="true">#</a> 推荐阅读</h2>`,60),d={href:"https://juejin.cn/post/6911681589558640654",target:"_blank",rel:"noopener noreferrer"},m={href:"https://juejin.cn/post/6909239354418266119",target:"_blank",rel:"noopener noreferrer"},v=n("h2",{id:"招贤纳士",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#招贤纳士","aria-hidden":"true"},"#"),s(" 招贤纳士")],-1),b=n("p",null,"政采云前端团队（ZooTeam），一个年轻富有激情和创造力的前端团队，隶属于政采云产品研发部，Base 在风景如画的杭州。团队现有 40 余个前端小伙伴，平均年龄 27 岁，近 3 成是全栈工程师，妥妥的青年风暴团。成员构成既有来自于阿里、网易的“老”兵，也有浙大、中科大、杭电等校的应届新人。团队在日常的业务对接之外，还在物料体系、工程平台、搭建平台、性能体验、云端应用、数据分析及可视化等方向进行技术探索和实战，推动并落地了一系列的内部技术产品，持续探索前端技术体系的新边界。",-1),y=n("p",null,[s("如果你想改变一直被事折腾，希望开始能折腾事；如果你想改变一直被告诫需要多些想法，却无从破局；如果你想改变你有能力去做成那个结果，却不需要你；如果你想改变你想做成的事需要一个团队去支撑，但没你带人的位置；如果你想改变既定的节奏，将会是“5 年工作时间 3 年工作经验”；如果你想改变本来悟性不错，但总是有那一层窗户纸的模糊… 如果你相信相信的力量，相信平凡人能成就非凡事，相信能遇到更好的自己。如果你希望参与到随着业务腾飞的过程，亲手推动一个有着深入的业务理解、完善的技术体系、技术创造价值、影响力外溢的前端团队的成长历程，我觉得我们该聊聊。任何时间，等着你写点什么，发给 "),n("code",null,"ZooTeam@cai-inc.com")],-1),g=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/460ed969d3b04b48b3c51253408294fb~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1);function h(f,w){const a=l("ExternalLinkIcon");return e(),o("div",null,[n("p",null,[u,s(" > 这是第 84 篇不掺水的原创，想获取更多原创好文，请搜索公众号关注我们吧~ 本文首发于政采云前端博客："),n("a",r,[s("编写高质量可维护的代码：Awesome TypeScript"),p(a)])]),k,n("p",null,[n("a",d,[s("前端工程师的自我修养：React Fiber 是如何实现更新过程可控的"),p(a)])]),n("p",null,[n("a",m,[s("V8 引擎垃圾回收与内存分配"),p(a)])]),v,b,y,g])}const T=t(i,[["render",h],["__file","编写高质量可维护的代码：Awesome TypeScript.html.vue"]]);export{T as default};
