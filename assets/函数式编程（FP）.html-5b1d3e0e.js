import{_ as e,z as o,A as c,Y as n,C as s,U as p,a6 as t,Q as l}from"./framework-cb9358d9.js";const i={},u=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d4eb6a01e6564840817b127265b07edd~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1),r=n("p",null,[n("img",{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2c779a7bf84e40639af79d9b75f1e846~tplv-k3u1fbpfcp-watermark.image?",alt:"廿夕.png"})],-1),k={href:"https://zoo.team/article/function-production",target:"_blank",rel:"noopener noreferrer"},d=t(`<h2 id="写在前面" tabindex="-1"><a class="header-anchor" href="#写在前面" aria-hidden="true">#</a> 写在前面</h2><p>可能大家都听过武侠小说中的<code>内功</code>和<code>招式</code>，商业大佬讲的<code>道</code>与<code>术</code>，一些唱歌选秀评委口中的<code>感情</code>和<code>技巧</code>。</p><p>那程序员的江湖里是不是也存在没有感情的<code>API 调用工程师</code>。随着前端生态的迅速发展，目前框架、语法、提案都更新换代的很快。各种各样的招式层出不穷，让人应接不暇，身心俱乏，对于内力的领悟和沉淀已经迫在眉睫，因为不管框架 API 怎么变一些编程的内在思想是不会变的。</p><p>js 为了实现面向对象的思想，做了很多事情，导致大家在学习 js 的时候，会遇到复杂的原型、原型链、继承，还有对人不友好的 <strong>this</strong> ；而当我们用这些东西组合起来模拟面向对象的特性的时候，就更加痛苦了。但我们可以使用一种更友好的方式，函数式编程。</p><h2 id="什么是函数式编程" tabindex="-1"><a class="header-anchor" href="#什么是函数式编程" aria-hidden="true">#</a> 什么是函数式编程</h2><p>函数式编程（functional programing）是编程范式之一。我们常见的范式还有面向过程、面向行为、面向对象等。</p><p>范式：我们可以认为它是一种思维模式加上它的实现方法，简单说就是编程的方法论。</p><ul><li><p><strong>面向过程编程</strong>：简单解释就是按照步骤来实现。</p></li><li><p><strong>面向行为编程</strong>：它是函数式编程的衍生范型，将电脑运算平展为一系列的变化，并且避免使用程序指令以及堆叠的对象。</p></li><li><p><strong>面向对象编程</strong>：它的思维方式是把现实世界中的事物抽象成程序世界中的类和对象，然后通过封装，继承和多态来演示事物之间的联系。</p></li><li><p><strong>面向函数式编程</strong>：它的思维方式是把现实世界中的事物和事物之间的联系，抽象到程序世界中。</p><h4 id="函数式编程特点" tabindex="-1"><a class="header-anchor" href="#函数式编程特点" aria-hidden="true">#</a> 函数式编程特点：</h4></li><li><p>程序的本质：就是利用计算机的计算能力将<strong>输入</strong>转化成对应的<strong>输出</strong>。</p></li><li><p>函数式编程中的<strong>函数</strong>指的不是编程语言里的函数，而是数学意义上的映射关系。比如 y=sin(x) 中 x 和 y 值的映射关系。</p></li><li><p>纯函数：相同的输入获得相同的输出（无副作用）。</p></li><li><p>函数式编程就是对**数据(函数)**映射关系的抽象。 举个例子：</p></li></ul><p>比如我们已知 a，b 两个直角边，求斜边长度。</p><p><code>y = \\sqrt{a^{2}+b^{2}}</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//非函数式 y = (a^2 + b^2)^0.5</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">3</span>；
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> y <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>a<span class="token operator">*</span>a <span class="token operator">+</span> b<span class="token operator">*</span>b<span class="token punctuation">)</span>

<span class="token comment">//函数式 y = f(a, b)</span>
<span class="token keyword">const</span> f <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>a <span class="token operator">*</span> a <span class="token operator">+</span> b <span class="token operator">*</span> b<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> y <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过代码实现，我们可以看出函数式就是对过程变形关系的抽象。抽象的是处理过程，然后我们只需关注输入和输出。接下来我们看一下几种函数式编程应用。</p><h4 id="高阶函数-high-order-function" tabindex="-1"><a class="header-anchor" href="#高阶函数-high-order-function" aria-hidden="true">#</a> 高阶函数 (high-order-function)</h4>`,13),m={href:"https://developer.mozilla.org/zh-CN/docs/Glossary/First-class_Function",target:"_blank",rel:"noopener noreferrer"},v=n("em",null,"First-Class Functions",-1),b=t(`<p>头等函数简单的讲就是<strong>函数也是一个对象，它能赋值给变量，能作为参数返回</strong>。</p><p><strong>而高阶函数就是以函数为参数或返回的函数</strong>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 一个批量处理数组元素的例子</span>
<span class="token keyword">const</span> use <span class="token operator">=</span> <span class="token punctuation">(</span> arr<span class="token punctuation">,</span> fn <span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span> i <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token function">fn</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="闭包-closure" tabindex="-1"><a class="header-anchor" href="#闭包-closure" aria-hidden="true">#</a> 闭包 (closure)</h4><p>&gt; 函数和其周围词法环境的引用捆绑在一起形成闭包。 闭包的概念并不复杂，只是定义比较绕。举一段代码的🌰</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">once</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">let</span> done <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>done<span class="token punctuation">)</span><span class="token punctuation">{</span>
      done <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> logOnce <span class="token operator">=</span> <span class="token function">once</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">)</span>

<span class="token comment">//此时只会执行一次</span>
<span class="token function">logOnce</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token function">logOnce</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>闭包的本质是函数在执行时，会被放到执行栈上去执行，执行结束后被移除，<strong>但是堆上作用域成员由于外部的引用而不能被释放</strong>。因此内部函数依然可以访问外部函数的成员。</p>`,7),g={href:"http://www.ruanyifeng.com/blog/2017/04/memory-leak.html",target:"_blank",rel:"noopener noreferrer"},h=t(`<h4 id="纯函数-pure-function" tabindex="-1"><a class="header-anchor" href="#纯函数-pure-function" aria-hidden="true">#</a> 纯函数 (pure function)</h4><p>&gt; 相同的输入会得到相同的输出，而且没有任何可观测的副作用。 举一个数组中纯函数和不纯函数的 🌰</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> numberArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>
<span class="token comment">//纯函数</span>
numberArr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">//[1,2]</span>
numberArr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">//[1,2]</span>
<span class="token comment">//不纯函数</span>
numberArr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">//[1,2]</span>
numberArr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">//[3,4]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),f={href:"https://lodash.com/docs/4.17.15",target:"_blank",rel:"noopener noreferrer"},y=t(`<p>纯函数的好处：</p><ul><li>对于耗时的操作，可对执行结果<strong>缓存</strong>，提高代码性能。</li><li>方便测试，降低排查问题的难度。</li><li>在多线程环境下（web worker），可对共享内存数据任意执行。</li></ul><h4 id="柯里化-currying" tabindex="-1"><a class="header-anchor" href="#柯里化-currying" aria-hidden="true">#</a> 柯里化 (currying)</h4><p>假设一个场景，我们需要写一个函数来判断一个人的年龄是否大于 18 岁。你可能会直接写：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> lucy <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">17</span><span class="token punctuation">}</span>
<span class="token keyword">const</span> bob <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">checkAge</span><span class="token punctuation">(</span><span class="token parameter">age</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> age <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token number">18</span>
<span class="token punctuation">}</span>

<span class="token function">checkAge</span><span class="token punctuation">(</span>lucy<span class="token punctuation">.</span>age<span class="token punctuation">)</span>
<span class="token function">checkAge</span><span class="token punctuation">(</span>bob<span class="token punctuation">.</span>age<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样没什么问题，但是我们如果要更改基准值的时候判断是否大于<code>20</code>，那可能有需要重新定义一个 checkAge20 的新函数了。如果这个基准一直在变... 有的同学立马就想到了，那我传入基准值就好啦。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> lucy <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">17</span><span class="token punctuation">}</span>
<span class="token keyword">const</span> bob <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">checkAge</span><span class="token punctuation">(</span><span class="token parameter">min<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> age <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> min
<span class="token punctuation">}</span>

<span class="token function">checkAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> lucy<span class="token punctuation">.</span>age<span class="token punctuation">)</span>
<span class="token function">checkAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> bob<span class="token punctuation">.</span>age<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样 checkAge 没什么问题，但是发现我们每次都需要输入重复的基准值。有没有什么办法可以避免重复呢？让我们试试使用闭包和高阶函数：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">checkAge</span><span class="token punctuation">(</span><span class="token parameter">min</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">age</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 函数作为返回</span>
    <span class="token keyword">return</span> age <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> min<span class="token punctuation">;</span> <span class="token comment">// 闭包，引用外部参数</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 若果用es6的语法会更简洁</span>
<span class="token keyword">const</span> checkAge <span class="token operator">=</span> min <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> age <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> age <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> min

<span class="token keyword">const</span> checkAge18 <span class="token operator">=</span> <span class="token function">checkAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span>

<span class="token function">checkAge18</span><span class="token punctuation">(</span>lucy<span class="token punctuation">.</span>age<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实我们改造道这里就是函数的柯里化。那什么是柯里化呢？</p><p>当函数有多个参数的时候，我们可以对函数进行改造，只接收部分参数，然后返回一个函数继续等待接收剩余参数，并且返回相应的结果。</p><h4 id="lodash-中的-fp" tabindex="-1"><a class="header-anchor" href="#lodash-中的-fp" aria-hidden="true">#</a> lodash 中的 FP</h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/669a5c9b7a71443ab81242353a63a305~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>在lodash的官网上，我们很容易找到一个 function program guide 。在 lodash / fp 模块中提供了实用的对函数式编程友好的方法。里面的方式有以下的特性：</p><ul><li>不可变</li><li>已柯里化（auto-curried）</li><li>迭代前置（iteratee-first）</li><li>数据后置（data-last） 假如我们有一个需求是将空格字符串以小写“ - ”分割该如何实现呢？</li></ul><p>例如:（CAN YOU FEEL MY WORLD --&gt; can-you-feel-my-world）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> _ from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>lodash<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token constant">CAN</span> <span class="token constant">YOU</span> <span class="token constant">FEEL</span> <span class="token constant">MY</span> <span class="token constant">WORLD</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>
<span class="token keyword">const</span> split <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">curry</span><span class="token punctuation">(</span><span class="token punctuation">(</span>sep<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>_<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> sep<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> join <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">curry</span><span class="token punctuation">(</span><span class="token punctuation">(</span>sep<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>_<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> sep<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> map <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">curry</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>_<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> f <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">flow</span><span class="token punctuation">(</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">map</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span>toLower<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token function">f</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token comment">//&amp;#39;can-you-feel-my-world&amp;#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在使用 lodash 时，做能很多额外的转化动作，那我们试试 fp 模块吧。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> fp from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>lodash<span class="token operator">/</span>fp<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token constant">CAN</span> <span class="token constant">YOU</span> <span class="token constant">FEEL</span> <span class="token constant">MY</span> <span class="token constant">WORLD</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>
<span class="token keyword">const</span> f <span class="token operator">=</span> fp<span class="token punctuation">.</span><span class="token function">flow</span><span class="token punctuation">(</span>fp<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>fp<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>fp<span class="token punctuation">.</span>toLower<span class="token punctuation">)</span><span class="token punctuation">,</span> fp<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token function">f</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token comment">//&amp;#39;can-you-feel-my-world&amp;#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种编程方式我们称之为 PointFree，它有 3 个特点：</p><ul><li>不需要指明处理的数据</li><li>只需要合成运算过程</li><li>需要定义一些辅助的基本运算函数 当然使用的时候还是需要注意一下参数的描述。官网上有一个 🌰 是这样的：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// The \`lodash/map\` iteratee receives three arguments:</span>
<span class="token comment">// (value, index|key, collection)</span>
_<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token number">6</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token number">8</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token number">10</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> parseInt<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ➜ [6, NaN, 2]</span>

<span class="token comment">// The \`lodash/fp/map\` iteratee is capped at one argument:</span>
<span class="token comment">// (value)</span>
fp<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>parseInt<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token number">6</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token number">8</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token number">10</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ➜ [6, 8, 10]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>FP 中的 map 方法和 lodash 中的 map 方法参数的个数是不同的。</p><h4 id="什么是函数组合" tabindex="-1"><a class="header-anchor" href="#什么是函数组合" aria-hidden="true">#</a> 什么是函数组合</h4><p>弄明白了柯里化，我们开始函数组合了。</p><p>开发过程中，有的同学使用<strong>高阶函数</strong>和<strong>高阶组件</strong>的时候很容易写出洋葱代码。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2a706675c13248319e23e0829127db16~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">withRouter</span><span class="token punctuation">(</span>Form<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> model <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">status</span><span class="token operator">:</span> model<span class="token punctuation">.</span>status<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这段代码通常我们会使用<code>装饰器</code>(decorator)的方案优化掉。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>withRouter
@Form<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
@<span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> model <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">status</span><span class="token operator">:</span> model<span class="token punctuation">.</span>status<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
Index
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是<code>装饰器</code>只适用于组件 Component，对于拥抱 hooks 的函数组件并不适用。</p><p>在 redux 和 lodash 都有函数组合的方法提供，分别是 compose 和 flow，<code>fn = compose(f1,f2,f3)</code>，他可以帮助我们将上面的洋葱代码改造成管道的形式。我们需要注意管道的执行顺序，默认都是从右到左执行。compose 的实现也是特别的简单的。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">compose</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> args<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span>fn</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span>acc<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// es6</span>
<span class="token keyword">const</span> compose <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> value <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> args<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>acc<span class="token punctuation">,</span>fn<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token function">fn</span><span class="token punctuation">(</span>acc<span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于函数组合，我们也可以随时插入一些用来调试的函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> log <span class="token operator">=</span> <span class="token function">curry</span><span class="token punctuation">(</span><span class="token punctuation">(</span>label<span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>label<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> y <span class="token operator">=</span> <span class="token function">compose</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>after a<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>b<span class="token punctuation">,</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>after a<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="函子-functor" tabindex="-1"><a class="header-anchor" href="#函子-functor" aria-hidden="true">#</a> 函子（Functor）</h4><p>到目前来说，我们已经了解了一定的函数式编程的基础，但是我们还没有演示在函数式编程中如何把副作用控制在可控范围内、异常处理、异步操作等。在处理副作用之前，先聊下函子。</p><p><strong>什么是函子？</strong></p><p>容器：包容值和值的变形关系（这个变形关系就是函数）。</p><p>函子：一个特殊的容器，通过一个普通的对象来实现，该对象具有 <strong>map</strong> 方法， map 方法可以运行一个函数对值进行处理（变形关系）。</p><p>下面我们通过一段代码来看一下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Container</span><span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//私有的值 不对外公布</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token operator">=</span> value
  <span class="token punctuation">}</span>
  <span class="token comment">//接收一个处理值的函数</span>
  <span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">// map 是一个契约名称 fn 需要是一个纯函数</span>
    <span class="token comment">//返回一个新的函子</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_value<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> x <span class="token operator">*</span> x<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样我们可以通过创建时给定初始值，map 方法来修改这个值。但是一直使用 new 关键字，让代码看起来很面向对象，让我们来改造一下。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Container</span><span class="token punctuation">{</span>
  <span class="token comment">//of 的作用就是给我们返回一个函子对象，我们把 new 关键字封装在里面</span>
  <span class="token keyword">static</span> <span class="token keyword">of</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token operator">=</span> value
  <span class="token punctuation">}</span>
  
  <span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_value<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">new</span> <span class="token class-name">Container<span class="token punctuation">.</span>of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> x <span class="token operator">*</span> x<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是这样的一个基础的函子还是存在许多的问题，比如初始化的值与操作的方法不匹配、异常处理、可控副作用、异步执行等。因此衍生出一系列的函子来解决这些问题，这里罗列一下对应的函子和它们解决的问题：</p><ul><li><strong>maybe 函子</strong>: 空值问题</li><li><strong>Either 函子</strong>：异常处理</li><li><strong>IO 函子</strong>：副作用处理</li><li><strong>Task 函子</strong>：异步执行</li><li><strong>Monad 函子</strong>：IO 函子多层嵌套</li></ul><h2 id="主流框架、库中的应用" tabindex="-1"><a class="header-anchor" href="#主流框架、库中的应用" aria-hidden="true">#</a> 主流框架、库中的应用</h2><p>在 Redux 中，要写一个中间件代码大致是这样的：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> middleware <span class="token operator">=</span> store <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> next <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> action <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 具体实现</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实对于最后的实现主体来说无非都是拿到<code>storenextaction</code>三个参数而已。完全可以用下面的方式定义：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span>store<span class="token punctuation">,</span> next<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但是作者 Dan Abramov 还是采用了更具有函数式特性的方式去定义。</p><p>另外，React 16.8 版本开始正式的支持了 hooks。hooks 对比类组件的写法有几处优势这也刚好是符合函数式编程的特性的。</p><ul><li>通过自定义 hooks 来共享一些组件的逻辑，如果用类组件实现，只能通过高阶组件模拟，这样会不断嵌套，无用的“龟壳”。</li><li>每个方法都是<strong>独立</strong>的, 不需要像类组件那样在一个 mount 生命周期里做一堆不相关的操作，更新时又做一堆不相关的操作。不相关的逻辑整合在一个生命周期内，本来就是不易读、不易维护的。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//注册事件</span>
    <span class="token comment">//请求Api</span>
    <span class="token comment">//设置状态 等等</span>
  <span class="token punctuation">}</span>
  <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//取消一些监听事件</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而 Hooks（主要是 useEffect）取代了生命周期的概念，让代码的依赖逻辑更接近本质。<strong>函数式编程为组件的编写提供了更高的灵活度与可读性</strong>。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>函数式编程是一种范式、一种思想、一种约定。他有着一定的优势，更高的可组合性，灵活性以及容错性。但是在实际应用中是很难用函数式去表达的，我们应该将其当做我们现有储备的一种补充，而并非最优解去看待。以往的开发过程，我们可能习惯了用变量存储和追踪程序的状态，不停的在一些节点打印语句来观察程序的过程，现代的 JavaScript 库已经开始尝试拥抱函数式编程的概念以获取这些优势来降低系统复杂度。统一存储管理数据，将程序的运行状态置于可预见状态里。 React、Rxjs、Redux 等 js 库都是这一理念的最佳实践者。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,59),w={href:"https://zhuanlan.zhihu.com/p/24648375?refer=marisa",target:"_blank",rel:"noopener noreferrer"},_={href:"https://github.com/lodash/lodash/wiki/FP-Guide",target:"_blank",rel:"noopener noreferrer"},j={href:"http://www.ruanyifeng.com/blog/2012/04/functional_programming.html",target:"_blank",rel:"noopener noreferrer"},x={href:"https://segmentfault.com/a/1190000023744960",target:"_blank",rel:"noopener noreferrer"},A=n("h2",{id:"推荐阅读",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#推荐阅读","aria-hidden":"true"},"#"),s(" 推荐阅读")],-1),F=n("p",null,'[如何利用 SCSS 实现一键换肤](https://juejin.cn/post/7062496975454732301 "如何利用 SCSS 实现一键换肤")',-1),C=n("p",null,'[浅析Web录屏技术方案与实现](https://juejin.cn/post/7028723258019020836 "浅析Web录屏技术方案与实现")',-1),z=n("h2",{id:"开源作品",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#开源作品","aria-hidden":"true"},"#"),s(" 开源作品")],-1),E=n("ul",null,[n("li",null,"政采云前端小报")],-1),P={href:"https://www.zoo.team/openweekly/",target:"_blank",rel:"noopener noreferrer"},O=n("ul",null,[n("li",null,"商品选择 sku 插件")],-1),I={href:"https://github.com/zcy-inc/skuPathFinder-back",target:"_blank",rel:"noopener noreferrer"},L=n("h2",{id:"招贤纳士",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#招贤纳士","aria-hidden":"true"},"#"),s(" 招贤纳士")],-1),N=n("p",null,"政采云前端团队（ZooTeam），一个年轻富有激情和创造力的前端团队，隶属于政采云产品研发部，Base 在风景如画的杭州。团队现有 60 余个前端小伙伴，平均年龄 27 岁，近 4 成是全栈工程师，妥妥的青年风暴团。成员构成既有来自于阿里、网易的“老”兵，也有浙大、中科大、杭电等校的应届新人。团队在日常的业务对接之外，还在物料体系、工程平台、搭建平台、性能体验、云端应用、数据分析及可视化等方向进行技术探索和实战，推动并落地了一系列的内部技术产品，持续探索前端技术体系的新边界。",-1),R=n("p",null,[s("如果你想改变一直被事折腾，希望开始能折腾事；如果你想改变一直被告诫需要多些想法，却无从破局；如果你想改变你有能力去做成那个结果，却不需要你；如果你想改变你想做成的事需要一个团队去支撑，但没你带人的位置；如果你想改变既定的节奏，将会是“5 年工作时间 3 年工作经验”；如果你想改变本来悟性不错，但总是有那一层窗户纸的模糊… 如果你相信相信的力量，相信平凡人能成就非凡事，相信能遇到更好的自己。如果你希望参与到随着业务腾飞的过程，亲手推动一个有着深入的业务理解、完善的技术体系、技术创造价值、影响力外溢的前端团队的成长历程，我觉得我们该聊聊。任何时间，等着你写点什么，发给 "),n("code",null,"ZooTeam@cai-inc.com")],-1),S=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/98d3aa3d1f8646a8bcda8cfd9e335a4b~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1);function q(M,Y){const a=l("ExternalLinkIcon");return o(),c("div",null,[u,r,n("p",null,[s("> 这是第 134 篇不掺水的原创，想获取更多原创好文，请搜索公众号关注我们吧~ 本文首发于政采云前端博客："),n("a",k,[s("函数式编程（FP）"),p(a)])]),d,n("p",null,[s("> 一个以函数作为参数或返回的函数。 高阶函数，它虽然听起来很复杂，但其实并不难。并且非常的实用。要完全理解这个概念，首先必须了解"),n("a",m,[s("头等函数"),p(a)]),s("（"),v,s("）的概念。")]),b,n("p",null,[s("可能有的同学会问，为什么有引用不会被释放？这是因为 js 的"),n("a",g,[s("垃圾回收"),p(a)]),s("机制中最常用的是标记清除和引用计数。这里我们就不展开，有兴趣的同学可以自行了解一下。")]),h,n("p",null,[s("函数式编程不会保留计算中间的结果，所以变量是不可变、无状态的。我们可以把一个函数的执行结果交给另一个函数去处理。有的时候我们会拆分很多细粒度的函数库，这里可以了解一下 "),n("a",f,[s("lodash "),p(a)]),s("功能库，它提供了丰富的对数组、数字、对象、字符串、函数等操作的方法。")]),y,n("ul",null,[n("li",null,[n("a",w,[s("函数式编程的早期历史"),p(a)])]),n("li",null,[n("a",_,[s("lodash -- FP Guide"),p(a)])]),n("li",null,[n("a",j,[s("函数式编程初探"),p(a)])]),n("li",null,[n("a",x,[s("函数式编程（五）—— 函子"),p(a)])])]),A,F,C,z,E,n("p",null,[n("strong",null,[s("开源地址 "),n("a",P,[s("www.zoo.team/openweekly/"),p(a)])]),s(" (小报官网首页有微信交流群)")]),O,n("p",null,[n("strong",null,[s("开源地址 "),n("a",I,[s("https://github.com/zcy-inc/skuPathFinder-back/"),p(a)])])]),L,N,R,S])}const W=e(i,[["render",q],["__file","函数式编程（FP）.html.vue"]]);export{W as default};
