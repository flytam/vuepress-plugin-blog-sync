import{_ as e,z as o,A as c,Y as n,C as a,U as t,a6 as p,Q as i}from"./framework-cb9358d9.js";const l={},u=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f9cbb9e10b304b2c8aff5d65e5a530c5~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1),r={href:"https://zoo.team/article/flutter-color-pick",target:"_blank",rel:"noopener noreferrer"},d=p(`<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/63d4b285a7114063a111b1953004b010~tplv-k3u1fbpfcp-watermark.image" alt="北羽.png"></p><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>作为客户端开发, 在应用交付之前, 一般都会有 UI 走查这一环节. 一方是对颜色不敏感的开发另一方是对颜色十分敏感的视觉是否经常出现下列对话:</p><p>&gt;视觉: 你这个颜色是不是和我设计的不太一样. &gt; &gt;开发: 哪里不一样, 这个跟设计稿的颜色一模一样. &gt; &gt;视觉: 设计稿明明是伸手不见五指的黑, 你这个黑的不够纯正. &gt; &gt;开发: 你别走, 等我看下代码. &gt; &gt;......</p><p>看代码, 不失为一个办法. 但是如果你在其他的分支, 你需要先 stash 本地代码, 再切分支, 看代码, 找颜色... 这个时候, 是不是特别想有一个工具, 可以立马查看实际显示的颜色,</p><p>下面来介绍我是如何制作一个颜色吸管工具, 来当场&quot;打脸&quot;, 当然一般都是&quot;被打脸&quot;。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a85115f1cb6d4726bbc69b330fd62c7e~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>把大象装到冰箱, 需要三步: 1. 打开冰箱. 2. 把大象装进去, 3. 关上冰箱. 那制作一个颜色吸管需要几步呢？</p><p>&gt;1. 获取当前屏幕颜色 &gt;2. 选取指定位置 &gt;3. 颜色输出</p><h2 id="_1-获取所有像素点的颜色" tabindex="-1"><a class="header-anchor" href="#_1-获取所有像素点的颜色" aria-hidden="true">#</a> 1. 获取所有像素点的颜色</h2><p>如何获取当前屏幕的所有像素点的颜色呢, 挨个组件去取不太现实. 我们可以曲线救国, 对当前屏幕截屏, 截到的内容就是正在显示的颜色. 那么如何截屏呢, Flutter 提供了一个 Widget <code>RepaintBoundary</code>. 只需将内容用 <code>RepaintBoundary</code> 包裹起来:</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token class-name">RepaintBoundary</span><span class="token punctuation">(</span>
    key<span class="token punctuation">:</span> _key<span class="token punctuation">,</span>
    child<span class="token punctuation">:</span> <span class="token class-name">Scaffold</span><span class="token punctuation">(</span>
      appBar<span class="token punctuation">:</span> <span class="token class-name">AppBar</span><span class="token punctuation">(</span>
        title<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>widget<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
      body<span class="token punctuation">:</span> <span class="token class-name">Container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在需要截屏的地方, 通过 <code>_key</code> 获取到指定 <code>RenderRepaintBoundary</code> , 就可以直接转化为图片, 代码如下:</p><div class="language-plain line-numbers-mode" data-ext="plain"><pre class="language-plain"><code>// 根据key获取需要截图的组件
RenderRepaintBoundary boundary = _key.currentContext.findRenderObject();
// 获取当前设备像素比
double pix = window.devicePixelRatio;
// 截屏
var image = await boundary.toImage(pixelRatio: pix);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),k={href:"https://dev.gameres.com/Program/Visual/Other/PNGFormat.htm",target:"_blank",rel:"noopener noreferrer"},m=p(`<p>图像数据块 (IDAT) 属于关键数据块, 其中保存了图片的实际图像数据, 结合颜色类型(常见的有 RGB, YUV 等)也就可以获取到所有像素的指定颜色. 至此, 第一步结束。</p><h2 id="_2-获取指定像素点的颜色" tabindex="-1"><a class="header-anchor" href="#_2-获取指定像素点的颜色" aria-hidden="true">#</a> 2. 获取指定像素点的颜色</h2><p>我们如何获得指定像素点的颜色呢, 当然是用手选了, 想看哪里点哪里, 最为方便. 这个实现起来也很简单. 将前面截屏得到的图片通过 <code>Image.memory()</code> 方法展示出来, 不过需要做个数据转换, 代码如下:</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 将Image类型转换为Uint8List类型</span>
<span class="token class-name">ByteData</span> byteData <span class="token operator">=</span> <span class="token keyword">await</span> image<span class="token punctuation">.</span><span class="token function">toByteData</span><span class="token punctuation">(</span>format<span class="token punctuation">:</span> <span class="token class-name">ImageByteFormat</span><span class="token punctuation">.</span>png<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Uint8List</span> pngBytes <span class="token operator">=</span> byteData<span class="token punctuation">.</span>buffer<span class="token punctuation">.</span><span class="token function">asUint8List</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),v=n("code",null,"GestureDetector",-1),b=n("code",null,"onPanUpdate",-1),h=n("code",null,"onTapUp",-1),g={href:"https://pub.dev/packages/image",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"getPixelSafe()",-1),_=p(`<div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Color</span> <span class="token function">getColorFromDragUpdateDetails</span><span class="token punctuation">(</span><span class="token class-name">Offset</span> globalPosition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  int x <span class="token operator">=</span> globalPosition<span class="token punctuation">.</span>dx<span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  int y <span class="token operator">=</span> globalPosition<span class="token punctuation">.</span>dy<span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  double pix <span class="token operator">=</span> window<span class="token punctuation">.</span>devicePixelRatio<span class="token punctuation">;</span> <span class="token comment">//获取当前设备像素比</span>
  int pixel32 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>temp<span class="token punctuation">.</span><span class="token function">getPixelSafe</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">*</span> pix<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>y <span class="token operator">*</span> pix<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  int argb <span class="token operator">=</span> <span class="token function">_abgrToArgb</span><span class="token punctuation">(</span>pixel32<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Color</span> pixelColor <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">(</span>argb<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>当前坐标<span class="token punctuation">:</span> x<span class="token punctuation">:</span>$x<span class="token punctuation">,</span> y<span class="token punctuation">:</span>$y<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>ARGB<span class="token punctuation">:</span>$argb<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>HEX<span class="token punctuation">:</span>$<span class="token punctuation">{</span>argb<span class="token punctuation">.</span><span class="token function">toRadixString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token class-name">A</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>pixelColor<span class="token punctuation">.</span>alpha<span class="token punctuation">}</span> <span class="token class-name">R</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>pixelColor<span class="token punctuation">.</span>red<span class="token punctuation">}</span> <span class="token class-name">G</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>pixelColor<span class="token punctuation">.</span>green<span class="token punctuation">}</span><span class="token class-name">B</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>pixelColor<span class="token punctuation">.</span>blue<span class="token punctuation">}</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> pixelColor<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>image 库的大致原理如下, 将不同后缀的图片按照固定的解析方式, 取得其中的数据, 图片的像素被编码为 4 字节的 Uint32 整数, 根据传入的 x, y 值, 去取对应位置的颜色值就可以了。 ​我们再加一个悬浮窗来显示选中的颜色, 最终的展示效果如下:</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aa7de7cb55d840cab0ae6062edaf0e5d~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>你以为到这里就完了吗, NO~ NO~ NO~虽然满足了我们最初的功能, 但是还很难用, 在&quot;纤细&quot;的手指遮挡下, 我们根本无法做到像素级选择和移动。要是能对选中的地方做个放大就完美了。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7e20df792cd34e47a6f05922346ebe10~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><h2 id="_3-放大选中位置" tabindex="-1"><a class="header-anchor" href="#_3-放大选中位置" aria-hidden="true">#</a> 3. 放大选中位置</h2><p>在 Flutter 中, 对图片的操作可以通过 <code>ImageFilter</code> 来实现.<code>ImageFilter</code> 提供了两个构造方法:</p><div class="language-plain line-numbers-mode" data-ext="plain"><pre class="language-plain"><code>// 提供一个可以实现高斯模糊的图片滤镜
ImageFilter.blur({ double sigmaX = 0.0, double sigmaY = 0.0 })
// 通过应用一个矩阵的变换对图片做操作
ImageFilter.matrix(Float64List matrix4, { FilterQuality filterQuality = FilterQuality.low })
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在这里可以使用 <code>ImageFilter.matrix()</code> 来对图片的的纹理做矩阵变换来实现图片的放大效果. 放大效果分两步走:</p><h3 id="_3-1-获得放大指定位置后的图片矩阵" tabindex="-1"><a class="header-anchor" href="#_3-1-获得放大指定位置后的图片矩阵" aria-hidden="true">#</a> 3.1 获得放大指定位置后的图片矩阵</h3><p>这个很好理解, 我们将上一阶段截屏得到的图片用 <code>GestureDetector</code> 包裹, 在 <code>onPanUpdate</code> 时, 取到对应位置的坐标, 然后对截图进行矩阵变换, 获得变换过后的纹理:</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 手指移动时</span>
onPanUpdate<span class="token punctuation">:</span> <span class="token punctuation">(</span>detail<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取当前选中点的颜色值</span>
    <span class="token class-name">Color</span> pixelColor <span class="token operator">=</span>
      <span class="token function">getColorFromDragUpdateDetails</span><span class="token punctuation">(</span>detail<span class="token punctuation">.</span>globalPosition<span class="token punctuation">)</span><span class="token punctuation">;</span>
    choiceColor <span class="token operator">=</span> pixelColor<span class="token punctuation">;</span>
    choiceColorString <span class="token operator">=</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token number">0</span>x$<span class="token punctuation">{</span>pixelColor<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">toRadixString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">;</span>
    <span class="token comment">// 当前选中的点</span>
    _magnifierPosition <span class="token operator">=</span>
      detail<span class="token punctuation">.</span>globalPosition <span class="token operator">-</span> _size<span class="token punctuation">.</span><span class="token function">center</span><span class="token punctuation">(</span><span class="token class-name">Offset</span><span class="token punctuation">.</span>zero<span class="token punctuation">)</span><span class="token punctuation">;</span>
    double newX <span class="token operator">=</span> detail<span class="token punctuation">.</span>globalPosition<span class="token punctuation">.</span>dx<span class="token punctuation">;</span>
    double newY <span class="token operator">=</span> detail<span class="token punctuation">.</span>globalPosition<span class="token punctuation">.</span>dy<span class="token punctuation">;</span>
    <span class="token comment">// 矩阵变换</span>
    <span class="token keyword">final</span> <span class="token class-name">Matrix4</span> newMatrix <span class="token operator">=</span> <span class="token class-name">Matrix4</span><span class="token punctuation">.</span><span class="token function">identity</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span>newX<span class="token punctuation">,</span> newY<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span>scale<span class="token punctuation">,</span> scale<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span><span class="token operator">-</span>newX<span class="token punctuation">,</span> <span class="token operator">-</span>newY<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 保存变换过后的矩阵</span>
    matrix <span class="token operator">=</span> newMatrix<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-创建一个跟随组件-应用矩阵" tabindex="-1"><a class="header-anchor" href="#_3-2-创建一个跟随组件-应用矩阵" aria-hidden="true">#</a> 3.2 创建一个跟随组件 &amp; 应用矩阵</h3><p>这个是常规操作啦, 使用 <code>Stack</code> 和 <code>Positioned</code> 就可以实现一个跟随手势的组件, 然后创建一个 <code>BackdropFilter</code> 组件, 将上面变换过得矩阵应用到 <code>ImageFilter</code> 上.。在位置变化时, 实时 <code>setState</code>, 触发组件的刷新, 就可以做到啦。特别强调的是, 由于获取到的矩阵是整张图片变换的完整矩阵, 这里需要使用 <code>ClipRRect</code> 组件, 将不需要显示的部分裁减掉。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Visibility</span><span class="token punctuation">(</span>
  visible<span class="token punctuation">:</span> _visible<span class="token punctuation">,</span>
  child<span class="token punctuation">:</span> <span class="token class-name">Positioned</span><span class="token punctuation">(</span>
    left<span class="token punctuation">:</span> _magnifierPosition<span class="token punctuation">.</span>dx<span class="token punctuation">,</span>
    top<span class="token punctuation">:</span> _magnifierPosition<span class="token punctuation">.</span>dy<span class="token punctuation">,</span>
    child<span class="token punctuation">:</span> <span class="token class-name">ClipRRect</span><span class="token punctuation">(</span>
      borderRadius<span class="token punctuation">:</span> <span class="token class-name">BorderRadius</span><span class="token punctuation">.</span><span class="token function">circular</span><span class="token punctuation">(</span>_size<span class="token punctuation">.</span>longestSide<span class="token punctuation">)</span><span class="token punctuation">,</span>
      child<span class="token punctuation">:</span> <span class="token class-name">BackdropFilter</span><span class="token punctuation">(</span>
        filter<span class="token punctuation">:</span> <span class="token class-name">ImageFilter</span><span class="token punctuation">.</span><span class="token function">matrix</span><span class="token punctuation">(</span>matrix<span class="token punctuation">.</span>storage<span class="token punctuation">)</span><span class="token punctuation">,</span>
        child<span class="token punctuation">:</span> <span class="token class-name">CustomPaint</span><span class="token punctuation">(</span>
          painter<span class="token punctuation">:</span> painter<span class="token punctuation">,</span>
          size<span class="token punctuation">:</span> _size<span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
 <span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终效果如下所示:</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1016809132cf475c89dc422a874c5276~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><h2 id="_4-遇到的问题" tabindex="-1"><a class="header-anchor" href="#_4-遇到的问题" aria-hidden="true">#</a> 4.遇到的问题</h2><p>到这里, 这篇文章就基本结束了, 这里记录一下遇到的一些问题:</p><h3 id="_4-1-颜色编码" tabindex="-1"><a class="header-anchor" href="#_4-1-颜色编码" aria-hidden="true">#</a> 4.1 颜色编码</h3><p>在获取图片颜色时, 获取到的实际是 AABBGGRR 颜色类型, 而 Flutter 一般使用的是 AARRGGBB 颜色类型, 这里还需要做一个转换, 具体代码如下:</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// AABBGGRR -&amp;gt; AARRGGBB</span>
int <span class="token function">_abgrToArgb</span><span class="token punctuation">(</span>int oldValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  int newValue <span class="token operator">=</span> oldValue<span class="token punctuation">;</span>
  newValue <span class="token operator">=</span> newValue <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> <span class="token number">0xFF00FF00</span><span class="token punctuation">;</span> <span class="token comment">//open new space to insert the bits</span>
  newValue <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>oldValue <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">|</span> newValue<span class="token punctuation">;</span> <span class="token comment">// change BB</span>
  newValue <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>oldValue <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> <span class="token number">0x00FF0000</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">|</span> newValue<span class="token punctuation">;</span> <span class="token comment">// change RR</span>
  <span class="token keyword">return</span> newValue<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// int类型的值转换为16进制的hex值</span>
<span class="token class-name">String</span> hexColor <span class="token operator">=</span> argb<span class="token punctuation">.</span><span class="token function">toRadixString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际更为常见的还有 YUV 类型。 YUV 又有好多子类型, 例如 YUV420, YUV421 等, 读者可以自行了解相关资料。此处再扩展一个问题, 如何计算一张图片的实际内存大小? 图片的内存大小是和分辨率和颜色类型有关的, 分辨率决定了有多少个像素点, 颜色类型决定了一个像素点存储了多大的数据, 一般来讲, 图片内存大小的计算公式 <code>宽度*高度 *bytesPerPixel / 8</code>。例如一张 <code>1000*1000</code> 分辨率, RGB 颜色类型的图片，通常情况下， 图片自动缩放到 2 的 n 次方大小, RGB 颜色空间下每个颜色分量由 8 位组成, 但是通常情况下颜色还有 alpha 通道也是 8 位 也就是传说中的 RGBA , 所以总共是 32 位。所以一般图片的计算公式是 <code>w*h*4</code>。该张图片实际占用的大小就是 <code>1024*1024 * 4 / 1024 / 1024 = 4MB</code>。当时实际情况可能会比这个更为复杂, RGBA 类型也还有许多更加节省内存的变种, 例如 RGBA8888, RGBA4444 等。图片包含的其他 chunk 也会占用一定的内存大小, 此处只是做一个补充, 读者可自行学习。</p><h3 id="_4-2-获取指定位置的颜色" tabindex="-1"><a class="header-anchor" href="#_4-2-获取指定位置的颜色" aria-hidden="true">#</a> 4.2 获取指定位置的颜色</h3><p>在截图时, 我们传入了 <code>double pix = window.devicePixelRatio;</code> 设备像素比。 以 <code>iPhone11</code> 为例, pix 的值为 2.0。在后面我们获取到设备的触摸点时, 触摸点的位置是以物理尺寸为准, 所以去取图片也要将该 pix 值应用进去。</p><h3 id="_4-3-矩阵变换" tabindex="-1"><a class="header-anchor" href="#_4-3-矩阵变换" aria-hidden="true">#</a> 4.3 矩阵变换</h3><p>此例中, 我们要做的事, 放大图片的指定位置。通过矩阵来表示的话, 就是矩阵的平移和缩放的组合. 我们需要先将矩阵平移到需要缩放的点， 缩放， 缩放完成后再平移回去。因为缩放默认是以原点坐标为基准，原点坐标默认是左上角的 (0, 0) 位置。所以我们需要缩放的点平移到原点, 再缩放, 缩放完之后恢复现场. 矩阵变化很有意思, 此处不再做扩展, 读者可以自行挖掘更多玩法.</p><h2 id="_5-写在最后" tabindex="-1"><a class="header-anchor" href="#_5-写在最后" aria-hidden="true">#</a> 5.写在最后</h2><p>纵观全局, 没有用到什么特别难或者高深的技术, 但是组合出来的这个小工具却很有实用价值. 当然在UI还原度的提升和UI开发效率方面还有很多其他可以做的事情, 例如: 检测组件大小, 组件的位置, 组件层级等多种方式.</p>`,29),x={href:"https://mp.weixin.qq.com/s/K9p8986Gq1DoQ1fUYivPrg",target:"_blank",rel:"noopener noreferrer"},y=n("p",null,"我觉得未来的 UI 自动化验收一定是 AI 识别为主的自动验收模式和人工测量为主的个性化验收模式相结合. 在页面结构清晰, 组件不多的页面以自动验收为主, 在页面结构复杂的页面以人工验收为主. 这样才能做到效率和准确度的最好结合.",-1),R=n("p",null,"最后,用我不知道从哪里看到的一句话来结束吧, 共勉~",-1),B=n("p",null,">技术是为了解决业务问题的，只有在实现业务、给人们带来便利的前提下，技术的存在才有意义。",-1),w=n("h2",{id:"推荐阅读",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#推荐阅读","aria-hidden":"true"},"#"),a(" 推荐阅读")],-1),F={href:"https://juejin.cn/post/6935226614020046878",target:"_blank",rel:"noopener noreferrer"},U={href:"https://juejin.cn/post/6940414376486633503",target:"_blank",rel:"noopener noreferrer"},C=n("h2",{id:"招贤纳士",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#招贤纳士","aria-hidden":"true"},"#"),a(" 招贤纳士")],-1),I=n("p",null,"政采云前端团队（ZooTeam），一个年轻富有激情和创造力的前端团队，隶属于政采云产品研发部，Base 在风景如画的杭州。团队现有 40 余个前端小伙伴，平均年龄 27 岁，近 3 成是全栈工程师，妥妥的青年风暴团。成员构成既有来自于阿里、网易的“老”兵，也有浙大、中科大、杭电等校的应届新人。团队在日常的业务对接之外，还在物料体系、工程平台、搭建平台、性能体验、云端应用、数据分析及可视化等方向进行技术探索和实战，推动并落地了一系列的内部技术产品，持续探索前端技术体系的新边界。",-1),P=n("p",null,[a("如果你想改变一直被事折腾，希望开始能折腾事；如果你想改变一直被告诫需要多些想法，却无从破局；如果你想改变你有能力去做成那个结果，却不需要你；如果你想改变你想做成的事需要一个团队去支撑，但没你带人的位置；如果你想改变既定的节奏，将会是“5 年工作时间 3 年工作经验”；如果你想改变本来悟性不错，但总是有那一层窗户纸的模糊… 如果你相信相信的力量，相信平凡人能成就非凡事，相信能遇到更好的自己。如果你希望参与到随着业务腾飞的过程，亲手推动一个有着深入的业务理解、完善的技术体系、技术创造价值、影响力外溢的前端团队的成长历程，我觉得我们该聊聊。任何时间，等着你写点什么，发给 "),n("code",null,"ZooTeam@cai-inc.com")],-1),A=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c51c38c0baf64cf390208f7ffb422484~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1);function G(V,j){const s=i("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[a("> 这是第 93 篇不掺水的原创，想获取更多原创好文，请搜索公众号关注我们吧~ 本文首发于政采云前端博客："),n("a",r,[a("[Flutter] UI调试小工具——颜色吸管"),t(s)])]),d,n("p",null,[a("至此, 我们就得到了当前屏幕的截图. 图片可以看成是一组按照特殊的数据结构, 以 png 图片来讲, 一个 png 图片是由文件署名和数据块 (chunk) 两部分组成. 数据块又由关键数据块 (critical chunk) 和辅助数据块 (ancillary chunk) 两部分组成. 这些数据块包含了该图片的所有信息, 例如: 图像的宽高, 颜色类型, 图像深度, 实际图像数据, 图像位置信息, 最后修改信息等.更多内容可以参考"),n("a",k,[a("这里"),t(s)]),a("。")]),m,n("p",null,[a("将上面的图片加上一个 "),v,a(" widget, 在 "),b,a(" 或者 "),h,a(" 方法中可以轻易的获取到当前的 offset . 那么有了图片所有像素的颜色值, 有了图片的偏移量, 如何获取指定偏移量位置的颜色值呢, 这里就需要用到一个著名的图片处理库 "),n("a",g,[a("image"),t(s)]),a("。他提供了"),f,a("方法, 传入 x, y 值就可以获得当前位置的颜色值类型( Uint32 的 AABBGGRR 格式)。 👏👏👏 代码如下:")]),_,n("p",null,[a("在提升 UI 还原度的和开发效率方面, 业界一些大厂在这方面已经走得挺远了, 例如爱奇艺. 他们已经做到了"),n("a",x,[a("UI半自动验收"),t(s)]),a(". 大致实现思路是利用 AI 来识别组件边界, 然后通过控件匹配算法和间距选择算法来建立开发页面与设计页面的控件之间的一对一关系和间距关系. 然后将这些关系一一比对, 就能够输出匹配的结果. 但是这种方式在精细度和准确度上面肯定不如使用各种工具进行测量, 但是胜在效率高.")]),y,R,B,w,n("p",null,[n("a",F,[a("如何用 JS 实现二叉堆"),t(s)])]),n("p",null,[n("a",U,[a("编写高质量可维护的代码：程序范式"),t(s)])]),C,I,P,A])}const z=e(l,[["render",G],["__file","[Flutter] UI调试小工具——颜色吸管.html.vue"]]);export{z as default};
