import{_ as e,z as p,A as o,Y as n,C as s,U as t,a6 as c,Q as i}from"./framework-cb9358d9.js";const l={},u=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d4eb6a01e6564840817b127265b07edd~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1),k=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/14b77bf35771495a8ef87811560337fe~tplv-k3u1fbpfcp-watermark.image?",alt:"泠然.png"})],-1),r={href:"https://zoo.team/article/lru-keep-alive",target:"_blank",rel:"noopener noreferrer"},d=c(`<h3 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h3><p>​ 相信大部分同学在日常需求开发中或多或少的会有需要一个组件状态被持久化、不被重新渲染的场景，熟悉 vue 的同学一定会想到 <code>keep-alive </code> 这个内置组件。</p><p>​ 那么什么是 <code>keep-alive</code> 呢？</p><p>​ <code>keep-alive</code> 是 Vue.js 的一个 内置组件。它能够将不活动的组件实例保存在内存中，而不是直接将其销毁，它是一个抽象组件，不会被渲染到真实 DOM 中，也不会出现在父组件链中。简单的说，keep-alive用于保存组件的渲染状态，避免组件反复创建和渲染，有效提升系统性能。 <code>keep-alive</code> 的 <code>max</code> 属性，用于限制可以缓存多少组件实例，一旦这个数字达到了上限，在新实例被创建之前，已缓存组件中最久没有被访问的实例会被销毁掉，而这里所运用到的缓存机制就是 <strong>LRU 算法</strong></p><h3 id="lru-缓存淘汰算法" tabindex="-1"><a class="header-anchor" href="#lru-缓存淘汰算法" aria-hidden="true">#</a> LRU 缓存淘汰算法</h3><p>LRU（ least recently used）根据数据的历史记录来淘汰数据，重点在于<strong>保护最近被访问/使用过的数据，淘汰现阶段最久未被访问的数据</strong></p><p>&gt; LRU的主体思想在于：如果数据最近被访问过,那么将来被访问的几率也更高</p><p>&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/433e96139a8e4c42938ccd2d4203e760~tplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;fifo对比lru原理&quot; style=&quot;zoom:50%;&quot; /&gt;</p><ol><li>新数据插入到链表尾部；</li><li>每当缓存命中（即缓存数据被访问），则将数据移到链表尾部</li><li>当链表满的时候，将链表头部的数据丢弃。</li></ol><h4 id="实现lru的数据结构" tabindex="-1"><a class="header-anchor" href="#实现lru的数据结构" aria-hidden="true">#</a> 实现LRU的数据结构</h4><p>&gt; 经典的 LRU 一般都使用 <code>hashMap</code> + <code>双向链表</code>。考虑可能需要频繁删除一个元素，并将这个元素的前一个节点指向下一个节点，所以使用双链接最合适。并且它是按照结点最近被使用的时间顺序来存储的。 如果一个结点被访问了， 我们有理由相信它在接下来的一段时间被访问的概率要大于其它结点。</p><p>&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3ae68a8f19c749ddbc73bf20d1248659~tplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;map.keys()&quot; style=&quot;zoom:80%;&quot; /&gt;</p><p>不过既然已经在 js 里都已经使用 <code>Map</code> 了，何不直接取用现成的迭代器获取下一个结点的 key 值（<code>keys().next(</code><code>)</code>）</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// ./LRU.ts</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">LRUCache</span> <span class="token punctuation">{</span>
  capacity<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token comment">// 容量</span>
  cache<span class="token operator">:</span> Map<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token comment">// 缓存</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>capacity<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">get</span><span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> temp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
      <span class="token comment">//访问到的 key 若在缓存中，将其提前</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> temp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">put</span><span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">//存在则删除，if 结束再提前</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">.</span>size <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 超过缓存长度,淘汰最近没使用的</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">refresh: key:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> , value:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>capacity<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>capacity<span class="token punctuation">)</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// ./index.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>LRUCache<span class="token punctuation">}</span> from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token operator">/</span>lru<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LRUCache</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
list<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>   <span class="token comment">// 入 2，剩余容量3</span>
list<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>   <span class="token comment">// 入 3，剩余容量2</span>
list<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>   <span class="token comment">// 入 4，剩余容量1</span>
list<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>   <span class="token comment">// 入 5，已满    从头至尾         2-3-4-5</span>
list<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>   <span class="token comment">// 入4，已存在 ——&amp;gt; 置队尾         2-3-5-4</span>
list<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>   <span class="token comment">// 入1，不存在 ——&amp;gt; 删除队首 插入1  3-5-4-1</span>
list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>     <span class="token comment">// 获取3，刷新3——&amp;gt; 置队尾         5-4-1-3</span>
list<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// ./index.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>LRUCache<span class="token punctuation">}</span> from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token operator">/</span>lru<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LRUCache</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>

list<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>   <span class="token comment">// 入 2，剩余容量3</span>
list<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>   <span class="token comment">// 入 3，剩余容量2</span>
list<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>   <span class="token comment">// 入 4，剩余容量1</span>
list<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>   <span class="token comment">// 入 5，已满    从头至尾  				2-3-4-5</span>
list<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>   <span class="token comment">// 入4，已存在 ——&amp;gt; 置队尾  				2-3-5-4</span>
list<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>   <span class="token comment">// 入1，不存在 ——&amp;gt; 删除队首 插入1  3-5-4-1</span>
list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>     <span class="token comment">// 获取3，刷新3——&amp;gt; 置队尾  				5-4-1-3</span>
list<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果如下： <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/33886c8e5b3f4affa2523ed2c2a1221d~tplv-k3u1fbpfcp-zoom-1.image" alt="lru打印结果.jpg"></p><h3 id="vue-中-keep-alive" tabindex="-1"><a class="header-anchor" href="#vue-中-keep-alive" aria-hidden="true">#</a> vue 中 Keep-Alive</h3><h4 id="原理" tabindex="-1"><a class="header-anchor" href="#原理" aria-hidden="true">#</a> 原理</h4><ol><li>使用 LRU 缓存机制进行缓存，max 限制缓存表的最大容量</li><li>根据设定的 include/exclude（如果有）进行条件匹配,决定是否缓存。不匹配,直接返回组件实例</li><li>根据组件 ID 和 tag 生成缓存 Key ,并在缓存对象中查找是否已缓存过该组件实例。如果存在,直接取出缓存值并更新该 key 在 this.keys 中的位置(更新 key 的位置是实现 LRU 置换策略的关键)</li><li>获取节点名称，或者根据节点 cid 等信息拼出当前 组件名称</li><li>获取 keep-alive 包裹着的第一个子组件对象及其组件名</li></ol><h4 id="源码分析" tabindex="-1"><a class="header-anchor" href="#源码分析" aria-hidden="true">#</a> 源码分析</h4><h5 id="初始化-keepalive-组件" tabindex="-1"><a class="header-anchor" href="#初始化-keepalive-组件" aria-hidden="true">#</a> 初始化 keepAlive 组件</h5><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> KeepAliveImpl<span class="token operator">:</span> ComponentOptions <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">KeepAlive</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  props<span class="token operator">:</span> <span class="token punctuation">{</span>
    include<span class="token operator">:</span> <span class="token punctuation">[</span>String<span class="token punctuation">,</span> RegExp<span class="token punctuation">,</span> <span class="token builtin">Array</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    exclude<span class="token operator">:</span> <span class="token punctuation">[</span>String<span class="token punctuation">,</span> RegExp<span class="token punctuation">,</span> <span class="token builtin">Array</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    max<span class="token operator">:</span> <span class="token punctuation">[</span>String<span class="token punctuation">,</span> Number<span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">setup</span><span class="token punctuation">(</span>props<span class="token operator">:</span> KeepAliveProps<span class="token punctuation">,</span> <span class="token punctuation">{</span> slots <span class="token punctuation">}</span><span class="token operator">:</span> SetupContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 初始化数据</span>
    <span class="token keyword">const</span> cache<span class="token operator">:</span> Cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> keys<span class="token operator">:</span> Keys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> current<span class="token operator">:</span> VNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token comment">// 当 props 上的 include 或者 exclude 变化时移除缓存</span>
    <span class="token function">watch</span><span class="token punctuation">(</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">[</span>props<span class="token punctuation">.</span>include<span class="token punctuation">,</span> props<span class="token punctuation">.</span>exclude<span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">(</span><span class="token punctuation">[</span>include<span class="token punctuation">,</span> exclude<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
      include <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> <span class="token function">pruneCache</span><span class="token punctuation">(</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token function">matches</span><span class="token punctuation">(</span>include<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      exclude <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> <span class="token function">pruneCache</span><span class="token punctuation">(</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token operator">!</span><span class="token function">matches</span><span class="token punctuation">(</span>exclude<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span> flush<span class="token operator">:</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>post<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> deep<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 缓存组件的子树 subTree</span>
    <span class="token keyword">let</span> pendingCacheKey<span class="token operator">:</span> CacheKey <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> cacheSubtree <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
      <span class="token comment">// fix #1621, the pendingCacheKey could be 0</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>pendingCacheKey <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>pendingCacheKey<span class="token punctuation">,</span> <span class="token function">getInnerChild</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>subTree<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// KeepAlive 组件的设计，本质上就是空间换时间。</span>
    <span class="token comment">// 在 KeepAlive 组件内部，</span>
    <span class="token comment">// 当组件渲染挂载和更新前都会缓存组件的渲染子树 subTree</span>
    <span class="token function">onMounted</span><span class="token punctuation">(</span>cacheSubtree<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">onUpdated</span><span class="token punctuation">(</span>cacheSubtree<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">onBeforeUnmount</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 卸载缓存表里的所有组件和其中的子树...</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">{</span>
      <span class="token comment">// 返回 keepAlive 实例</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">{</span>
  <span class="token comment">// 省略部分代码，以下是缓存逻辑</span>
  pendingCacheKey <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token keyword">const</span> children <span class="token operator">=</span> slots<span class="token punctuation">.</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">let</span> vnode <span class="token operator">=</span> children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
  <span class="token keyword">const</span> comp <span class="token operator">=</span> vnode<span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token class-name"><span class="token keyword">as</span></span> Component
  <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token function">getName</span><span class="token punctuation">(</span>comp<span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> include<span class="token punctuation">,</span> exclude<span class="token punctuation">,</span> max <span class="token punctuation">}</span> <span class="token operator">=</span> props
  <span class="token comment">// key 值是 KeepAlive 子节点创建时添加的，作为缓存节点的唯一标识</span>
  <span class="token keyword">const</span> key <span class="token operator">=</span> vnode<span class="token punctuation">.</span>key <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> comp <span class="token operator">:</span> vnode<span class="token punctuation">.</span>key
  <span class="token comment">// 通过 key 值获取缓存节点</span>
  <span class="token keyword">const</span> cachedVNode <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>cachedVNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 缓存存在，则使用缓存装载数据</span>
    vnode<span class="token punctuation">.</span>el <span class="token operator">=</span> cachedVNode<span class="token punctuation">.</span>el
    vnode<span class="token punctuation">.</span>component <span class="token operator">=</span> cachedVNode<span class="token punctuation">.</span>component
    <span class="token keyword">if</span> <span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>transition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 递归更新子树上的 transition hooks</span>
      <span class="token function">setTransitionHooks</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> vnode<span class="token punctuation">.</span>transition<span class="token operator">!</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
      <span class="token comment">// 阻止 vNode 节点作为新节点被挂载</span>
      vnode<span class="token punctuation">.</span>shapeFlag <span class="token operator">|=</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">COMPONENT_KEPT_ALIVE</span>
      <span class="token comment">// 刷新key的优先级</span>
      keys<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
      keys<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      keys<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
      <span class="token comment">// 属性配置 max 值，删除最久不用的 key ，这很符合 LRU 的思想</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>max <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> keys<span class="token punctuation">.</span>size <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>max <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">pruneCacheEntry</span><span class="token punctuation">(</span>keys<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 避免 vNode 被卸载</span>
    vnode<span class="token punctuation">.</span>shapeFlag <span class="token operator">|=</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">COMPONENT_SHOULD_KEEP_ALIVE</span>
    current <span class="token operator">=</span> vnode
    <span class="token keyword">return</span> vnode<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="将组件移出缓存表" tabindex="-1"><a class="header-anchor" href="#将组件移出缓存表" aria-hidden="true">#</a> 将组件移出缓存表</h5><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 遍历缓存表</span>
<span class="token keyword">function</span> <span class="token function">pruneCache</span><span class="token punctuation">(</span>filter<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  cache<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token function">getComponentName</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token class-name"><span class="token keyword">as</span></span> ConcreteComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> <span class="token punctuation">(</span><span class="token operator">!</span>filter <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">filter</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// !filter(name) 即 name 在 includes 或不在 excludes 中</span>
      <span class="token function">pruneCacheEntry</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 依据 key 值从缓存表中移除对应组件</span>
<span class="token keyword">function</span> <span class="token function">pruneCacheEntry</span><span class="token punctuation">(</span>key<span class="token operator">:</span> CacheKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> cached <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token keyword">as</span> VNode<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>current <span class="token operator">||</span> cached<span class="token punctuation">.</span>type <span class="token operator">!==</span> current<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/* 当前没有处在 activated 状态的组件
     * 或者当前处在 activated 组件不是要删除的 key 时
     * 卸载这个组件
    */</span>
    <span class="token function">unmount</span><span class="token punctuation">(</span>cached<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// unmount方法里同样包含了 resetShapeFlag</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 当前组件在未来应该不再被 keepAlive 缓存</span>
    <span class="token comment">// 虽然仍在 keepAlive 的容量中但是需要刷新当前组件的优先级</span>
    <span class="token function">resetShapeFlag</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// resetShapeFlag </span>
  <span class="token punctuation">}</span>
  cache<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
  keys<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">resetShapeFlag</span><span class="token punctuation">(</span>vnode<span class="token operator">:</span> VNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> shapeFlag <span class="token operator">=</span> vnode<span class="token punctuation">.</span>shapeFlag<span class="token punctuation">;</span> <span class="token comment">// shapeFlag 是 VNode 的标识</span>
   <span class="token comment">// ... 清除组件的 shapeFlag</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="keep-alive案例" tabindex="-1"><a class="header-anchor" href="#keep-alive案例" aria-hidden="true">#</a> keep-alive案例</h3><p>本部分将使用 vue 3.x 的新特性来模拟 <code>keep-alive</code> 的具体应用场景</p><p>在 index.vue 里我们引入了 CountUp 、timer 和 ColorRandom 三个带有状态的组件 在容量为 2 的 <code>&amp;lt;keep-alive&amp;gt;</code> 中包裹了一个动态组件</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>// index.vue
<span class="token entity named-entity" title="&lt;">&amp;lt;</span>script setup<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
import { ref } from <span class="token entity named-entity" title="&quot;">&amp;quot;</span>vue<span class="token entity named-entity" title="&quot;">&amp;quot;</span>
import CountUp from <span class="token entity" title="&#39;">&amp;#39;</span>../components/CountUp.vue<span class="token entity" title="&#39;">&amp;#39;</span>
import ColorRandom from <span class="token entity" title="&#39;">&amp;#39;</span>../components/ColorRandom.vue<span class="token entity" title="&#39;">&amp;#39;</span>
import Timer from <span class="token entity" title="&#39;">&amp;#39;</span>../components/Timer.vue<span class="token entity" title="&#39;">&amp;#39;</span>
const tabs = ref([    // 组件列表
  {
    title: <span class="token entity named-entity" title="&quot;">&amp;quot;</span>ColorPicker<span class="token entity named-entity" title="&quot;">&amp;quot;</span>,
    comp: ColorRandom,
  },
  {
    title: <span class="token entity named-entity" title="&quot;">&amp;quot;</span>timer1<span class="token entity named-entity" title="&quot;">&amp;quot;</span>,
    comp: Timer,
  },
  {
    title: <span class="token entity named-entity" title="&quot;">&amp;quot;</span>timer2<span class="token entity named-entity" title="&quot;">&amp;quot;</span>,
    comp: Timer,
  },
  {
    title: <span class="token entity named-entity" title="&quot;">&amp;quot;</span>CountUp<span class="token entity named-entity" title="&quot;">&amp;quot;</span>,
    comp: CountUp,
  },
])
const currentTab = ref(tabs.value[0]) // tab 默认展示第一个组件
const tabSwitch = (tab) =<span class="token entity named-entity" title="&gt;">&amp;gt;</span> {
  currentTab.value = tab
}
<span class="token entity named-entity" title="&lt;">&amp;lt;</span>/script<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
<span class="token entity named-entity" title="&lt;">&amp;lt;</span>template<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
  <span class="token entity named-entity" title="&lt;">&amp;lt;</span>div id=<span class="token entity named-entity" title="&quot;">&amp;quot;</span>main-page<span class="token entity named-entity" title="&quot;">&amp;quot;</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span>keep-alive demo below<span class="token entity named-entity" title="&lt;">&amp;lt;</span>/div<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
  <span class="token entity named-entity" title="&lt;">&amp;lt;</span>div class=<span class="token entity named-entity" title="&quot;">&amp;quot;</span>tab-group<span class="token entity named-entity" title="&quot;">&amp;quot;</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span>
    <span class="token entity named-entity" title="&lt;">&amp;lt;</span>button
    v-for=<span class="token entity named-entity" title="&quot;">&amp;quot;</span>tab in tabs<span class="token entity named-entity" title="&quot;">&amp;quot;</span>
    :key=<span class="token entity named-entity" title="&quot;">&amp;quot;</span>tab<span class="token entity named-entity" title="&quot;">&amp;quot;</span>
    :class=<span class="token entity named-entity" title="&quot;">&amp;quot;</span>[<span class="token entity" title="&#39;">&amp;#39;</span>tab-button<span class="token entity" title="&#39;">&amp;#39;</span>, { active: currentTab === tab }]<span class="token entity named-entity" title="&quot;">&amp;quot;</span>
    @click=<span class="token entity named-entity" title="&quot;">&amp;quot;</span>tabSwitch(tab)<span class="token entity named-entity" title="&quot;">&amp;quot;</span>
  <span class="token entity named-entity" title="&gt;">&amp;gt;</span>
    {{ tab.title }}
  <span class="token entity named-entity" title="&lt;">&amp;lt;</span>/button<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
  <span class="token entity named-entity" title="&lt;">&amp;lt;</span>/div<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
  <span class="token entity named-entity" title="&lt;">&amp;lt;</span>keep-alive max=<span class="token entity named-entity" title="&quot;">&amp;quot;</span>2<span class="token entity named-entity" title="&quot;">&amp;quot;</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span>
  <span class="token entity named-entity" title="&lt;">&amp;lt;</span>!-- 动态组件渲染 tab 当前的组件 --<span class="token entity named-entity" title="&gt;">&amp;gt;</span>  
    <span class="token entity named-entity" title="&lt;">&amp;lt;</span>component
      v-if=<span class="token entity named-entity" title="&quot;">&amp;quot;</span>currentTab<span class="token entity named-entity" title="&quot;">&amp;quot;</span>
      :is=<span class="token entity named-entity" title="&quot;">&amp;quot;</span>currentTab.comp<span class="token entity named-entity" title="&quot;">&amp;quot;</span>
      :key=<span class="token entity named-entity" title="&quot;">&amp;quot;</span>currentTab.title<span class="token entity named-entity" title="&quot;">&amp;quot;</span>
      :name=<span class="token entity named-entity" title="&quot;">&amp;quot;</span>currentTab.title<span class="token entity named-entity" title="&quot;">&amp;quot;</span>
    /<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
  <span class="token entity named-entity" title="&lt;">&amp;lt;</span>/keep-alive<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
<span class="token entity named-entity" title="&lt;">&amp;lt;</span>/template<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="缓存状态" tabindex="-1"><a class="header-anchor" href="#缓存状态" aria-hidden="true">#</a> 缓存状态</h4><p>缓存流程如下：</p><p>&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/519c0e471e4b43308973db9dc8ef4a7a~tplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;缓存流程图&quot; style=&quot;zoom:50%;&quot; /&gt;</p><p>可以看到被包裹在 <code>keep-alive</code> 的动态组件缓存了前一个组件的状态。</p><p>通过观察 vue devtools 里节点的变化，可以看到此时 keepAlive 中包含了 <code>ColorRandom</code> 和 <code>Timer</code> 两个组件，当前展示的组件会处在 activated 的状态，而其他被缓存的组件则处在 <code>inactivated</code> 的状态</p><p>如果我们注释了两个 <code>keep-alive</code> 会发现不管怎么切换组件，都只会重新渲染，并不会保留前次的状态</p><p>&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0e6415287dd8471f897a8cc6d44d1b62~tplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;keepAlive-cache.gif&quot; style=&quot;zoom:75%;&quot; /&gt;</p><h4 id="移除组件" tabindex="-1"><a class="header-anchor" href="#移除组件" aria-hidden="true">#</a> 移除组件</h4><p>移除流程如下：</p><p>&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/89124fddb9184fc4900c312933db2e74~tplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;移除流程图&quot; style=&quot;zoom:50%;&quot; /&gt;</p><p>为了验证组件是否在切换tab时能被成功卸载，在每个组件的 <code>onUnmounted</code> 中加上了 log</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token function">onUnmounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>props<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 组件被卸载</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>当缓存数据长度小于等于 max ，切换组件并不会卸载其他组件，就像上面在 vue devtools 里展示的一样，只会触发组件的 <code>activated</code> 和 <code>deactivated</code> 两个生命周期</li><li>若此时缓存数据长度大于 max ，则会从缓存列表中删除优先级较低的，优先被淘汰的组件，对应的可以看到该组件 <code>umounted</code> 生命周期触发。</li></ul><p>&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6326bda1794d41b28b4ae56eaeba2acd~tplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;keepAlive-unmount.gif&quot; style=&quot;zoom:70%;&quot; /&gt;</p><h3 id="性能优化" tabindex="-1"><a class="header-anchor" href="#性能优化" aria-hidden="true">#</a> 性能优化</h3><p>使用 KeepAlive 后，被 KeepAlive 包裹的组件在经过第一次渲染后，的 vnode 以及 DOM 都会被缓存起来，然后再下一次再次渲染该组件的时候，直接从缓存中拿到对应的 vnode 和 DOM，然后渲染，并不需要再走一次组件初始化，render 和 patch 等一系列流程，减少了 script 的执行时间，性能更好。</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p>​ Vue 内部将 DOM 节点抽象成了一个个的 VNode 节点，keep-alive 组件的缓存也是基于 VNode 节点的而不是直接存储 DOM 结构。它将满足条件（ include 与 exclude ）的组件在 cache 对象中缓存起来，在需要重新渲染的时候再将 vnode 节点从 cache 对象中取出并渲染。</p><p>​ 具体缓存过程如下：</p><ol><li><p>声明有序集合 keys 作为缓存容器，存入组件的唯一 key 值</p></li><li><p>在缓存容器 keys 中，越靠前的 key 值意味着被访问的越少也越优先被淘汰</p></li><li><p>渲染函数执行时，若命中缓存时，则从 keys 中删除当前命中的 key，并往 keys 末尾追加 key 值，刷新该 key 的优先级</p></li><li><p>未命中缓存时，则 keys 追加缓存数据 key 值，若此时缓存数据长度大于 max 最大值，则删除最旧的数据</p></li><li><p>当触发 beforeMount/update 生命周期，缓存当前 activated 组件的子树的数据</p></li></ol><hr><h3 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h3>`,50),m={href:"https://zhuanlan.zhihu.com/p/34989978",target:"_blank",rel:"noopener noreferrer"},v={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",target:"_blank",rel:"noopener noreferrer"},b={href:"https://blog.csdn.net/xplee0576/article/details/22200537",target:"_blank",rel:"noopener noreferrer"},y=n("h2",{id:"推荐阅读",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#推荐阅读","aria-hidden":"true"},"#"),s(" 推荐阅读")],-1),h=n("ul",null,[n("li",null,'[sketch插件开发指南](https://juejin.cn/post/7033911797279096845 "sketch插件开发指南")'),n("li",null,'[在 Vue 中为什么不推荐用 index 做 key](https://juejin.cn/post/7026119446162997261 "在 Vue 中为什么不推荐用 index 做 key")'),n("li",null,'[浅析Web录屏技术方案与实现](https://juejin.cn/post/7028723258019020836 "浅析Web录屏技术方案与实现")')],-1),f=n("h2",{id:"开源作品",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#开源作品","aria-hidden":"true"},"#"),s(" 开源作品")],-1),g=n("ul",null,[n("li",null,"政采云前端小报")],-1),q={href:"https://www.zoo.team/openweekly/",target:"_blank",rel:"noopener noreferrer"},w=n("ul",null,[n("li",null,"商品选择 sku 插件")],-1),x={href:"https://github.com/zcy-inc/skuPathFinder-back",target:"_blank",rel:"noopener noreferrer"},_=n("h2",{id:"招贤纳士",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#招贤纳士","aria-hidden":"true"},"#"),s(" 招贤纳士")],-1),C=n("p",null,"政采云前端团队（ZooTeam），一个年轻富有激情和创造力的前端团队，隶属于政采云产品研发部，Base 在风景如画的杭州。团队现有 60 余个前端小伙伴，平均年龄 27 岁，近 4 成是全栈工程师，妥妥的青年风暴团。成员构成既有来自于阿里、网易的“老”兵，也有浙大、中科大、杭电等校的应届新人。团队在日常的业务对接之外，还在物料体系、工程平台、搭建平台、性能体验、云端应用、数据分析及可视化等方向进行技术探索和实战，推动并落地了一系列的内部技术产品，持续探索前端技术体系的新边界。",-1),j=n("p",null,[s("如果你想改变一直被事折腾，希望开始能折腾事；如果你想改变一直被告诫需要多些想法，却无从破局；如果你想改变你有能力去做成那个结果，却不需要你；如果你想改变你想做成的事需要一个团队去支撑，但没你带人的位置；如果你想改变既定的节奏，将会是“5 年工作时间 3 年工作经验”；如果你想改变本来悟性不错，但总是有那一层窗户纸的模糊… 如果你相信相信的力量，相信平凡人能成就非凡事，相信能遇到更好的自己。如果你希望参与到随着业务腾飞的过程，亲手推动一个有着深入的业务理解、完善的技术体系、技术创造价值、影响力外溢的前端团队的成长历程，我觉得我们该聊聊。任何时间，等着你写点什么，发给 "),n("code",null,"ZooTeam@cai-inc.com")],-1),U=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/98d3aa3d1f8646a8bcda8cfd9e335a4b~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1);function R(z,L){const a=i("ExternalLinkIcon");return p(),o("div",null,[u,k,n("p",null,[s("> 这是第 124 篇不掺水的原创，想获取更多原创好文，请搜索公众号关注我们吧~ 本文首发于政采云前端博客："),n("a",r,[s("LRU缓存-keep-alive实现原理"),t(a)])]),d,n("ul",null,[n("li",null,[n("a",m,[s("缓存淘汰算法--LRU 算法（知乎）"),t(a)])]),n("li",null,[n("a",v,[s("Map set 文档（MDN）"),t(a)])]),n("li",null,[n("a",b,[s("LRU Cache 数据结构简介"),t(a)])])]),y,h,f,g,n("p",null,[n("strong",null,[s("开源地址 "),n("a",q,[s("www.zoo.team/openweekly/"),t(a)])]),s(" (小报官网首页有微信交流群)")]),w,n("p",null,[n("strong",null,[s("开源地址 "),n("a",x,[s("https://github.com/zcy-inc/skuPathFinder-back/"),t(a)])])]),_,C,j,U])}const S=e(l,[["render",R],["__file","LRU缓存-keep-alive实现原理.html.vue"]]);export{S as default};
