import{_ as p,z as e,A as o,Y as n,C as s,U as t,a6 as c,Q as i}from"./framework-cb9358d9.js";const l={},u=n("p",null,[s('本文已参与「[掘力星计划](https://juejin.cn/post/7012210233804079141/ "https://juejin.cn/post/7012210233804079141/")」，赢取创作大礼包，挑战创作激励金。 '),n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d4eb6a01e6564840817b127265b07edd~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1),r=n("p",null,[n("img",{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0cbbb3a8eaa1419c84b293dee84ff32e~tplv-k3u1fbpfcp-watermark.image?",alt:"见一.png"})],-1),k={href:"https://zoo.team/article/anti-shake-throttle",target:"_blank",rel:"noopener noreferrer"},d=c(`<h1 id="防抖节流场景及应用" tabindex="-1"><a class="header-anchor" href="#防抖节流场景及应用" aria-hidden="true">#</a> 防抖节流场景及应用</h1><h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h2><p>在日常开发中，我们会经常遇到搜索查询，用户在输入过程中会触发 Input 值的改变而持续触发函数调用。或者在用户在商品搜索页滑动浏览商品时，如果我们监听了窗口滚动来发送埋点请求的话，就会频繁触发接口调用。但有时候我们并不希望用户的持续操作过程中，会频繁触发接口的调用。而为了限制这种短时间内高频触发函数调用情况发生，我们可以借助防抖和节流。</p><p>函数防抖和节流，都是通过控制事件触发频率达到优化函数执行效率的效果。我们先通过下面这张图直观的看一下常规、防抖和节流的区别。 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f0d5ca21df624130b73e13e3b80b382f~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20210614222321441"></p><p>图中横坐标是时间轴，可以看到防抖是在事件停止触发一段时间后执行回调，节流是在事件持续触发时以一定的时间间隔去定时执行回调。</p><h2 id="防抖与节流场景分析" tabindex="-1"><a class="header-anchor" href="#防抖与节流场景分析" aria-hidden="true">#</a> 防抖与节流场景分析</h2><h3 id="防抖" tabindex="-1"><a class="header-anchor" href="#防抖" aria-hidden="true">#</a> 防抖</h3><p>防抖，顾名思义，防止抖动。用于将用户的操作行为触发转换为程序行为触发，防止用户操作的结果抖动。一段时间内，事件在我们规定的间隔 n 秒内多次执行，回调只会执行一次。</p><p>特点：等待某种操作停止后，加以间隔进行操作</p><ul><li>持续触发不执行</li><li>不触发的一段时间之后再执行</li></ul><p>应用场景：</p><p><code>mousemove</code> 鼠标滑动事件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 首次不立即执行</span>
<span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> timer<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>

        <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">getUserAction</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// container 为示例代码容器</span>
  container<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>e<span class="token punctuation">.</span>clientX<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>e<span class="token punctuation">.</span>clientY<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

container<span class="token punctuation">.</span>onmousemove <span class="token operator">=</span> <span class="token function">debounce</span><span class="token punctuation">(</span>getUserAction<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>未添加防抖效果如图，鼠标滑动过程中，x 和 y 坐标在不断变化展示。 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d80b7b51c4ff4d33b51a758eeaf0bf8b~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>添加防抖效果后如图，鼠标停止滑动后 1000ms，x 和 y 轴坐标被更新。 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/80d69034c29d43edb29cf1e10b2a3d63~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>接下来我们来看一个业务中经常会遇到的例子，Select 去服务端动态搜索功能。而其与上面场景的区别在于第一次是否执行</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 立刻执行第一次函数，给用户展示默认的 m 条数据，等到用户手动输入停止触发 n 秒后，再重新执行</span>
<span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait<span class="token punctuation">,</span> immediate</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> timer<span class="token punctuation">;</span>
  	<span class="token keyword">let</span> localImmediate <span class="token operator">=</span> immediate<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>localImmediate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// 标记为，用于标记第一次是否立即执行</span>
          localImmediate <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
          <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      	<span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token parameter">vaule</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// 调用接口请求数据</span>
<span class="token punctuation">}</span>
<span class="token function">debounce</span><span class="token punctuation">(</span>fetchData<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>以上是通过防抖实现了用户停止输入 n 秒后，去服务端请求数据，但是有可能用户输入<code>杭州</code> 后触发了第一次搜索。随后又输入了 <code>市体育馆</code> ，此时触发了第二次搜索。</p><p>此时页面上显示的情况可能有两种：</p><ul><li>第一个搜索结果返回的比第二次快，会先显示 <code>杭州</code> 的搜索结果，再显示 <code>杭州市体育馆</code> 的搜索结果。效果如图： <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6711b1b46fbe4ab58cc79e69e1f4a9c4~tplv-k3u1fbpfcp-zoom-1.image" alt=""></li><li>第一个搜索结果返回的比第二次慢，会先显示 <code>杭州市体育馆</code> 的搜索结果，再显示 <code>杭州</code> 的搜索结果。效果如图： <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/069f6b5280784a20b3fb5c84615ca6cf~tplv-k3u1fbpfcp-zoom-1.image" alt=""></li></ul><p>其实无论是第一种情况还是第二种情况都不太好，我们希望的是会直接显示一次 <code>杭州市体育馆</code> 的搜索结果。</p><p>那么如何去处理呢？我们可以简单的设置一个变量来标记最后一次请求，只有在当前接口请求的标记等于最新的标记时才把返回结果展示给用户。</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 每次调用 fetchData 方法，更新全局变量 this.lastFetchId 并赋值给内部变量 fetchId。
 * 每个 fetchData 方法内部逻辑，在接口成功返回后判断内部变量 fetchId 是否与全局变量
 * this.lastFetchId 是否相等，若相等才进行赋值，反之不改变数据。
 */</span>

<span class="token comment">// 全局变量，标记最新的请求 id，每次调用 fetchData 时更新</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>lastFetchId <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> 
<span class="token keyword">function</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> searchField<span class="token punctuation">,</span> params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> dataKey <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>
  	<span class="token keyword">const</span> <span class="token punctuation">[</span>data<span class="token punctuation">,</span> setData<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  	<span class="token keyword">const</span> <span class="token punctuation">[</span>fetching<span class="token punctuation">,</span> setFetching<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
    <span class="token keyword">this</span><span class="token punctuation">.</span>lastFetchId <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  	<span class="token comment">// 每个方法调用的内部变量 fetchId </span>
    <span class="token keyword">const</span> fetchId <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastFetchId<span class="token punctuation">;</span>

  	<span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  	<span class="token function">setFetching</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
    <span class="token keyword">const</span> postValue <span class="token operator">=</span> <span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>string<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span> <span class="token operator">?</span> value <span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
    params<span class="token punctuation">[</span>searchField<span class="token punctuation">]</span> <span class="token operator">=</span> postValue<span class="token punctuation">;</span>
  
    <span class="token function">request</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>post<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">data</span><span class="token operator">:</span> params<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span> success<span class="token punctuation">,</span> result <span class="token punctuation">}</span> <span class="token operator">=</span> res <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token comment">// 如果不是最新请求，那么不进行结果赋值</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>fetchId <span class="token operator">!==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastFetchId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>success <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">setData</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
  			<span class="token function">setFetching</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上例子可以看出防抖避免了误把一次操作认为多次操作，限制了事件执行的上限，即停止触发后 n 秒才去执行。同样的场景可能还有登录注册等表单提交操作用户点击过快触发多次请求、富文本编辑器邮件等编辑内容实时保存等。</p><h3 id="节流" tabindex="-1"><a class="header-anchor" href="#节流" aria-hidden="true">#</a> 节流</h3><p>节流，顾名思义，控制流量。用于用户在与页面交互时控制事件发生的频率，一般场景是单位的时间或其它间隔内定时执行操作。一段时间内，事件在每次到达我们规定的间隔 n 秒时触发一次。</p><p>特点：每等待某种间隔后，进行操作</p><ul><li>持续触发并不会执行多次</li><li>到一定时间 / 其它间隔 ( 如滑动的高度 )再去执行</li></ul><p>应用场景 ( 注：因以下例子涉及公司业务内容，不进行实际页面截图展示 )：</p><ul><li>埋点场景。商品搜索列表、商品橱窗等，用户滑动时 定时 / 定滑动的高度 发送埋点请求</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 不立即执行，在 n 秒后第一次执行事件，事件停止触发后会再执行一次</span>
<span class="token comment">// 假设设置的时间间隔为 1s，如果在第 6.8s 停止触发，那么在第 6s 时执行一次，</span>
<span class="token comment">// 第 7s 时会再继续执行最后一次</span>
<span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> timer<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>
   
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">sendData</span><span class="token punctuation">(</span><span class="token parameter">vaule</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// 调用接口发送数据</span>
<span class="token punctuation">}</span>
<span class="token function">throttle</span><span class="token punctuation">(</span>sendData<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如图，按照固定间隔发送埋点请求</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f10929f4f76849caa002d83c3f29eaef~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><ul><li>运维系统查看应用运行日志时，每 n 秒刷新一次</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 立即执行，在 n 秒后第一次执行事件，事件停止触发后会不会再执行</span>
<span class="token comment">// 特点：假设设置的时间间隔为 1s，如果在第 6.8s 停止触发，那么在第 6s 时执行最后一次，之后不会再执行</span>
<span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> previous <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 隐式转换</span>
        <span class="token keyword">var</span> now <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> previous <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> wait<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            previous <span class="token operator">=</span> now<span class="token punctuation">;</span>
            <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">fetchLogData</span><span class="token punctuation">(</span><span class="token parameter">vaule</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// 调用接口获取日志数据</span>
<span class="token punctuation">}</span>
<span class="token function">throttle</span><span class="token punctuation">(</span>fetchLogData<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如图，按照固定间隔拉取运行日志 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/44d6c041306047549e85ff7baaf2befc~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>以上例子可以看出节流控制事件触发的频率，同时限制了事件执行的上限和下限，即事件触发过程中每间隔 n 秒去执行。同样的场景可能还有 <code>scroll</code> <code>mousemove</code> 等更加频繁触发的事件、浏览器进度条位置计算、<code>input</code> 动态搜索等。</p><h3 id="lodash-防抖节流源码分析" tabindex="-1"><a class="header-anchor" href="#lodash-防抖节流源码分析" aria-hidden="true">#</a> Lodash 防抖节流源码分析</h3><p>上文介绍了防抖节流的基础实现和应用场景，便于我们理解和使用。而实际业务场景使用中，我们更多的会选择成熟的第三方库来达到防抖和节流的效果。目前常用的有 <code>Lodash</code>、<code>Underscore.js</code> 等，我们来分析下 <code>Lodash</code> 提供的防抖节流方法实现。</p><p>防抖：Lodash 实现防抖的核心思想在于不去频繁管理定时器，而是实现了 <code>shouldInvoke</code> 来判断是否应该执行 <code>func</code> 函数，只有在对外提供的 <code>cancel</code> 方法取消延迟时才取消定时器。</p><p>下文在函数执行模块详细介绍了 <code>shouldInvoke</code> 内部实现逻辑，在定时器开关和入口函数中调用来决定是否应该执行 <code>func</code> 函数。具体内容我们可以看下面对源代码的部分注解。我们拆解为四大模块来分析：基础定义、定时器开关、函数执行、对外回调。</p><p>基本定义 ( 含整体结构 )</p><p>以下是 <code>Lodash</code> 实现防抖的整体代码结构，入口函数定义了一些定时器相关和函数执行相关的变量。一共 10 个变量，其中 <code>maxWait、timerId、lastCallTime、lastInvokeTime、leading、maxing、trailing</code> 7 个时间相关的变量是实现定时器开关和函数执行模块的重要支撑。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> isObject from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token operator">/</span>isObject<span class="token punctuation">.</span>js<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> root from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span>internal<span class="token operator">/</span>root<span class="token punctuation">.</span>js<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token doc-comment comment">/** ======  基础定义 ====== */</span>
  
  <span class="token keyword">let</span> lastArgs<span class="token punctuation">,</span> <span class="token comment">// 上一次执行 debounced 的 arguments </span>
    lastThis<span class="token punctuation">,</span> <span class="token comment">// 上一次的 this </span>
    maxWait<span class="token punctuation">,</span> <span class="token comment">// 最大等待时间，保证大于设置的最大间隔后一定会执行，用于实现节流效果 </span>
    result<span class="token punctuation">,</span> <span class="token comment">// 函数 func 执行后的返回值 </span>
    timerId<span class="token punctuation">,</span> <span class="token comment">// 定时器 ID </span>
    lastCallTime <span class="token comment">// 上一次调用 debounce 的时间 </span>

  <span class="token keyword">let</span> lastInvokeTime <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// 上一次执行 func 的时间，用于实现节流效果 </span>
  <span class="token keyword">let</span> leading <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment">// 延迟前即第一次触发 </span>
  <span class="token keyword">let</span> maxing <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment">// 是否设置了最大等待时间 maxWait，多用于实现节流效果 </span>
  <span class="token keyword">let</span> trailing <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">// 延迟后即最后一次触发 </span>

  <span class="token comment">// Bypass \`requestAnimationFrame\` by explicitly setting \`wait=0\`.</span>
  <span class="token keyword">const</span> useRAF <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">!</span>wait <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> wait <span class="token operator">!==</span> <span class="token number">0</span> <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> <span class="token keyword">typeof</span> root<span class="token punctuation">.</span>requestAnimationFrame <span class="token operator">===</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token keyword">function</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> func <span class="token operator">!==</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token keyword">function</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>Expected a <span class="token keyword">function</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 隐式转换</span>
  wait <span class="token operator">=</span> <span class="token operator">+</span>wait <span class="token operator">||</span> <span class="token number">0</span>
  <span class="token doc-comment comment">/**
   * isObject 判断是否是一个对象
   * function isObject(value) <span class="token punctuation">{</span>
   *   const type = typeof value
   *   return value != null &amp;amp;&amp;amp; (type == &amp;#39;object&amp;#39; || type == &amp;#39;function&amp;#39;)
   * <span class="token punctuation">}</span>
  */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    leading <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>options<span class="token punctuation">.</span>leading
    maxing <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>maxWait<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span> <span class="token keyword">in</span> options
    <span class="token comment">// maxWait 取 maxWait 和 wait 中最大值，为实现节流效果，需保证 maxWait 的实际值大于 wait </span>
    maxWait <span class="token operator">=</span> maxing <span class="token operator">?</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">+</span>options<span class="token punctuation">.</span>maxWait <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span> <span class="token operator">:</span> maxWait
    trailing <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>trailing<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span> <span class="token keyword">in</span> options <span class="token operator">?</span> <span class="token operator">!</span><span class="token operator">!</span>options<span class="token punctuation">.</span>trailing <span class="token operator">:</span> trailing
  <span class="token punctuation">}</span>


	<span class="token doc-comment comment">/** ======  定时器开关 ====== */</span>
  
  <span class="token comment">// 设置定时器</span>
  <span class="token keyword">function</span> <span class="token function">startTimer</span><span class="token punctuation">(</span><span class="token parameter">pendingFunc<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token comment">// 取消定时器</span>
  <span class="token keyword">function</span> <span class="token function">cancelTimer</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token comment">// 计算仍需等待的时间</span>
  <span class="token keyword">function</span> <span class="token function">remainingWait</span><span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token comment">// 定时器回调</span>
  <span class="token keyword">function</span> <span class="token function">timerExpired</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  
  
  <span class="token doc-comment comment">/** ======  函数执行 ====== */</span>
  
  <span class="token comment">// 延迟前</span>
  <span class="token keyword">function</span> <span class="token function">leadingEdge</span><span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token comment">// 延迟后回调</span>
  <span class="token keyword">function</span> <span class="token function">trailingEdge</span><span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  
  <span class="token comment">// 执行 func 函数</span>
  <span class="token keyword">function</span> <span class="token function">invokeFunc</span><span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  
  <span class="token comment">// 判断此时是否应该执行 func 函数</span>
  <span class="token keyword">function</span> <span class="token function">shouldInvoke</span><span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  

  <span class="token doc-comment comment">/** ======  对外回调 ====== */</span>
  
  <span class="token comment">// 取消延迟</span>
  <span class="token keyword">function</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token comment">// 立即调用</span>
  <span class="token keyword">function</span> <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token comment">// 判断是否在定时中</span>
  <span class="token keyword">function</span> <span class="token function">pending</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token comment">// 入口函数</span>
  <span class="token keyword">function</span> <span class="token function">debounced</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  debounced<span class="token punctuation">.</span>cancel <span class="token operator">=</span> cancel
  debounced<span class="token punctuation">.</span>flush <span class="token operator">=</span> flush
  debounced<span class="token punctuation">.</span>pending <span class="token operator">=</span> pending
  <span class="token keyword">return</span> debounced
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> debounce
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定时器开关</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>	<span class="token doc-comment comment">/** ======  定时器开关 ====== */</span>
  
  <span class="token comment">// 设置定时器</span>
  <span class="token keyword">function</span> <span class="token function">startTimer</span><span class="token punctuation">(</span><span class="token parameter">pendingFunc<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>useRAF<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 没设置 wait 或设置 wait 为 0 时调用 window.requestAnimationFrame()。</span>
      <span class="token comment">// 要求浏览器在下次重绘之前调用指定的回调函数更新动画</span>
      root<span class="token punctuation">.</span><span class="token function">cancelAnimationFrame</span><span class="token punctuation">(</span>timerId<span class="token punctuation">)</span>
      <span class="token keyword">return</span> root<span class="token punctuation">.</span><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>pendingFunc<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>pendingFunc<span class="token punctuation">,</span> wait<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 取消定时器</span>
  <span class="token keyword">function</span> <span class="token function">cancelTimer</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>useRAF<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> root<span class="token punctuation">.</span><span class="token function">cancelAnimationFrame</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 计算仍需等待的时间</span>
  <span class="token keyword">function</span> <span class="token function">remainingWait</span><span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 当前时间与上一次调用 debounce 的间隔</span>
    <span class="token keyword">const</span> timeSinceLastCall <span class="token operator">=</span> time <span class="token operator">-</span> lastCallTime
    <span class="token comment">// 当前时间与上一次执行 func 的间隔</span>
    <span class="token keyword">const</span> timeSinceLastInvoke <span class="token operator">=</span> time <span class="token operator">-</span> lastInvokeTime
    <span class="token comment">// 剩余等待时间</span>
    <span class="token keyword">const</span> timeWaiting <span class="token operator">=</span> wait <span class="token operator">-</span> timeSinceLastCall

    <span class="token comment">// 是否设置了最大等待时间 ( 是否设置为节流 )</span>
    <span class="token comment">// 否：剩余等待时间</span>
    <span class="token comment">// 是：剩余等待时间 和 当前时间与上一次执行 func 的间隔 中的最小值</span>
      
    <span class="token keyword">return</span> maxing
      <span class="token operator">?</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>timeWaiting<span class="token punctuation">,</span> maxWait <span class="token operator">-</span> timeSinceLastInvoke<span class="token punctuation">)</span>
      <span class="token operator">:</span> timeWaiting
  <span class="token punctuation">}</span>

  <span class="token comment">// 定时器回调</span>
  <span class="token keyword">function</span> <span class="token function">timerExpired</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> time <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// 应该执行 func 函数时，执行延迟后回调</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldInvoke</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">trailingEdge</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 计算仍需等待的时间，重置定时器</span>
    timerId <span class="token operator">=</span> <span class="token function">startTimer</span><span class="token punctuation">(</span>timerExpired<span class="token punctuation">,</span> <span class="token function">remainingWait</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数执行</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token doc-comment comment">/** ======  函数执行 ====== */</span>
  
  <span class="token comment">// 延迟前</span>
  <span class="token keyword">function</span> <span class="token function">leadingEdge</span><span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 设置上次执行 func 函数的时间</span>
    lastInvokeTime <span class="token operator">=</span> time
    <span class="token comment">// 设置定时器</span>
    timerId <span class="token operator">=</span> <span class="token function">startTimer</span><span class="token punctuation">(</span>timerExpired<span class="token punctuation">,</span> wait<span class="token punctuation">)</span>
    <span class="token comment">// 如果设置了 leading 则立即执行 func 函数一次</span>
    <span class="token keyword">return</span> leading <span class="token operator">?</span> <span class="token function">invokeFunc</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span> <span class="token operator">:</span> result
  <span class="token punctuation">}</span>

  <span class="token comment">// 延迟后回调</span>
  <span class="token keyword">function</span> <span class="token function">trailingEdge</span><span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    timerId <span class="token operator">=</span> <span class="token keyword">undefined</span>

    <span class="token comment">// trailing 延迟后继续触发一次 </span>
    <span class="token comment">// lastArgs 标记着 debounce 至少执行过一次</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>trailing <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> lastArgs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">invokeFunc</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 重置参数</span>
    lastArgs <span class="token operator">=</span> lastThis <span class="token operator">=</span> <span class="token keyword">undefined</span>
    <span class="token keyword">return</span> result
  <span class="token punctuation">}</span>
  
  <span class="token comment">// 执行 func 函数</span>
  <span class="token keyword">function</span> <span class="token function">invokeFunc</span><span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> args <span class="token operator">=</span> lastArgs
    <span class="token keyword">const</span> thisArg <span class="token operator">=</span> lastThis

    lastArgs <span class="token operator">=</span> lastThis <span class="token operator">=</span> <span class="token keyword">undefined</span>
    lastInvokeTime <span class="token operator">=</span> time
    result <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
    <span class="token keyword">return</span> result
  <span class="token punctuation">}</span>
  
  <span class="token comment">// 判断此时是否应该执行 func 函数</span>
  <span class="token keyword">function</span> <span class="token function">shouldInvoke</span><span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 当前时间与上一次调用 debounce 的间隔</span>
    <span class="token keyword">const</span> timeSinceLastCall <span class="token operator">=</span> time <span class="token operator">-</span> lastCallTime
    <span class="token comment">// 当前时间与上一次执行 func 的间隔</span>
    <span class="token keyword">const</span> timeSinceLastInvoke <span class="token operator">=</span> time <span class="token operator">-</span> lastInvokeTime

    <span class="token comment">// 首次调用</span>
    <span class="token comment">// 超出等待时间间隔 wait</span>
    <span class="token comment">// 系统时间发生了变更</span>
    <span class="token comment">// 超出最长等待时间 maxWait</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>lastCallTime <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">||</span> <span class="token punctuation">(</span>timeSinceLastCall <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token operator">=</span> wait<span class="token punctuation">)</span> <span class="token operator">||</span>
      <span class="token punctuation">(</span>timeSinceLastCall <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>maxing <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> timeSinceLastInvoke <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token operator">=</span> maxWait<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对外回调</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token doc-comment comment">/** ======  对外回调 ====== */</span>

  <span class="token comment">// 取消延迟</span>
  <span class="token keyword">function</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 取消定时器</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>timerId <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">cancelTimer</span><span class="token punctuation">(</span>timerId<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 重置参数</span>
    lastInvokeTime <span class="token operator">=</span> <span class="token number">0</span>
    lastArgs <span class="token operator">=</span> lastCallTime <span class="token operator">=</span> lastThis <span class="token operator">=</span> timerId <span class="token operator">=</span> <span class="token keyword">undefined</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 立即调用</span>
  <span class="token keyword">function</span> <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> timerId <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> result <span class="token operator">:</span> <span class="token function">trailingEdge</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 判断是否在定时中</span>
  <span class="token keyword">function</span> <span class="token function">pending</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> timerId <span class="token operator">!==</span> <span class="token keyword">undefined</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>节流：Lodash 中节流函数的实现简洁，直接调用防抖函数，通过设置入参的 <code>maxWait</code> 达到节流效果。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> leading <span class="token operator">=</span> <span class="token boolean">true</span>
  <span class="token keyword">let</span> trailing <span class="token operator">=</span> <span class="token boolean">true</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> func <span class="token operator">!==</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token keyword">function</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>Expected a <span class="token keyword">function</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    leading <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>leading<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span> <span class="token keyword">in</span> options <span class="token operator">?</span> <span class="token operator">!</span><span class="token operator">!</span>options<span class="token punctuation">.</span>leading <span class="token operator">:</span> leading
    trailing <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>trailing<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span> <span class="token keyword">in</span> options <span class="token operator">?</span> <span class="token operator">!</span><span class="token operator">!</span>options<span class="token punctuation">.</span>trailing <span class="token operator">:</span> trailing
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token function">debounce</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> wait<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    leading<span class="token punctuation">,</span>
    trailing<span class="token punctuation">,</span>
    <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>maxWait<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token operator">:</span> wait
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> throttle
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上是对 <code>Lodash</code> 防抖和节流实现的简要分析，实际业务场景中一般直接使用其提供的防抖节流方法即可。如果需要更多定制化的功能其可能未实现或者不支持配置的，可以考虑结合对其源码的理解自行实现，以满足实际业务需求。</p><h3 id="防抖和节流区别-根据实际业务场景去使用哪一个" tabindex="-1"><a class="header-anchor" href="#防抖和节流区别-根据实际业务场景去使用哪一个" aria-hidden="true">#</a> 防抖和节流区别，根据实际业务场景去使用哪一个</h3>`,50),m={href:"http://demo.nimius.net/debounce_throttle/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://zhuanlan.zhihu.com/p/38313717",target:"_blank",rel:"noopener noreferrer"},b=n("p",null,"防抖可能用于无法预知的用户主动行为，如用户输入内容去服务端动态搜索结果。用户打字的速度等是无法预知的，具有非规律性。",-1),f=n("p",null,"节流可能用于一些非用户主动行为或者可预知的用户主动行为，如用户滑动商品橱窗时发送埋点请求、滑动固定的高度是已知的逻辑，具有规律性。",-1),h=n("h2",{id:"总结",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#总结","aria-hidden":"true"},"#"),s(" 总结")],-1),w=n("p",null,"借用防抖和节流的思想，来控制函数执行的时机，可以节约性能，避免页面卡顿等带来不好的用户体验。防抖和节流的概念相似不易区分，文中上述内容已经从笔者自己对防抖和节流理解的角度进行了介绍。",-1),g=n("p",null,"而初识者可能会在《JavaScript 高级程序设计》或者其它笔者的技术文章中看到不同的理解和介绍，可能会看到 《JavaScript 高级程序设计》中的 throttle 其实是 debounce、动态搜索应该用防抖和实时搜索应该用节流等不同的观点和论据。希望大家能在有自己对防抖和节流的理解后，根据实际的应用场景和需求细节去决定使用防抖和节流，选用更合理更合适的方法。",-1),y=n("h2",{id:"参考文献",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考文献","aria-hidden":"true"},"#"),s(" 参考文献")],-1),_={href:"https://zhuanlan.zhihu.com/p/38313717",target:"_blank",rel:"noopener noreferrer"},j={href:"https://juejin.cn/post/6844903982297513991",target:"_blank",rel:"noopener noreferrer"},x={href:"https://zhuanlan.zhihu.com/p/72923073",target:"_blank",rel:"noopener noreferrer"},I={href:"https://github.com/mqyqingfeng/Blog/issues/22",target:"_blank",rel:"noopener noreferrer"},T={href:"https://github.com/mqyqingfeng/Blog/issues/26",target:"_blank",rel:"noopener noreferrer"},F={href:"https://cloud.tencent.com/developer/article/1460880",target:"_blank",rel:"noopener noreferrer"},A=n("h2",{id:"推荐阅读",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#推荐阅读","aria-hidden":"true"},"#"),s(" 推荐阅读")],-1),L={href:"https://juejin.cn/post/7002746459456176158",target:"_blank",rel:"noopener noreferrer"},z={href:"https://juejin.cn/post/6997536906967777316",target:"_blank",rel:"noopener noreferrer"},W={href:"https://juejin.cn/post/7005334860529156109",target:"_blank",rel:"noopener noreferrer"},D={href:"https://juejin.cn/post/6987140782595506189",target:"_blank",rel:"noopener noreferrer"},S=n("h2",{id:"开源作品",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#开源作品","aria-hidden":"true"},"#"),s(" 开源作品")],-1),E=n("ul",null,[n("li",null,"政采云前端小报")],-1),C={href:"https://www.zoo.team/openweekly/",target:"_blank",rel:"noopener noreferrer"},q=n("ul",null,[n("li",null,"skuDemo")],-1),B={href:"https://github.com/zcy-inc/skuPathFinder-back",target:"_blank",rel:"noopener noreferrer"},O=n("h2",{id:"招贤纳士",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#招贤纳士","aria-hidden":"true"},"#"),s(" 招贤纳士")],-1),V=n("p",null,"政采云前端团队（ZooTeam），一个年轻富有激情和创造力的前端团队，隶属于政采云产品研发部，Base 在风景如画的杭州。团队现有 50 余个前端小伙伴，平均年龄 27 岁，近 3 成是全栈工程师，妥妥的青年风暴团。成员构成既有来自于阿里、网易的“老”兵，也有浙大、中科大、杭电等校的应届新人。团队在日常的业务对接之外，还在物料体系、工程平台、搭建平台、性能体验、云端应用、数据分析及可视化等方向进行技术探索和实战，推动并落地了一系列的内部技术产品，持续探索前端技术体系的新边界。",-1),U=n("p",null,[s("如果你想改变一直被事折腾，希望开始能折腾事；如果你想改变一直被告诫需要多些想法，却无从破局；如果你想改变你有能力去做成那个结果，却不需要你；如果你想改变你想做成的事需要一个团队去支撑，但没你带人的位置；如果你想改变既定的节奏，将会是“5 年工作时间 3 年工作经验”；如果你想改变本来悟性不错，但总是有那一层窗户纸的模糊… 如果你相信相信的力量，相信平凡人能成就非凡事，相信能遇到更好的自己。如果你希望参与到随着业务腾飞的过程，亲手推动一个有着深入的业务理解、完善的技术体系、技术创造价值、影响力外溢的前端团队的成长历程，我觉得我们该聊聊。任何时间，等着你写点什么，发给 "),n("code",null,"ZooTeam@cai-inc.com")],-1),J=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/98d3aa3d1f8646a8bcda8cfd9e335a4b~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1);function N(M,R){const a=i("ExternalLinkIcon");return e(),o("div",null,[u,r,n("p",null,[s("> 这是第 117 篇不掺水的原创，想获取更多原创好文，请搜索公众号关注我们吧~ 本文首发于政采云前端博客："),n("a",k,[s("防抖节流场景及应用"),t(a)])]),d,n("p",null,[s("可视化比较，"),n("a",m,[s("在线查看"),t(a)]),s(" ( 注：取自"),n("a",v,[s("司徒正美 - 函数防抖与函数节流"),t(a)]),s(" )")]),b,f,h,w,g,y,n("p",null,[n("a",_,[s("司徒正美 - 函数防抖与函数节流"),t(a)])]),n("p",null,[n("a",j,[s("lodash防抖节流源码理解"),t(a)])]),n("p",null,[n("a",x,[s("函数的防抖和节流是个啥？？？"),t(a)])]),n("p",null,[n("a",I,[s("JavaScript 专题之跟着 underscore 学防抖"),t(a)])]),n("p",null,[n("a",T,[s("JavaScript 专题之跟着 underscore 学节流"),t(a)])]),n("p",null,[n("a",F,[s("Lodash 防抖和节流是如何实现的"),t(a)])]),A,n("p",null,[n("a",L,[s("电商最小存货 - SKU 和 算法实现"),t(a)])]),n("p",null,[n("a",z,[s("你需要知道的项目管理知识"),t(a)])]),n("p",null,[n("a",W,[s("如何从 0 到 1 搭建代码全局检索系统"),t(a)])]),n("p",null,[n("a",D,[s("如何搭建适合自己团队的构建部署平台"),t(a)])]),S,E,n("p",null,[n("strong",null,[s("开源地址 "),n("a",C,[s("www.zoo.team/openweekly/"),t(a)])]),s(" (小报官网首页有微信交流群)")]),q,n("p",null,[n("strong",null,[s("开源地址 "),n("a",B,[s("https://github.com/zcy-inc/skuPathFinder-back/"),t(a)])])]),O,V,U,J])}const P=p(l,[["render",N],["__file","防抖节流场景及应用.html.vue"]]);export{P as default};
