import{_ as p,z as o,A as l,Y as n,C as s,U as t,a6 as e,Q as c}from"./framework-cb9358d9.js";const i={},r=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d4eb6a01e6564840817b127265b07edd~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1),u=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/321a5db4a0d54338ada6e0ce6b40c1b9~tplv-k3u1fbpfcp-watermark.image?",alt:"心火.png"})],-1),d={href:"https://zoo.team/article/flutter-web",target:"_blank",rel:"noopener noreferrer"},k=e('<h1 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h1><p>要问现在最火的移动端的框架是什么，每个人心中自有自己的答案。不过就笔者人而言，前端开发所做的更多是在显卡上绘制每一个像素的艺术。从这一出发点来看，Flutter 基于浏览器上的 DOM 树、安卓的 View、IOS 的 UIVeiw，从底层的自建渲染引擎来构建我们的应用 UI，并提供相关接口。目前 Flutter 关注度还是比较高的，Flutter 的热度已经超越⽼牌跨平台框架 React Native。不过吹捧了那么多，可能就会有小伙伴们要问了，Flutter 到底是个什么东西。接下来我们就一起来认识它。</p><h1 id="flutter-原理简介" tabindex="-1"><a class="header-anchor" href="#flutter-原理简介" aria-hidden="true">#</a> Flutter 原理简介</h1><p>Flutter 是由 Google 推出的开源的高性能跨平台框架，一个 2D 渲染引擎。在 Flutter中，Widget 是 Flutter 用户界面的基本构成单元，可以说一切皆 Widget。下面来看下 Flutter 框架的整体结构组成。</p><p>Flutter 框架的设计如下所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fa254afd5e1443468e5b785c60e84bfb~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>​ Flutter 框架是一个分层的结构，每个层都建立在前一层之上。</p><ul><li><p><strong>Framework</strong>（框架层）：这是一个纯 Dart 实现的 SDK；</p><p>【Foundation】在最底层，主要定义给其他层使用的底层工具类和方法。</p><p>【Animation】是动画相关的类。</p><p>【Painting】封装了 Flutter Engine 提供的绘制接口，例如绘制缩放图像、插值生成阴影、绘制盒模型边框等。</p><p>【Gesture】提供处理手势识别和交互的功能。</p><p>【Rendering】是框架中的渲染库。</p><p>【Widgets 】是 Flutter 提供的的一套基础组件库。Material 和 Cupertino 是两种视觉风格的组件库。</p></li></ul><ul><li><strong>Engine（<strong>引擎层</strong>）</strong>：是 Flutter 的核心，这是一个纯 C++ 实现的 SDK，其中包括了 Skia 引擎、Dart 运行时、文字排版引擎等。在代码调用 dart:ui 库时，调用最终会走到 Engine 层，然后实现真正的绘制逻辑。</li><li><strong>Embedder（嵌入层</strong>）：主要是将 Flutter 引擎 “安装” 到特定平台上，做好这一层的适配 Flutter 基本可以嵌入到任何平台上去。</li></ul><p>Flutter 在移动端的实践中，目前来说已经有很成熟的业界方案了，但是 Flutter 在 web 的环境里面的应用还是有所欠缺的。今天我们先来研究下 Flutter 构建 web 程序的相关技术栈。</p><h1 id="用于-web-支持的两个方案" tabindex="-1"><a class="header-anchor" href="#用于-web-支持的两个方案" aria-hidden="true">#</a> 用于 Web 支持的两个方案</h1><p>其实，最早在 2018 Flutter 1.0 的时候，Flutter 的产品经理 Tim Sneath 就推出了 Flutter Web。Flutter Web 想在单代码库的情况下，让 Flutter 应用拥有 Web 支持。开发者可以使用 Dart 编写应用并部署到任意的 Web 服务器上，或嵌入到浏览器中。甚至其他的 IOS、安卓、windows 设备，开发者都可以使用 Flutter 所具有的特性，也不需要特殊的浏览器插件支持。在 Flutter Web 的设计之初，主要考虑了两个方案用于 Web 支持:</p>',12),m=n("li",null,[n("strong",null,"HTML + CSS + Canvas")],-1),b=n("strong",null,"CSS Paint API",-1),v={href:"https://zhuanlan.zhihu.com/p/39931190",target:"_blank",rel:"noopener noreferrer"},h=n("strong",null,"优缺点：",-1),f=n("p",null,"方案 1：具有最好的兼容性，它优先考虑 HTML + CSS 表达，当 HTML + CSS 无法表达图片的时候，会使用 Canvas 来绘制。但 2D Canvas 在浏览器中是位图表示，会造成像素化下的性能问题。",-1),_={href:"https://developer.mozilla.org/zh-CN/docs/Web/Guide/Houdini",target:"_blank",rel:"noopener noreferrer"},g={href:"https://developer.mozilla.org/zh-CN/docs/Web/Guide/Houdini",target:"_blank",rel:"noopener noreferrer"},j=n("h1",{id:"flutter-for-web-的两种编译器",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#flutter-for-web-的两种编译器","aria-hidden":"true"},"#"),s(" Flutter for Web 的两种编译器")],-1),F=n("p",null,"Flutter 官方给我们提供了 dart2js 和 dartdevc 两个编译器，我们不仅可以将代码直接运行在 chrome 浏览器，也可以将 Flutter 代码编译为 js 文件部署在服务端。",-1),w=n("h2",{id:"_1、dart2js-编译器",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1、dart2js-编译器","aria-hidden":"true"},"#"),s(" 1、dart2js 编译器")],-1),S=n("code",null,"flutter run build",-1),y=n("code",null,".dill",-1),C=n("code",null,".dill",-1),W={href:"http://caibaojian.com/ast.html",target:"_blank",rel:"noopener noreferrer"},x=e('<p>在构建过程中 Flutter_tools 首先会将传入的参数进行组装，然后调用 <code>dart2jsSnapshot</code>。进行 dart 文件编译，生成 Weget 树的二进制文件的 <code>.dill</code> 文件，这个代码的位置在 <code>dart-sdk/html/dart2js/html_dart2js.dart</code> 路径下（对应版本：Flutter 2.5.3 Tools • Dart 2.14.4）。</p><p><code>dart2jsSnapshot</code> 是一个专门为 web 平台转换做的解释器，类似于 Flutter Web_sdk。只不过 Flutter Web_sdk 的源码更多的是在调试时候做 debugger，效率很低。在 build 的时候，显然利用快照的方式比较合理。</p><p>dart2js 编译流程：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/849eb396a9b845e088c7644597efa9d4~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>dart2js 调用的快照文件示例图：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/66a5c640b84c4f178943a7c7d70d3a30~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><h3 id="如何生成-web-端代码" tabindex="-1"><a class="header-anchor" href="#如何生成-web-端代码" aria-hidden="true">#</a> 如何生成 web 端代码</h3>',7),z={href:"https://dart.dev/tools/dart2js",target:"_blank",rel:"noopener noreferrer"},T=n("p",null,"我们再来看下 build 之后的生成目录：",-1),D=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eaafed6d08384ee09fe4b6ccbccde396~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1),I=n("p",null,[s("通过上面的介绍，我们知道整个转换流程中承上启下的关键产物就是 "),n("code",null,".dill"),s(" 文件。那么他是如何通过代码生成的呢？")],-1),M={href:"https://github.com/flutter/flutter/tree/master/packages/flutter_tools",target:"_blank",rel:"noopener noreferrer"},E=n("code",null,"dart2jsSnapshot",-1),P=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">--</span>libraries<span class="token operator">-</span>spec<span class="token operator">=</span><span class="token operator">/</span>Users<span class="token operator">/</span>beike<span class="token operator">/</span>Flutter<span class="token operator">/</span>bin<span class="token operator">/</span>cache<span class="token operator">/</span>Flutter Web_sdk<span class="token operator">/</span>libraries<span class="token punctuation">.</span>json 
<span class="token operator">--</span>native<span class="token operator">-</span><span class="token keyword">null</span><span class="token operator">-</span>assertions
<span class="token operator">-</span>Ddart<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>product<span class="token operator">=</span><span class="token boolean">true</span> 
<span class="token operator">-</span>DFlutter Web_AUTO_DETECT<span class="token operator">=</span><span class="token boolean">true</span> 
<span class="token operator">--</span>no<span class="token operator">-</span>source<span class="token operator">-</span>maps <span class="token comment">// 是否生成sourcemap的选项；</span>
<span class="token operator">-</span><span class="token constant">O1</span> 
<span class="token operator">-</span>o 
<span class="token operator">--</span>cfe<span class="token operator">-</span>only <span class="token comment">// 代表只完成前端编译，生成kernel文件后就不继续下面的后端编译流程。</span>
<span class="token operator">/</span>Users<span class="token operator">/</span>beike<span class="token operator">/</span>path_to_js<span class="token operator">/</span>main<span class="token punctuation">.</span>dart<span class="token punctuation">.</span>js 
<span class="token operator">/</span>Users<span class="token operator">/</span>beike<span class="token operator">/</span>path_to_dill<span class="token operator">/</span>app<span class="token punctuation">.</span>dill
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 O1 代表优化等级，dart2js 支持 O0 - O4 共 5 种优化，O4 的优化程度最高。通过优化可以减少产物的大小并且优化代码的性能。</p><p>Dart2js 的后端编译主要包括以下代码:</p><ol><li>首先，编译器会将传入的 <code>.dill</code> 通过 BinaryBuilder 加载到 Component 中并存储在 KernelResult 中；</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> KernelResult result <span class="token operator">=</span> <span class="token keyword">await</span> kernelLoader<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li><code>computeClosedWorld()</code> 方法会将第一步解析出来的所有 Library 解析成 JsClosedWorld。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> JsClosedWorld closedWorld <span class="token operator">=</span> selfTask<span class="token punctuation">.</span><span class="token function">measureSubtask</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>computeClosedWorld<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token function">computeClosedWorld</span><span class="token punctuation">(</span>rootLibraryUri<span class="token punctuation">,</span> libraries<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​ JsClosedWorld 代表了通过 closed-world 语义编译之后的代码。它的结构如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token keyword">class</span> <span class="token class-name">JsClosedWorld</span> <span class="token keyword">implements</span> <span class="token class-name">JClosedWorld</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">const</span> String tag <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>closed<span class="token operator">-</span>world<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
    @override final NativeData nativeData<span class="token punctuation">;</span>
    @override final InterceptorData interceptorData<span class="token punctuation">;</span>
    @override final BackendUsage backendUsage<span class="token punctuation">;</span>
    @override final NoSuchMethodData noSuchMethodData<span class="token punctuation">;</span>
    FunctionSet _allFunctions<span class="token punctuation">;</span>
    final Map<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>classentity<span class="token punctuation">,</span> Set<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> mixinUses<span class="token punctuation">;</span>
          Map<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>classentity<span class="token punctuation">,</span> List<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> _liveMixinUses<span class="token punctuation">;</span>
    final Map<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>classentity<span class="token punctuation">,</span> Set<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> typesImplementedBySubclasses<span class="token punctuation">;</span> 
    final Map<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>classentity<span class="token punctuation">,</span> Map<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> _subtypeCoveredByCache <span class="token operator">=</span> <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>classentity<span class="token punctuation">,</span> Map<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// TODO(johnniwinther): Can this be derived from [ClassSet]s? </span>
    final Set implementedClasses<span class="token punctuation">;</span>
    final Set liveInstanceMembers<span class="token punctuation">;</span>
    <span class="token comment">// Members that are written either directly or through a setter selector.</span>
    final Set assignedInstanceMembers<span class="token punctuation">;</span>    
    @override final Set liveNativeClasses<span class="token punctuation">;</span>
    @override final Set processedMembers<span class="token punctuation">;</span>
    <span class="token operator">...</span>
  <span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>然后，使用<code> JsClosedWorld()</code> 方法进行代码优化，包括下面代码中的 <code>performGlobalTypeInference()</code> 方法。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> GlobalTypeInferenceResults globalInferenceResults <span class="token operator">=</span> <span class="token function">performGlobalTypeInference</span><span class="token punctuation">(</span>closedWorld<span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li>最终，<code>generateJavaScriptCode()</code> 方法会将上边返回的结果通过 JSBuilder 生成最终的 js AST 也就是 <code>.dill </code>文件。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token function">generateJavaScriptCode</span><span class="token punctuation">(</span>globalInferenceResults<span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_2、dartdevc-编译器" tabindex="-1"><a class="header-anchor" href="#_2、dartdevc-编译器" aria-hidden="true">#</a> 2、dartdevc 编译器</h2><p>在 dartdevc 我们不仅可以将代码直接运行在 chrome 浏览器，也可以将 flutter 代码编译为 js 文件部署在服务端。如果代码运行在 chrome 浏览器，flutter_tools 会使用 dartdevc 编译器进行编，如下图：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8cbc4d7f89884506947c3425c6776c1f~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>dartdevc 是支持增量编译的，开发者可以像调试 Flutter Mobile 代码一样使用 hot reload 来提升调试效率。Flutter for Web 调试也是非常方便的，编译后的代码是默认支持 source map ，当运行在 web 浏览器时，开发者是不用关心生成的 js 代码是怎样的。</p>`,17),A={href:"https://gitee.com/suckson/flutter-web-test",target:"_blank",rel:"noopener noreferrer"},O=e(`<p>关键代码部分：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token class-name">Scaffold</span><span class="token punctuation">(</span>
    appBar<span class="token punctuation">:</span> <span class="token class-name">AppBar</span><span class="token punctuation">(</span>
      title<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>widget<span class="token punctuation">.</span>title<span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
    body<span class="token punctuation">:</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>
      child<span class="token punctuation">:</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>
        mainAxisAlignment<span class="token punctuation">:</span> <span class="token class-name">MainAxisAlignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>
        children<span class="token punctuation">:</span> <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">Widget</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">[</span>
          <span class="token class-name">Container</span><span class="token punctuation">(</span>
            width<span class="token punctuation">:</span> <span class="token number">250</span><span class="token punctuation">,</span>
            height<span class="token punctuation">:</span> <span class="token number">250</span><span class="token punctuation">,</span>
            color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>orange<span class="token punctuation">,</span>
            child<span class="token punctuation">:</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>
              child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token number">6</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>fontSize<span class="token punctuation">:</span> <span class="token number">200.0</span><span class="token punctuation">,</span> color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>green<span class="token punctuation">,</span> fontWeight<span class="token punctuation">:</span> <span class="token class-name">FontWeight</span><span class="token punctuation">.</span>bold<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token punctuation">)</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// This trailing comma makes auto-formatting nicer for build methods.</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> c <span class="token punctuation">{</span>
  <span class="token keyword">void</span> <span class="token function">drawRect</span><span class="token punctuation">(</span><span class="token class-name">Rect</span> rect<span class="token punctuation">,</span> <span class="token class-name">Paint</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name"><span class="token namespace">html<span class="token punctuation">.</span></span>HtmlElement_drawRect</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">ui<span class="token punctuation">.</span></span>Offset</span> p<span class="token punctuation">,</span> <span class="token class-name">SurfacePaintData</span> paint<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token punctuation">[</span>省略部分代码<span class="token punctuation">]</span>
  <span class="token class-name">Element</span> <span class="token operator">=</span> <span class="token function">_drawRect</span><span class="token punctuation">(</span>paint<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 绘制，</span>
 <span class="token punctuation">[</span>省略部分代码<span class="token punctuation">]</span>
 <span class="token keyword">final</span> <span class="token class-name">String</span> cssTransform <span class="token operator">=</span> <span class="token function">float64ListToCssTransform</span><span class="token punctuation">(</span>
 <span class="token function">transformWithOffset</span><span class="token punctuation">(</span>_canvasPool<span class="token punctuation">.</span>currentTransform<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">.</span>storage<span class="token punctuation">)</span><span class="token punctuation">;</span>
 imgElement<span class="token punctuation">.</span>style
 <span class="token punctuation">.</span><span class="token punctuation">.</span>transformOrigin <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span>transform <span class="token operator">=</span> cssTransform 
 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">removeProperty</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>width<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">removeProperty</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>height<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 rootElement<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>imgElement<span class="token punctuation">)</span><span class="token punctuation">;</span>
 _children<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>imgElement<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> imgElement<span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当调度任务调用到 drawRect() 方法之后，drawRect() 方法中会创建 canvas 元素，并且将 dart 的绘制逻辑重新实现一遍，最终将 Element 添加到 rootElement，也就是当前的 flt-canvas 元素中。生成的 html 如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/97adf17693a54ca192dd90fe80fa3d1f~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><h1 id="flutter-总结展望" tabindex="-1"><a class="header-anchor" href="#flutter-总结展望" aria-hidden="true">#</a> Flutter 总结展望</h1><p>dart2js 和 dartdevc 本质上是一件事情，但这两种编译器是应用在不同场景。在开发应用程序时选择 dartdevc，它支持增量编译，因此你可以快速查看编辑结果。在构建要部署的应用程序时，选用 dart2js，它使用摇树等技术来生成优化的且精简的代码。</p><p>dart2js 提供了更快的编译时间，并且编译后的运行效果与之前相比更加一致、完整，更重要的是，输出的代码更加整洁。Dart 团队正在努力使 dart2js 编译后的代码比手写 JS 更快地运行。</p><p>通过以上的简单分析，我们发现通过 Flutter 的编译，重写了大量的绘制的 Class，这对于前端开发来说可能提供了一个新的思路。当然本次有些地方还是很粗略的分析。只是初步介绍了 Flutter 打包构建流程，并没有给出完整的思路。后面会继续努力，将在后续的文章中与大家分享。希望随着 Flutter 社区方案的愈加完善，利用 Flutter 技术栈上线的 web 产品也会越来越多。</p><h1 id="引用" tabindex="-1"><a class="header-anchor" href="#引用" aria-hidden="true">#</a> 引用</h1>`,10),B={href:"https://zhuanlan.zhihu.com/p/135969091",target:"_blank",rel:"noopener noreferrer"},R={href:"https://zhuanlan.zhihu.com/p/39931190",target:"_blank",rel:"noopener noreferrer"},U={href:"https://www.zhihu.com/question/323439136/answer/850516697?ivk_sa=1024320u",target:"_blank",rel:"noopener noreferrer"},J={href:"https://dart.dev/get-dart",target:"_blank",rel:"noopener noreferrer"},L=n("h2",{id:"推荐阅读",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#推荐阅读","aria-hidden":"true"},"#"),s(" 推荐阅读")],-1),N=n("p",null,'[在 Vue 中为什么不推荐用 index 做 key](https://juejin.cn/post/7026119446162997261 "在 Vue 中为什么不推荐用 index 做 key")',-1),H=n("p",null,'[浅析Web录屏技术方案与实现](https://juejin.cn/post/7028723258019020836 "浅析Web录屏技术方案与实现")',-1),V=n("h2",{id:"开源作品",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#开源作品","aria-hidden":"true"},"#"),s(" 开源作品")],-1),G=n("ul",null,[n("li",null,"政采云前端小报")],-1),q={href:"https://www.zoo.team/openweekly/",target:"_blank",rel:"noopener noreferrer"},K=n("ul",null,[n("li",null,"商品选择 sku 插件")],-1),Z={href:"https://github.com/zcy-inc/skuPathFinder-back",target:"_blank",rel:"noopener noreferrer"},Q=n("h2",{id:"招贤纳士",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#招贤纳士","aria-hidden":"true"},"#"),s(" 招贤纳士")],-1),Y=n("p",null,"政采云前端团队（ZooTeam），一个年轻富有激情和创造力的前端团队，隶属于政采云产品研发部，Base 在风景如画的杭州。团队现有 60 余个前端小伙伴，平均年龄 27 岁，近 4 成是全栈工程师，妥妥的青年风暴团。成员构成既有来自于阿里、网易的“老”兵，也有浙大、中科大、杭电等校的应届新人。团队在日常的业务对接之外，还在物料体系、工程平台、搭建平台、性能体验、云端应用、数据分析及可视化等方向进行技术探索和实战，推动并落地了一系列的内部技术产品，持续探索前端技术体系的新边界。",-1),X=n("p",null,[s("如果你想改变一直被事折腾，希望开始能折腾事；如果你想改变一直被告诫需要多些想法，却无从破局；如果你想改变你有能力去做成那个结果，却不需要你；如果你想改变你想做成的事需要一个团队去支撑，但没你带人的位置；如果你想改变既定的节奏，将会是“5 年工作时间 3 年工作经验”；如果你想改变本来悟性不错，但总是有那一层窗户纸的模糊… 如果你相信相信的力量，相信平凡人能成就非凡事，相信能遇到更好的自己。如果你希望参与到随着业务腾飞的过程，亲手推动一个有着深入的业务理解、完善的技术体系、技术创造价值、影响力外溢的前端团队的成长历程，我觉得我们该聊聊。任何时间，等着你写点什么，发给 "),n("code",null,"ZooTeam@cai-inc.com")],-1),$=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/98d3aa3d1f8646a8bcda8cfd9e335a4b~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1);function nn(sn,an){const a=c("ExternalLinkIcon");return o(),l("div",null,[r,u,n("p",null,[s("> 这是第 131 篇不掺水的原创，想获取更多原创好文，请搜索公众号关注我们吧~ 本文首发于政采云前端博客："),n("a",d,[s("Flutter For Web 编译的两种方案"),t(a)])]),k,n("ol",null,[m,n("li",null,[b,s(" ("),n("a",v,[s("https://zhuanlan.zhihu.com/p/39931190"),t(a)]),s(") "),h])]),f,n("p",null,[s("方案 2： 是新的 Web API , 属于 "),n("a",_,[s("CSS Houdini"),t(a)]),n("a",g,[t(a)]),s("的组成部分。CSS Houdini 提供了一组可以直接访问 CSS 对象模型的 API ，使得开发者可以去书写代码并被浏览器作为 CSS 加以解析，这样在无需等待浏览器原生的支持下，创造了新的 CSS 特性。它的绘制并非由核心 JavaScript 完成，而是类似 Web Worker 的机制。但目前 CSS Paint API 不支持文本，此外各家厂商对其支持也并不统一。")]),j,F,w,n("p",null,[s("我们在调用 "),S,s(" 命令后会将项目的 main.dart 传入编译流程，最终输出的是构建产物中的 "),y,s(" 文件 。这个 "),C,s(" 文件很关键，笔者的理解是一种包含了 dart 程序的抽象语法树生成的"),n("a",W,[s(" AST "),t(a)]),s("文件，能运行在所有的操作系统和 CPU 架构上。")]),x,n("p",null,[s("具体执行看这里："),n("a",z,[s("https://dart.dev/tools/dart2js"),t(a)])]),T,D,I,n("p",null,[s("我们，首先通过 "),n("a",M,[s("Flutter_tools"),t(a)]),s(" 调用到 "),E,s(" 文件。调用的参数如下：")]),P,n("p",null,[s("好了，接下来我们从一个简单的"),n("a",A,[s("案例"),t(a)]),s("入手，看看 Flutter，是如何一步一步将 web 转换为我们的 js，并在浏览器中使用和绘制出一个页面。")]),O,n("ol",null,[n("li",null,[n("a",B,[s("Flutter渲染原理解析"),t(a)])]),n("li",null,[n("a",R,[s("CSS Paint API"),t(a)])]),n("li",null,[n("a",U,[s("如何评价 Flutter for Web？"),t(a)])]),n("li",null,[n("a",J,[s("Dart"),t(a)])])]),L,N,H,V,G,n("p",null,[n("strong",null,[s("开源地址 "),n("a",q,[s("www.zoo.team/openweekly/"),t(a)])]),s(" (小报官网首页有微信交流群)")]),K,n("p",null,[n("strong",null,[s("开源地址 "),n("a",Z,[s("https://github.com/zcy-inc/skuPathFinder-back/"),t(a)])])]),Q,Y,X,$])}const en=p(i,[["render",nn],["__file","Flutter For Web 编译的两种方案.html.vue"]]);export{en as default};
