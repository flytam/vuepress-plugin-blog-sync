import{_ as t,z as c,A as p,Y as e,C as n,U as s,a6 as o,Q as l}from"./framework-cb9358d9.js";const d={},r=e("p",null,[e("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d4eb6a01e6564840817b127265b07edd~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1),i=e("p",null,[e("img",{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e554eeac759447f5a5ea0f2e6e7ed2f0~tplv-k3u1fbpfcp-watermark.image?",alt:"小妖.png"})],-1),u={href:"https://juejin.cn/post/7109248749527891975",target:"_blank",rel:"noopener noreferrer"},k=o(`<h2 id="如何让-x-1-x-2-x-3-等式成立" tabindex="-1"><a class="header-anchor" href="#如何让-x-1-x-2-x-3-等式成立" aria-hidden="true">#</a> 如何让 x == 1 &amp;&amp; x == 2 &amp;&amp; x == 3 等式成立</h2><p>某次面试，面试官突然问道：“<strong>如何让 x 等于 1 且让 x 等于 2 且让 x 等于 3 的等式成立？</strong>”</p><p>话音刚落，笔者立马失去意识，双眼一黑，两腿一蹬，心里暗骂：什么玩意儿！</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c07d0d8ef7e44d2aa323ea6edcca2b90~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>虽然当时没回答上来，但觉得这题非常有意思，便在这为大家分享下后续的解题思路：</p><p>宽松相等 == 和严格相等 === 都能用来判断两个值是否“相等”，首先，我们要明确上文提到的等于指的是哪一种，我们先看下二者的区别：</p><p>(1) 对于基础类型之间的比较，== 和 === 是有区别的：</p><pre><code>(1.1) 不同类型间比较，== 比较“转化成同一类型后的值”看“值”是否相等，=== 如果类型不同，其结果就是不等

(1.2) 同类型比较，直接进行“值”比较，两者结果一样
</code></pre><p>(2) 对于引用类型之间的比较，== 和 === 是没有区别的，都进行“指针地址”比较</p><p>(3) 基础类型与引用类型之间的比较，== 和 === 是有区别的：</p><pre><code>(3.1) 对于 ==，将引用类型转化为基础类型，进行“值”比较

(3.2) 因为类型不同，=== 结果为 false
</code></pre><p><strong>“== 允许在相等比较中进行强制类型转换，而 === 不允许。”</strong></p><p>由此可见，上文提到的等于指的宽松相等 ==，题目变为 “x == 1 &amp;&amp; x == 2 &amp;&amp; x == 3”。</p><p>那多种数据类型之间的相等比较又有哪些呢？笔者查阅了相关资料，如下所示：</p><h4 id="同类型数据之间的相等比较" tabindex="-1"><a class="header-anchor" href="#同类型数据之间的相等比较" aria-hidden="true">#</a> 同类型数据之间的相等比较</h4>`,15),m=e("code",null,"Type(x)",-1),v=e("code",null,"Type(y)",-1),h={href:"https://262.ecma-international.org/5.1/#sec-11.9.3",target:"_blank",rel:"noopener noreferrer"},b=o('<ol><li><p>如果 <code>Type(x)</code> 是 <code>Undefined</code>，返回 <code>true</code>。</p></li><li><p>如果 <code>Type(x)</code> 是 <code>Null</code>，返回 <code>true</code>。</p></li><li><p>如果 <code>Type(x)</code> 是 <code>Number</code> ，则</p><ul><li>如果 <code>x</code> 是 <code>NaN</code>，返回 <code>false</code>。</li><li>如果 <code>y</code> 是 <code>NaN</code>，返回 <code>false</code>。</li><li>如果 <code>x</code> 与 <code>y</code> 的数字值相同，返回 <code>true</code>。</li><li>如果 <code>x</code> 为 <code>+0</code>，<code>y</code> 为 <code>-0</code>，返回 <code>true</code>。</li><li>如果 <code>x</code> 为 <code>-0</code>，<code>y</code> 为 <code>+0</code>，返回 <code>true</code>。</li></ul></li><li><p>如果 <code>Type(x)</code> 是 <code>String</code>，则如果 <code>x</code> 和 <code>y</code> 是字符的序列完全相同（相同的长度和相同位置相同的字符），则返回 <code>true</code>。否则，返回 <code>false</code>。</p></li><li><p>如果 <code>Type(x)</code> 是 <code>Boolean</code>，则如果 <code>x</code> 和 <code>y</code> 都为 <code>true</code> 或都为 <code>false</code>，则返回 <code>true</code>。否则，返回 <code>false</code>。</p></li><li><p>如果 <code>x</code> 和 <code>y</code> 指向同一对象，则返回 <code>true</code>。否则，返回 <code>false</code>。</p></li></ol><h4 id="null-和-undefined-之间的相等比较" tabindex="-1"><a class="header-anchor" href="#null-和-undefined-之间的相等比较" aria-hidden="true">#</a> null 和 undefined 之间的相等比较</h4>',2),_=e("code",null,"null",-1),f=e("code",null,"undefined",-1),x={href:"https://262.ecma-international.org/5.1/#sec-11.9.3",target:"_blank",rel:"noopener noreferrer"},g=o(`<ol><li>如果 <code>x</code> 为 <code>null</code>，<code>y</code> 为 <code>undefined</code>，则结果为 <code>true</code>。</li><li>如果 <code>x</code> 为 <code>undefined</code>，<code>y</code> 为 <code>null</code>，则结果为 <code>true</code>。</li></ol><p>在 == 中，<code>null</code> 和 <code>undefined</code> 相等（它们也与其自身相等），除此之外其他值都不和它们两个相等。</p><p>这也就是说， 在 == 中<code>null</code> 和 <code>undefined</code> 是一回事。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">var</span>  b<span class="token punctuation">;</span> 
a <span class="token operator">==</span> b<span class="token punctuation">;</span> <span class="token comment">// true</span>
a <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
b <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
a <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
b <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
a <span class="token operator">==</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
b <span class="token operator">==</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
a <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="字符串和数字之间的相等比较" tabindex="-1"><a class="header-anchor" href="#字符串和数字之间的相等比较" aria-hidden="true">#</a> 字符串和数字之间的相等比较</h4>`,5),y={href:"https://262.ecma-international.org/5.1/#sec-11.9.3",target:"_blank",rel:"noopener noreferrer"},j=o(`<ol><li>如果 <code>Type(x)</code> 是数字，<code>Type(y)</code> 是字符串，则返回 <code>x</code> == <code>ToNumber(y)</code> 的结果。</li><li>如果 <code>Type(x)</code> 是字符串，<code>Type(y)</code> 是数字，则返回 <code>ToNumber(x)</code> == <code>y</code> 的结果。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token number">42</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">;</span>

a <span class="token operator">===</span> b<span class="token punctuation">;</span> <span class="token comment">// false</span>

a <span class="token operator">==</span> b<span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为没有强制类型转换，所以 <code>a</code> === <code>b</code> 为 <code>false</code>，42 和 &quot;42&quot; 不相等。</p><p>根据规范，&quot;42&quot; 应该被强制类型转换为数字以便进行相等比较。</p><h4 id="其他类型和布尔类型之间的相等比较" tabindex="-1"><a class="header-anchor" href="#其他类型和布尔类型之间的相等比较" aria-hidden="true">#</a> 其他类型和布尔类型之间的相等比较</h4>`,5),T={href:"https://262.ecma-international.org/5.1/#sec-11.9.3",target:"_blank",rel:"noopener noreferrer"},S=o(`<ol><li>如果 <code>Type(x)</code> 是布尔类型，则返回 <code>ToNumber(x)</code> == <code>y</code> 的结果；</li><li>如果 <code>Type(y)</code> 是布尔类型，则返回 <code>x</code> == <code>ToNumber(y)</code> 的结果。</li></ol><p>仔细分析例子，首先：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token number">42</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">;</span>

x <span class="token operator">==</span> y<span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Type(x)</code> 是布尔值，所以 <code>ToNumber(x)</code> 将 <code>true</code> 强制类型转换为 1，变成 1 == &quot;42&quot;，二者的类型仍然不同，&quot;42&quot; 根据规则被强制类型转换为 42，最后变成 1 == 42，结果为 <code>false</code>。</p><h4 id="对象和非对象之间的相等比较" tabindex="-1"><a class="header-anchor" href="#对象和非对象之间的相等比较" aria-hidden="true">#</a> 对象和非对象之间的相等比较</h4>`,5),w={href:"https://262.ecma-international.org/5.1/#sec-11.9.3",target:"_blank",rel:"noopener noreferrer"},q=o(`<ol><li>如果 <code>Type(x)</code> 是字符串或数字，<code>Type(y)</code> 是对象，则返回 <code>x</code> == <code>ToPrimitive(y)</code> 的结果；</li><li>如果 <code>Type(x)</code> 是对象，<code>Type(y)</code> 是字符串或数字，则返回 <code>ToPromitive(x)</code> == <code>y</code> 的结果。</li></ol><h4 id="什么是-toprimitive-函数" tabindex="-1"><a class="header-anchor" href="#什么是-toprimitive-函数" aria-hidden="true">#</a> 什么是 toPrimitive() 函数？</h4><p>**应用场景：**在 <code>JavaScript</code> 中，如果想要将对象转换成基本类型时，再从基本类型转换为对应的 <code>String</code> 或者 <code>Number</code>，实质就是调用 <code>valueOf</code> 和 <code>toString</code> 方法，也就是所谓的拆箱转换。</p><p>**函数结构：**toPrimitive(input, preferedType?)</p><p><strong>参数解释：</strong></p><p><code>input</code> 是输入的值，即要转换的对象，必选；</p><p><code>preferedType</code> 是期望转换的基本类型，他可以是字符串，也可以是数字。选填，默认为 <code>number</code>；</p><p><strong>执行过程：</strong></p><p>如果转换的类型是 <code>number</code>，会执行以下步骤：</p><ol><li>如果 <code>input</code> 是原始值，直接返回这个值；</li><li>否则，如果 <code>input</code> 是对象，调用 <code>input.valueOf()</code>，如果结果是原始值，返回结果；</li><li>否则，调用<code>input.toString()</code>。如果结果是原始值，返回结果；</li><li>否则，抛出错误。 如果转换的类型是 <code>string</code>，2和3会交换执行，即先执行 <code>toString()</code> 方法。</li></ol><p>valueOf 和 toString 的优先级：</p><ol><li>进行对象转换时 <code>(alert(对象))</code>，优先调用 <code>toString</code> 方法，如没有重写 <code>toString</code> 将调用 <code>valueOf</code> 方法，如果两方法都不没有重写，但按 <code>Object</code> 的 <code>toString</code> 输出。</li><li>进行强转字符串类型时将优先调用 <code>toString</code> 方法，强转为数字时优先调用 <code>valueOf</code>。</li><li>在有运算操作符的情况下，<code>valueOf</code> 的优先级高于 <code>toString</code>。</li></ol><p>由此可知，若 x 为对象时，我们改写 x 的 valueOf 或 toString 方法可以让标题的等式成立：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">val</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token literal-property property">valueOf</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
    x<span class="token punctuation">.</span>val<span class="token operator">++</span>
    <span class="token keyword">return</span> x<span class="token punctuation">.</span>val
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">val</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token literal-property property">toString</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
    x<span class="token punctuation">.</span>val<span class="token operator">++</span>
    <span class="token keyword">return</span> x<span class="token punctuation">.</span>val
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>给对象 x 设置一个属性 val 并赋值为 0，并修改其 valueOf、toString 方法，在 “x == 1 &amp;&amp; x == 2 &amp;&amp; x == 3”判断执行时，每次等式比较都会触发 valueOf、toString 方法，都会执行 val++ ，同时把最新的 val 值用于等式比较，三次等式判断时 val 值分别为 1、2、3 与等式右侧的 1、2、3 相同，从而使等式成立。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d5a144105d204a809dc0d99c93839a24~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>看下运行结果，果不其然，真想给自己点个赞。 当然，让标题的等式成立的方法肯定不止这一种，留言区期待你的回复~</p><p>参考文档：</p>`,20),N=e("li",null,[e("p",null,"《你不知道的JavaScript（中卷》")],-1),O={href:"https://blog.csdn.net/yyychocolate/article/details/108089477",target:"_blank",rel:"noopener noreferrer"},z=e("h2",{id:"推荐阅读",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#推荐阅读","aria-hidden":"true"},"#"),n(" 推荐阅读")],-1),E={href:"https://juejin.cn/editor/drafts/7109126523466022948",target:"_blank",rel:"noopener noreferrer"},P={href:"https://juejin.cn/post/7106652838800916517",target:"_blank",rel:"noopener noreferrer"},B={href:"https://juejin.cn/post/7104055306396631076",target:"_blank",rel:"noopener noreferrer"},V={href:"https://juejin.cn/post/7101457212085633054",target:"_blank",rel:"noopener noreferrer"},C={href:"https://juejin.cn/post/7098854314365419533",target:"_blank",rel:"noopener noreferrer"},L=e("h2",{id:"开源作品",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#开源作品","aria-hidden":"true"},"#"),n(" 开源作品")],-1),F=e("ul",null,[e("li",null,"政采云前端小报")],-1),I={href:"https://www.zoo.team/openweekly/",target:"_blank",rel:"noopener noreferrer"},J=e("ul",null,[e("li",null,"商品选择 sku 插件")],-1),U={href:"https://github.com/zcy-inc/skuPathFinder-back",target:"_blank",rel:"noopener noreferrer"},Z=e("h2",{id:"招贤纳士",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#招贤纳士","aria-hidden":"true"},"#"),n(" 招贤纳士")],-1),A=e("p",null,"政采云前端团队（ZooTeam），一个年轻富有激情和创造力的前端团队，隶属于政采云产品研发部，Base 在风景如画的杭州。团队现有 60 余个前端小伙伴，平均年龄 27 岁，近 4 成是全栈工程师，妥妥的青年风暴团。成员构成既有来自于阿里、网易的“老”兵，也有浙大、中科大、杭电等校的应届新人。团队在日常的业务对接之外，还在物料体系、工程平台、搭建平台、性能体验、云端应用、数据分析及可视化等方向进行技术探索和实战，推动并落地了一系列的内部技术产品，持续探索前端技术体系的新边界。",-1),Q=e("p",null,[n("如果你想改变一直被事折腾，希望开始能折腾事；如果你想改变一直被告诫需要多些想法，却无从破局；如果你想改变你有能力去做成那个结果，却不需要你；如果你想改变你想做成的事需要一个团队去支撑，但没你带人的位置；如果你想改变既定的节奏，将会是“5 年工作时间 3 年工作经验”；如果你想改变本来悟性不错，但总是有那一层窗户纸的模糊… 如果你相信相信的力量，相信平凡人能成就非凡事，相信能遇到更好的自己。如果你希望参与到随着业务腾飞的过程，亲手推动一个有着深入的业务理解、完善的技术体系、技术创造价值、影响力外溢的前端团队的成长历程，我觉得我们该聊聊。任何时间，等着你写点什么，发给 "),e("code",null,"ZooTeam@cai-inc.com")],-1),W=e("p",null,[e("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/98d3aa3d1f8646a8bcda8cfd9e335a4b~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1);function Y(D,G){const a=l("ExternalLinkIcon");return c(),p("div",null,[r,i,e("p",null,[n("> 这是第 148 篇不掺水的原创，想获取更多原创好文，请搜索公众号关注我们吧~ 本文首发于政采云前端博客："),e("a",u,[n("如何让 x == 1 && x == 2 && x == 3 等式成立"),s(a)])]),k,e("p",null,[n("如果 "),m,n(" 等于 "),v,n(),e("a",h,[n("ES5 规范 11.9.3.1"),s(a)]),n(" 这样定义：")]),b,e("p",null,[_,n(" 和 "),f,n(" 之间的 == 也涉及隐式强制类型转换。"),e("a",x,[n("ES5 规范 11.9.3.2-3"),s(a)]),n(" 这样定义：")]),g,e("p",null,[e("a",y,[n("ES5 规范 11.9.3.4-5"),s(a)]),n(" 这样定义：")]),j,e("p",null,[e("a",T,[n("ES5 规范 11.9.3.6-7"),s(a)]),n(" 这样定义：")]),S,e("p",null,[n("关于对象（对象 / 函数 / 数组）和标量基本类型（字符串 / 数字 / 布尔值）之间的相等比较，"),e("a",w,[n("ES5 规范 11.9.3.8-9"),s(a)]),n(" 做如下规定：")]),q,e("ul",null,[N,e("li",null,[e("p",null,[e("a",O,[n("==和===区别"),s(a)])])])]),z,e("p",null,[e("a",E,[n("数据统计在性能检测中的应"),s(a)])]),e("p",null,[e("a",P,[n("浅析 path 常用工具函数源码"),s(a)])]),e("p",null,[e("a",B,[n("Web Components-LitElement实践"),s(a)])]),e("p",null,[e("a",V,[n("模块联邦浅析"),s(a)])]),e("p",null,[e("a",C,[n("性能优化——图片压缩、加载和格式选择"),s(a)])]),L,F,e("p",null,[e("strong",null,[n("开源地址 "),e("a",I,[n("www.zoo.team/openweekly/"),s(a)])]),n(" (小报官网首页有微信交流群)")]),J,e("p",null,[e("strong",null,[n("开源地址 "),e("a",U,[n("https://github.com/zcy-inc/skuPathFinder-back/"),s(a)])])]),Z,A,Q,W])}const K=t(d,[["render",Y],["__file","如何让 x == 1 && x == 2 && x == 3 等式成立.html.vue"]]);export{K as default};
