import{_ as e,z as o,A as c,Y as n,C as s,U as p,a6 as t,Q as l}from"./framework-cb9358d9.js";const u={},i=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9d017cd8ccea49f28c6054a0e6e1f264~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1),r={href:"https://zoo.team/article/learn-about-immutable",target:"_blank",rel:"noopener noreferrer"},k=t(`<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b218f62dabdd4717b4f41b22b2ecfb83~tplv-k3u1fbpfcp-watermark.image" alt="玄曦.png"></p><h2 id="_1-什么是-immutable" tabindex="-1"><a class="header-anchor" href="#_1-什么是-immutable" aria-hidden="true">#</a> 1. 什么是 Immutable ？</h2><p>Immutable Data 就是一旦创建，就不能再被更改的数据。对 Immutable 对象的任何修改或添加删除操作都会返回一个新的 Immutable 对象。主要原理是采用了 Persistent Data Structure（持久化数据结构)，就是当每次修改后我们都会得到一个新的版本，且旧版本可以完好保留，也就是使用旧数据创建新数据时，要保证旧数据同时可用且不变。同时为了避免 deepCopy 把所有节点都复制一遍带来的性能损耗，Immutable 使用了 Structural Sharing（结构共享），就是对于本次操作没有修改的部分，我们可以直接把相应的旧的节点拷贝过去，这其实就是结构共享。</p><h2 id="_2-immutable-有什么优点" tabindex="-1"><a class="header-anchor" href="#_2-immutable-有什么优点" aria-hidden="true">#</a> 2. Immutable 有什么优点？</h2><h4 id="_2-1-降低复杂度-避免副作用" tabindex="-1"><a class="header-anchor" href="#_2-1-降低复杂度-避免副作用" aria-hidden="true">#</a> 2.1 降低复杂度，避免副作用</h4><p>在 Javascript 中，对象都是引用类型，在按引用传递数据的场景中，会存在多个变量指向同一个内存地址的情况，这样会引发不可控的副作用，如下代码所示：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>张三<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> obj2 <span class="token operator">=</span> obj1<span class="token punctuation">;</span>
obj2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>李四<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 李四</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 Immutable 后：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Map <span class="token punctuation">}</span> from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>immutable<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>张三<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> obj2 <span class="token operator">=</span> obj1<span class="token punctuation">;</span>
obj2<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>李四<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>name<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 张三</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们使用 Immutable 降低了 Javascript 对象 带来的复杂度的问题，使我们状态变成可预测的。</p><h4 id="_2-2-节省内存" tabindex="-1"><a class="header-anchor" href="#_2-2-节省内存" aria-hidden="true">#</a> 2.2 节省内存</h4><p>Immutable 采用了结构共享机制，所以会尽量复用内存。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Map <span class="token punctuation">}</span> from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>immutable<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>zcy<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">filter</span><span class="token operator">:</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> obj2 <span class="token operator">=</span> obj1<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>name<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>zcygov<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>filter<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token operator">===</span> obj2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>filter<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token comment">// 上面 obj1 和 obj2 共享了没有变化的 filter 属性</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-方便回溯" tabindex="-1"><a class="header-anchor" href="#_2-3-方便回溯" aria-hidden="true">#</a> 2.3 方便回溯</h4><p>Immutable 每次修改都会创建一个新对象，且对象不变，那么变更的记录就能够被保存下来，应用的状态变得可控、可追溯，方便撤销和重做功能的实现，请看下面代码示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Map <span class="token punctuation">}</span> from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>immutable<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> historyIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> history <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>zcy<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  history <span class="token operator">=</span> history<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> historyIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> newVersion <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span>history<span class="token punctuation">[</span>historyIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 将新版本追加到历史列表中</span>
  history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newVersion<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 记录索引，historyIndex 决定我们是否有撤销和重做</span>
  historyIndex<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">changeHeight</span><span class="token punctuation">(</span><span class="token parameter">height</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">operation</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>height<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 判断是否有重做</span>
<span class="token keyword">let</span> hasRedo <span class="token operator">=</span> historyIndex <span class="token operator">!==</span> history<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment">// 判断是否有撤销</span>
<span class="token keyword">let</span> hasUndo <span class="token operator">=</span> historyIndex <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-4-函数式编程" tabindex="-1"><a class="header-anchor" href="#_2-4-函数式编程" aria-hidden="true">#</a> 2.4 函数式编程</h4><p>Immutable 本身就是函数式编程中的概念，纯函数式编程比面向对象更适用于前端开发。因为只要输入一致，输出必然一致，这样开发的组件更易于调试和组装。</p><h4 id="_2-5-丰富的-api" tabindex="-1"><a class="header-anchor" href="#_2-5-丰富的-api" aria-hidden="true">#</a> 2.5 丰富的 API</h4>`,19),d=n("code",null,"Collection",-1),m=n("code",null,"List",-1),b=n("code",null,"Map",-1),v=n("code",null,"Set",-1),h=n("code",null,"Record",-1),y=n("code",null,"Seq",-1),f={href:"https://immutable-js.github.io/immutable-js/docs/#/?fileGuid=tCVw8Y6Cv8J3KYHw",target:"_blank",rel:"noopener noreferrer"},g=n("h2",{id:"_3-在-react-中如何使用-immutable",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-在-react-中如何使用-immutable","aria-hidden":"true"},"#"),s(" 3. 在 react 中如何使用 Immutable")],-1),w={href:"https://facebook.github.io/react/docs/react-api.html#react.purecomponent?fileGuid=tCVw8Y6Cv8J3KYHw",target:"_blank",rel:"noopener noreferrer"},_=t(`<p>但是，当传入 props 或 state 不止一层，或者传入的是 Array 和 Object 类型时，浅比较就失效了。当然我们也可以在 <code>shouldComponentUpdate()</code> 中使用使用 <code>deepCopy</code> 和 <code>deepCompare</code> 来避免不必要的 <code>render()</code> ，但 <code>deepCopy</code> 和 <code>deepCompare</code> 一般都是非常耗性能的。这个时候我们就需要 <code>Immutable </code> 。</p><p>以下示例通过浅比较的方式来优化：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>react<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> ReactDOM from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>react<span class="token operator">-</span>dom<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Counter</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
      state <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">counter</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">number</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
      handleClick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
          <span class="token keyword">let</span> amount <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>amount<span class="token punctuation">.</span>value <span class="token operator">?</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>amount<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>counter<span class="token punctuation">.</span>number <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>counter<span class="token punctuation">.</span>number <span class="token operator">+</span> amount<span class="token punctuation">;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// 通过浅比较判断是否需要刷新组件</span>
      <span class="token comment">// 浅比较要求每次修改的时候都通过深度克隆每次都产生一个新对象</span>
      <span class="token function">shouldComponentUpdate</span><span class="token punctuation">(</span><span class="token parameter">nextProps<span class="token punctuation">,</span> nextState</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> nextState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>State<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">!==</span> nextState<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
          <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>render<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token punctuation">(</span>
          <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>div<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
              <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>p<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>number<span class="token punctuation">}</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>p<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
              <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>input ref<span class="token operator">=</span><span class="token punctuation">{</span>input <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>amount <span class="token operator">=</span> input<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
              <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">}</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token operator">+</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>button<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
          <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>div<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
      <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>
    <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>Caculator <span class="token operator">/</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">,</span>
    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>root<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以通过深度比较的方式判断两个状态的值是否相等这样做的话性能非常低。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">shouldComponentUpdate</span><span class="token punctuation">(</span><span class="token parameter">nextProps<span class="token punctuation">,</span> prevState</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">// 通过 lodash 中 isEqual 深度比较方法判断两个值是否相同</span>
<span class="token keyword">return</span> <span class="token operator">!</span>_<span class="token punctuation">.</span><span class="token function">isEqual</span><span class="token punctuation">(</span>prevState<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Immutable 则提供了简洁高效的判断数据是否变化的方法，只需 <code>===</code> 和 <code>is</code> 比较就能知道是否需要执行 <code>render() </code> ，而这个操作几乎 0 成本，所以可以极大提高性能。修改后的 <code>shouldComponentUpdate </code> 是这样的：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>react<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> ReactDOM from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>react<span class="token operator">-</span>dom<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> is<span class="token punctuation">,</span> Map <span class="token punctuation">}</span> from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>immutable<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Caculator</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
    state <span class="token operator">=</span> <span class="token punctuation">{</span>
        counter<span class="token operator">:</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">number</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    handleClick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> amount <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>amount<span class="token punctuation">.</span>value <span class="token operator">?</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>amount<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>counter<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>number<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> val <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> val <span class="token operator">+</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>counter<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">shouldComponentUpdate</span><span class="token punctuation">(</span><span class="token parameter">nextProps <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> nextState <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">!==</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>nextState<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 使用 immutable.is 来进行两个对象的比较</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> nextState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> nextState<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>
            <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>div<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
                <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>p<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>counter<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>number<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>p<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
                <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>input ref<span class="token operator">=</span><span class="token punctuation">{</span>input <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>amount <span class="token operator">=</span> input<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
                <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">}</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token operator">+</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>button<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>div<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>
    <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>Caculator <span class="token operator">/</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">,</span>
    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>root<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Immutable.is</code> 比较的是两个对象的 <code>hashCode</code> 或 <code>valueOf</code>（对于 JavaScript 对象）。由于 immutable 内部使用了 Trie 数据结构来存储，只要两个对象的 <code>hashCode</code> 相等，值就是一样的。这样的算法避免了深度遍历比较，性能非常好。 使用 Immutable 后，如下图，当红色节点的 state 变化后，不会再渲染树中的所有节点，而是只渲染图中绿色的部分：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f0bac2beb9724e7388a4a97a4abc1219~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p>`,9),j={href:"https://github.com/camsong/blog/issues/3?fileGuid=tCVw8Y6Cv8J3KYHw",target:"_blank",rel:"noopener noreferrer"},x=t(`<p>所以使用 <code>Immutable.is</code> 可以减少 React 重复渲染，提高性能。</p><h2 id="_4-immutable-结合-redux-使用" tabindex="-1"><a class="header-anchor" href="#_4-immutable-结合-redux-使用" aria-hidden="true">#</a> 4. Immutable 结合 Redux 使用</h2><p>下面是 Immutable 结合 Redux 使用的一个数值累加小示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>react<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> ReactDOM from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>react<span class="token operator">-</span>dom<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> PropTypes from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>prop<span class="token operator">-</span>types<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createStore<span class="token punctuation">,</span> applyMiddleware <span class="token punctuation">}</span> from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>redux<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Provider<span class="token punctuation">,</span> connect <span class="token punctuation">}</span> from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>react<span class="token operator">-</span>redux<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> immutable<span class="token punctuation">,</span> <span class="token punctuation">{</span> is<span class="token punctuation">,</span> Map <span class="token punctuation">}</span> from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>immutable<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> PureComponent from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token operator">/</span>PureComponent<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">ADD</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token constant">ADD</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token comment">// 初始化数据时，使用 Map 保证数据不会被轻易修改</span>
<span class="token keyword">const</span> initState <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">number</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">counter</span><span class="token punctuation">(</span><span class="token parameter">state <span class="token operator">=</span> initState<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token constant">ADD</span><span class="token operator">:</span>
            <span class="token comment">// 返回数据时采用 update 更新对象数据</span>
            <span class="token keyword">return</span> state<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>number<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> value <span class="token operator">+</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
            <span class="token keyword">return</span> state
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Caculator</span> <span class="token keyword">extends</span> <span class="token class-name">PureComponent</span> <span class="token punctuation">{</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>
            <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>div<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
                <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>p<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>number<span class="token punctuation">}</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>p<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
                <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>input ref<span class="token operator">=</span><span class="token punctuation">{</span>input <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>amount <span class="token operator">=</span> input<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
                <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>amount<span class="token punctuation">.</span>value <span class="token operator">?</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>amount<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token operator">+</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>button<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>div<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">payload</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token constant">ADD</span><span class="token punctuation">,</span> payload <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> ConnectedCaculator <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span>
    state <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">number</span><span class="token operator">:</span> state<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>number<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    actions
<span class="token punctuation">)</span><span class="token punctuation">(</span>Caculator<span class="token punctuation">)</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>
    <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>Provider store<span class="token operator">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>ConnectedCaculator <span class="token operator">/</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>Provider<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">,</span>
    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>root<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但由于 Redux 中内置的 <code>combineReducers</code> 和 reducer 中的 <code>initialState</code> 都为原生的 Object 对象，所以不能和 Immutable 原生搭配使用，当然我们可以通过重写 <code>combineReducers</code> 的方式达到兼容效果，如下代码所示：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 重写 redux 中的 combineReducers</span>
<span class="token keyword">function</span> <span class="token function">combineReducers</span><span class="token punctuation">(</span><span class="token parameter">reducers</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">// initialState 初始化为一个 Immutable Map对象</span>
<span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">state <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">let</span> newState <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> reducers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            newState <span class="token operator">=</span> newState<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> reducers<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
       <span class="token keyword">return</span> newState<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> reducers <span class="token operator">=</span> <span class="token function">combineReducers</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
   counter
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ConnectedCaculator <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span>
   state <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
       <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">number</span><span class="token operator">:</span> state<span class="token punctuation">.</span><span class="token function">getIn</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>counter<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>number<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
   <span class="token punctuation">}</span><span class="token punctuation">,</span>
   actions
<span class="token punctuation">)</span><span class="token punctuation">(</span>Caculator<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),C={href:"https://github.com/gajus/redux-immutable#readme?fileGuid=tCVw8Y6Cv8J3KYHw",target:"_blank",rel:"noopener noreferrer"},I=t('<h2 id="_5-使用-immutable-需要注意的点" tabindex="-1"><a class="header-anchor" href="#_5-使用-immutable-需要注意的点" aria-hidden="true">#</a> 5.使用 Immutable 需要注意的点</h2><ul><li>不要混合普通的 JS 对象和 Immutable 对象 （不要把 Imuutable 对象作为Js对象的属性，或者反过来）。</li><li>把整颗 Reudx 的 state 树作为 Immutable 对象。</li><li>除了展示组件以外，其他地方都应该使用 Immutable 对象（提高效率，而展示组件是纯组件，不应该使用） 。</li><li>少用 toJS 方法（这个方法操作非常耗性能，它会深度遍历数据转换成JS对象）。</li><li>你的 Selector 应该永远返回 Immutable 对象 （即 mapStateToProps，因为 react-redux 中是通过浅比较来决定是否 re-redering，而使用 toJs 的话，每次都会返回一个新对象，即引用不同）。</li></ul><h2 id="_6-总结" tabindex="-1"><a class="header-anchor" href="#_6-总结" aria-hidden="true">#</a> 6.总结</h2><p>实际情况中有很多方法可以优化我们的 React 应用，例如延迟加载组件，使用 serviceWorks 缓存应用状态，使用 SSR 等，但在考虑优化之前，最好先理解 React 组件的工作原理，了解 Diff 算法，明白这些概念之后才能更好的针对性的去优化我们的应用。</p><p>文章中如有不对的地方，欢迎指正。</p><h3 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接" aria-hidden="true">#</a> 参考链接：</h3>',6),S={href:"https://github.com/camsong/blog/issues/3?fileGuid=tCVw8Y6Cv8J3KYHw",target:"_blank",rel:"noopener noreferrer"},R={href:"https://archive.jlongster.com/Using-Immutable-Data-Structures-in-JavaScript?fileGuid=tCVw8Y6Cv8J3KYHw",target:"_blank",rel:"noopener noreferrer"},M={href:"https://immutable-js.github.io/immutable-js/docs/#/?fileGuid=tCVw8Y6Cv8J3KYHw",target:"_blank",rel:"noopener noreferrer"},D=n("h2",{id:"推荐阅读",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#推荐阅读","aria-hidden":"true"},"#"),s(" 推荐阅读")],-1),J={href:"https://juejin.cn/post/6945624014643855367",target:"_blank",rel:"noopener noreferrer"},P={href:"https://juejin.cn/post/6974184935804534815",target:"_blank",rel:"noopener noreferrer"},Y=n("h2",{id:"开源作品",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#开源作品","aria-hidden":"true"},"#"),s(" 开源作品")],-1),V=n("ul",null,[n("li",null,"政采云前端小报")],-1),O={href:"https://www.zoo.team/openweekly/",target:"_blank",rel:"noopener noreferrer"},z=n("h2",{id:"招贤纳士",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#招贤纳士","aria-hidden":"true"},"#"),s(" 招贤纳士")],-1),U=n("p",null,"政采云前端团队（ZooTeam），一个年轻富有激情和创造力的前端团队，隶属于政采云产品研发部，Base 在风景如画的杭州。团队现有 40 余个前端小伙伴，平均年龄 27 岁，近 3 成是全栈工程师，妥妥的青年风暴团。成员构成既有来自于阿里、网易的“老”兵，也有浙大、中科大、杭电等校的应届新人。团队在日常的业务对接之外，还在物料体系、工程平台、搭建平台、性能体验、云端应用、数据分析及可视化等方向进行技术探索和实战，推动并落地了一系列的内部技术产品，持续探索前端技术体系的新边界。",-1),A=n("p",null,[s("如果你想改变一直被事折腾，希望开始能折腾事；如果你想改变一直被告诫需要多些想法，却无从破局；如果你想改变你有能力去做成那个结果，却不需要你；如果你想改变你想做成的事需要一个团队去支撑，但没你带人的位置；如果你想改变既定的节奏，将会是“5 年工作时间 3 年工作经验”；如果你想改变本来悟性不错，但总是有那一层窗户纸的模糊… 如果你相信相信的力量，相信平凡人能成就非凡事，相信能遇到更好的自己。如果你希望参与到随着业务腾飞的过程，亲手推动一个有着深入的业务理解、完善的技术体系、技术创造价值、影响力外溢的前端团队的成长历程，我觉得我们该聊聊。任何时间，等着你写点什么，发给 "),n("code",null,"ZooTeam@cai-inc.com")],-1),E=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/88372cdf69f74306a3235b400e25c6c4~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1);function H(B,G){const a=l("ExternalLinkIcon");return o(),c("div",null,[i,n("p",null,[s("> 这是第 104 篇不掺水的原创，想获取更多原创好文，请搜索公众号关注我们吧~ 本文首发于政采云前端博客："),n("a",r,[s("15 分钟学会 Immutable"),p(a)])]),k,n("p",null,[s("Immutable 实现了一套完整的 Persistent Data Structure，提供了很多易用的数据类型。像"),d,s("、"),m,s("、"),b,s("、"),v,s("、"),h,s("、"),y,s("，以及一系列操作它们的方法，包括 sort，filter，数据分组，reverse，flatten 以及创建子集等方法，具体 API 请参考"),n("a",f,[s("官方文档"),p(a)])]),g,n("p",null,[s("我们都知道在 React 父组件更新会引起子组件重新 render，当我们传入组件的 props 和 state 只有一层时，我们可以直接使用"),n("a",w,[s(" React.PureComponent"),p(a)]),s("，它会自动帮我们进行浅比较，从而控制 shouldComponentUpdate 的返回值。")]),_,n("p",null,[s("(图片引用自："),n("a",j,[s("Immutable 详解及 React 中实践"),p(a)]),s(")")]),x,n("p",null,[s("也可以通过引入 "),n("a",C,[s("redux-immutable"),p(a)]),s(" 中间件的方式实现 redux 与 Immutable 的搭配使用，对于使用 Redux 的应用程序来说，你的整个 state tree 应该是 Immutable.JS 对象，根本不需要使用普通的 JavaScript 对象。")]),I,n("p",null,[n("a",S,[s("Immutable 详解及 React 中实践"),p(a)])]),n("p",null,[n("a",R,[s("Immutable Data Structures and JavaScript"),p(a)])]),n("p",null,[n("a",M,[s("Immutable官方文档"),p(a)])]),D,n("p",null,[n("a",J,[s("通过自定义Vue指令实现前端曝光埋点"),p(a)])]),n("p",null,[n("a",P,[s("我在工作中是如何使用 git 的"),p(a)])]),Y,V,n("p",null,[n("strong",null,[s("开源地址 "),n("a",O,[s("www.zoo.team/openweekly/"),p(a)])]),s(" (小报官网首页有微信交流群)")]),z,U,A,E])}const N=e(u,[["render",H],["__file","15 分钟学会 Immutable.html.vue"]]);export{N as default};
