import{_ as e,z as o,A as p,Y as n,C as s,U as t,a6 as c,Q as l}from"./framework-cb9358d9.js";const i={},u=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d4eb6a01e6564840817b127265b07edd~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1),r=n("p",null,[n("img",{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/542c31f1efad4f59a503022ef8c04aaf~tplv-k3u1fbpfcp-watermark.image?",alt:"的卢.png"})],-1),d={href:"https://www.zoo.team/article/formdata",target:"_blank",rel:"noopener noreferrer"},k=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/63995f40d63d4454959357975d59571a~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1),m=n("h2",{id:"前因",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#前因","aria-hidden":"true"},"#"),s(" 前因")],-1),h=n("code",null,"request",-1),b=n("code",null,"Request Headers",-1),_=n("code",null,"Content-Type",-1),v=n("code",null,"application/json",-1),f={href:"https://juejin.cn/post/6844903841775747079",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"multipart/form-data",-1),g=n("h2",{id:"简单介绍-restful",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#简单介绍-restful","aria-hidden":"true"},"#"),s(" 简单介绍 RESTful")],-1),w={href:"https://www.ruanyifeng.com/blog/2011/09/restful.html",target:"_blank",rel:"noopener noreferrer"},j=n("code",null,"HTTP 动词",-1),F=n("code",null,"HTTP 动词",-1),T=n("code",null,"HTTP",-1),D=n("code",null,"GET",-1),x=n("code",null,"POST",-1),z=n("code",null,"PUT",-1),C=n("code",null,"GET",-1),S=n("code",null,"URL",-1),B=n("code",null,"URL",-1),N=n("code",null,"POST",-1),O=n("code",null,"Request Body",-1),P=n("code",null,"POST",-1),A=n("code",null,"FormData",-1),J=n("h2",{id:"引入-formdata",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#引入-formdata","aria-hidden":"true"},"#"),s(" 引入 "),n("code",null,"FormData")],-1),q=n("code",null,"post",-1),E=n("code",null,"application/json",-1),R=n("code",null,"application/x-www-form-urlencoded",-1),V=n("code",null,"application/json",-1),W=n("code",null,"Content-Type",-1),H=n("code",null,"JSON",-1),I=n("code",null,"JSON.stringify",-1),L={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify",target:"_blank",rel:"noopener noreferrer"},U=n("code",null,"JSON.stringify",-1),G=n("code",null,"Blob",-1),K=n("code",null,"File",-1),M=n("code",null,"{}",-1),Z={href:"https://segmentfault.com/a/1190000023595021",target:"_blank",rel:"noopener noreferrer"},Q=n("code",null,"JSON.stringify",-1),Y=n("code",null,"base64",-1),X=n("code",null,"base64",-1),$=n("code",null,"FormData",-1),nn=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/81618a0287854280b2d99bf793fc2626~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1),sn=n("h3",{id:"定义",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#定义","aria-hidden":"true"},"#"),s(" 定义")],-1),an=n("code",null,"FormData",-1),tn=n("code",null,"key/value",-1),en=n("code",null,"FormData",-1),on=n("code",null,"application/json",-1),pn=n("code",null,"FormData",-1),cn=n("code",null,"window",-1),ln={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/FormData",target:"_blank",rel:"noopener noreferrer"},un=c(`<p>我们在控制台实例化一个 <code>FormData</code> 对象，然后打印，如下</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8e1c9e81b71b4f53a80add2783fc547b~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h3><p>可以看到其原型上有很多的方法，个人感觉这个 <code>FormData</code> 跟 <code>Map</code> 有点像，仔细观察可以知道都有 <code>set</code>、<code>get</code>、<code>values</code>、<code>has</code> 等方法，我们平常开发主要的使用也就是 <code>append</code> 方法了，一般都会封装一层 <code>request</code>，调用层只需要传入参数的对象集合就可以。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> specialFileType <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>Blob<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>File<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">formatData</span> <span class="token punctuation">(</span><span class="token parameter">_data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">window<span class="token punctuation">.</span>FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> _data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> value <span class="token operator">=</span> _data<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>_data<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> <span class="token operator">!</span>specialFileType<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>_data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      value <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>_data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    data<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> data
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="append-or-set" tabindex="-1"><a class="header-anchor" href="#append-or-set" aria-hidden="true">#</a> <code>append</code> or <code>set</code></h3><p>这就有同学要问了，为啥不用 <code>set</code> 方法， <code>MDN</code> 上面写的很清楚，<code>append</code> 的 <code>key</code> 存在，就会附加到已有值集合的后面，而 <code>set</code> 会使用新值覆盖已有的值，所以选择使用哪一种取决于你的需求。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e721d8a64bc44ec28711fcde66f8bc46~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>那么文章开头就说了 <code>FormData</code> 在文件上传这一块比较有优势，那么它是怎么处理的呢？<code>FormData</code> 对象能够设置三种类型的值，<code>string</code>、<code>Blob</code>、<code>File</code>，所以我们不需要转换格式，可以直接传文件，当我们传递 <code>File</code> 到 <code>formatData</code> 层，会直接被 <code>append</code> 到 <code>FormData</code> 对象里，且可以通过 <code>get</code> 获取到值，然后发送请求到服务端，我们能从浏览器入参中清晰的看到 <code>d</code> 、<code>e</code> 参数的类型是 <code>binary</code>，因为就是二进制的文件类型，这样服务端接到值之后很方便获取。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cosnt View <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>fileA<span class="token punctuation">,</span> setFileA<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>fileB<span class="token punctuation">,</span> setFileB<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> handleClick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>fileA<span class="token operator">:</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> fileA<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>fileB<span class="token operator">:</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> fileB<span class="token punctuation">)</span>
    <span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">a1</span><span class="token operator">:</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token literal-property property">a2</span><span class="token operator">:</span> <span class="token number">22</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span>
      <span class="token literal-property property">d</span><span class="token operator">:</span> fileA<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token literal-property property">e</span><span class="token operator">:</span> fileB<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token function">formatData</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token constant">POST</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token operator">/</span>aa<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
      data<span class="token punctuation">,</span>
      <span class="token comment">// headers: {</span>
      <span class="token comment">//   &amp;#39;content-type&amp;#39;: &amp;#39;multipart/formdata&amp;#39;</span>
      <span class="token comment">// },</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>div<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>div onClick<span class="token operator">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>发送请求<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>div<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>input
      type<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>file<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>
      onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> v <span class="token operator">=</span> a<span class="token punctuation">.</span>target<span class="token punctuation">.</span>files<span class="token punctuation">;</span>
      <span class="token function">setFileA</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">}</span>
    <span class="token operator">/</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>input
      type<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>file<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>
      onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> v <span class="token operator">=</span> a<span class="token punctuation">.</span>target<span class="token punctuation">.</span>files<span class="token punctuation">;</span>
      <span class="token function">setFileB</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">}</span>
    <span class="token operator">/</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>div<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/13e20c8781f84f7cbc02e2f695720221~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1ae6c673c2b045528b5862ac75bac2f1~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>可以看到 每一个参数之间都有一个 <code>------WebKitFormBoundary ***</code> 区分开，这实际上是 <code>FormData</code> 的规范标志，后面的字符串是浏览器帮我们自动创建的，以 <code>------WebKitFormBoundary ***</code> 作为分隔符，也作为开始和结尾，其内容主要有 <code>Content-Disposition</code>、<code>Content-Type</code> 等，其中 <code>Content-Disposition</code> 是必选项， <code>name</code> 属性代表着表单元素的 <code>key</code>，<code>filename</code> 则是上传文件的名称，也可以使用 <code>FormData</code> 第三个参数更改 ，另外，我在发送请求时，并没有更改请求头里面的 <code>Content-Type</code>，但实际上我们看到的是正确的 <code>multipart/form-data</code>，这是因为现在的浏览器比较智能，当客户端未设置请求头的 <code>Content-Type</code> 时，请求参数为对象时，某一些浏览器会自动帮我们在 请求头中添加 <code>Content-Type: text/plain</code>，如果传输的数据是 <code>FormData</code>，也会自动帮我们加上 <code>Content-Type: multipart/form-data</code> 等，可能不同浏览器表现行为不一样，但是最好的方式就是客户端与服务端约定好 <code>Content-Type</code> 类型，固定传递。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>在我们日常开发中，现有的几种都能够满足我们的使用需求，只是在一些特殊的场景中可能会有一些偏差，具体如何使用还是要看场景，以及和服务端的约定，约定优于配置。</p><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章：</h2><p>https://www.ruanyifeng.com/blog/2011/09/restful.html</p><p>https://zhuanlan.zhihu.com/p/122912935</p><p>https://juejin.cn/post/6885726248039874573</p><h2 id="推荐阅读" tabindex="-1"><a class="header-anchor" href="#推荐阅读" aria-hidden="true">#</a> 推荐阅读</h2><p>[在 Vue 中为什么不推荐用 index 做 key](https://juejin.cn/post/7026119446162997261 &quot;在 Vue 中为什么不推荐用 index 做 key&quot;)</p><p>[浅析Web录屏技术方案与实现](https://juejin.cn/post/7028723258019020836 &quot;浅析Web录屏技术方案与实现&quot;)</p><h2 id="开源作品" tabindex="-1"><a class="header-anchor" href="#开源作品" aria-hidden="true">#</a> 开源作品</h2><ul><li>政采云前端小报</li></ul>`,24),rn={href:"https://www.zoo.team/openweekly/",target:"_blank",rel:"noopener noreferrer"},dn=n("ul",null,[n("li",null,"商品选择 sku 插件")],-1),kn={href:"https://github.com/zcy-inc/skuPathFinder-back",target:"_blank",rel:"noopener noreferrer"},mn=n("h2",{id:"招贤纳士",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#招贤纳士","aria-hidden":"true"},"#"),s(" 招贤纳士")],-1),hn=n("p",null,"政采云前端团队（ZooTeam），一个年轻富有激情和创造力的前端团队，隶属于政采云产品研发部，Base 在风景如画的杭州。团队现有 60 余个前端小伙伴，平均年龄 27 岁，近 4 成是全栈工程师，妥妥的青年风暴团。成员构成既有来自于阿里、网易的“老”兵，也有浙大、中科大、杭电等校的应届新人。团队在日常的业务对接之外，还在物料体系、工程平台、搭建平台、性能体验、云端应用、数据分析及可视化等方向进行技术探索和实战，推动并落地了一系列的内部技术产品，持续探索前端技术体系的新边界。",-1),bn=n("p",null,[s("如果你想改变一直被事折腾，希望开始能折腾事；如果你想改变一直被告诫需要多些想法，却无从破局；如果你想改变你有能力去做成那个结果，却不需要你；如果你想改变你想做成的事需要一个团队去支撑，但没你带人的位置；如果你想改变既定的节奏，将会是“5 年工作时间 3 年工作经验”；如果你想改变本来悟性不错，但总是有那一层窗户纸的模糊… 如果你相信相信的力量，相信平凡人能成就非凡事，相信能遇到更好的自己。如果你希望参与到随着业务腾飞的过程，亲手推动一个有着深入的业务理解、完善的技术体系、技术创造价值、影响力外溢的前端团队的成长历程，我觉得我们该聊聊。任何时间，等着你写点什么，发给 "),n("code",null,"ZooTeam@cai-inc.com")],-1),_n=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/98d3aa3d1f8646a8bcda8cfd9e335a4b~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1);function vn(fn,yn){const a=l("ExternalLinkIcon");return o(),p("div",null,[u,r,n("p",null,[s("> 这是第 132 篇不掺水的原创，想获取更多原创好文，请搜索公众号关注我们吧~ 本文首发于政采云前端博客："),n("a",d,[s("浅析 FormData"),t(a)])]),k,m,n("p",null,[s("在日常开发中都是使用公司内部封装好的 "),h,s("，一直没太注意请求参数类型，源于一次常规需求， 服务端提出：之前的请求参数有问题，需要调整，经过排查后发现之前的 "),b,s(" 的 "),_,s(" 字段值为 "),v,s(" ，与服务端解码规则不同，可见这篇文章《"),n("a",f,[s("SpringBoot 是如何解析参数的"),t(a)]),s("》，需要更改为 "),y,s("，配合改完后，问题解决，也顺便总结一下。")]),g,n("p",null,[s("我们现在常用的互联网软件架构 "),n("a",w,[s("RESTful"),t(a)]),s(" ，有一些规则和约束，比如：协议、域名、版本、路径、"),j,s("、状态码等，本文主要总结 "),F,s(" 的部分内容，也就是 "),T,s(" 请求方法，我们常用的请求方法有 "),D,s("、"),x,s("、"),z,s(" 等，"),C,s(" 请求大家应该比较熟悉，一般是用于获取资源，客户端 通过 "),S,s(" 传参，但由于请求 "),B,s(" 的长度限制，参数比较少的时候可以使用，比如一些简单的列表页等。而 "),N,s(" 就稍稍复杂一点了，一般是用于提交数据，客户端是通过 "),O,s(" 传参，该请求方式在实际业务场景（特别是在中后台系统中）应用广泛，下面我们就以常见的 "),P,s(" 请求为例简单介绍 "),A,s(" 的使用场景。")]),J,n("p",null,[s("很多时候，在 "),q,s(" 提交数据时我们常采用 "),E,s("、"),R,s(" 等类型，也确实能够覆盖到大部分的场景，但是有一些场景下，比如文件上传的时候，就不算是好的解决方案了，"),V,s(" 作为请求头 "),W,s(" 字段值时，表示告知服务端参数是序列化后的 "),H,s(" 字符串，所以一般在传参时都会用 "),I,s(" 序列化一下，且浏览器对 "),n("a",L,[s("JSON.stringify API "),t(a)]),s("支持程度比较高，但是 "),U,s(" 在转换某一些数据结构时会出问题，比如 会丢失 function 类型的参数、循环引用时会报错、"),G,s(" /"),K,s(" 对象会被转化成 "),M,s(" 等等，，可以参考 "),n("a",Z,[s("为何不推荐使用 JSON.stringify 做深拷贝"),t(a)]),s("，不过 "),Q,s(" 还有第三个参数，有兴趣的同学可以去了解下，这是其一，其二，有同学要说了，如果要是图片那可以转换成 "),Y,s(" 格式进行上传解决，这种方式虽然可行，但是转换成 "),X,s(" 格式需要很多字符，占用很多资源，而且很长，不便于阅读，另外就是服务端接收到这个参数还得解析，很麻烦，此时，"),$,s(" 就可用上了。")]),nn,sn,n("p",null,[an,s(" 这种方式相信很多同学都比较熟悉，它提供了一种表示表单数据的键值对 "),tn,s(" 的构造方式，由名称和定义就知道 "),en,s(" 是专门为表单量身定做的类型，但其实其功能要比 "),on,s(" 强得多，比如文件上传的问题，用 "),pn,s(" 传参能很好的解决，"),cn,s(" 上也直接挂载了 "),n("a",ln,[s("FormData"),t(a)]),s(" 对象，很方便我们直接使用。")]),un,n("p",null,[n("strong",null,[s("开源地址 "),n("a",rn,[s("www.zoo.team/openweekly/"),t(a)])]),s(" (小报官网首页有微信交流群)")]),dn,n("p",null,[n("strong",null,[s("开源地址 "),n("a",kn,[s("https://github.com/zcy-inc/skuPathFinder-back/"),t(a)])])]),mn,hn,bn,_n])}const wn=e(i,[["render",vn],["__file","浅析 FormData.html.vue"]]);export{wn as default};
