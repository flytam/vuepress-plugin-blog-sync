import{_ as d,z as l,A as n,Y as e,C as a,U as t,a6 as o,Q as s}from"./framework-cb9358d9.js";const p={},c=e("h2",{id:"",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#","aria-hidden":"true"},"#"),a(" **")],-1),m=e("p",null,'<table><tbody><tr><td bgcolor="#FDFFE7"><font size="4">原创不易，希望能关注下我们，再顺手点个赞~~<font></font></font></td></tr></tbody></table> **',-1),r={href:"https://www.zoo.team/article/css-stacking-context",target:"_blank",rel:"noopener noreferrer"},u=o(`<p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/11/9/16e5088c7eeaebd6~tplv-t2oaga2asx-image.image" alt="简名.png"></p><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>在网页制作的过程中，元素与元素之间的位置关系，在坐标轴上一般可体现为 X 轴、Y 轴和 Z 轴。对于 X 轴和 Y 轴的定位大多数开发都能比较直观的搞清楚，而 Z 轴则相对较为模糊，或者说不能全面的理解Z 轴的显示逻辑。</p><p>大多数人都知道可以使用 <code>position</code> 属性配合 <code>z-index</code> 属性解决元素的 Z 轴显示问题，对于更深层次的原理却不太了解。本文主要介绍了层叠上下文、层叠等级、层叠顺序等概念。目的就是为了理清元素的 Z 轴显示顺序的内部逻辑。</p><h2 id="一、现象" tabindex="-1"><a class="header-anchor" href="#一、现象" aria-hidden="true">#</a> 一、现象</h2><h3 id="z-轴上的显示顺序" tabindex="-1"><a class="header-anchor" href="#z-轴上的显示顺序" aria-hidden="true">#</a> Z 轴上的显示顺序</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// 穿透父级容器的 z-index
  &amp;lt;!-- 100 * 100 的深蓝色 Block --&amp;gt;
  &amp;lt;div class=&amp;quot;block blue&amp;quot; style=&amp;quot;position: relative; z-index: auto;&amp;quot;&amp;gt;
    &amp;lt;!-- 50 * 50 的红色 Block --&amp;gt;
    &amp;lt;div class=&amp;quot;small red&amp;quot; style=&amp;quot;position: relative; z-index: -1;&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/29/16cdd0075368461a~tplv-t2oaga2asx-image.image" alt="img"></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// 不能穿透父级容器的 z-index
 &amp;lt;!-- 100 * 100 的深蓝色 Block --&amp;gt;
  &amp;lt;div class=&amp;quot;block blue&amp;quot; style=&amp;quot;position: relative; z-index: 0;&amp;quot;&amp;gt;
    &amp;lt;!-- 50 * 50 的红色 Block --&amp;gt;
    &amp;lt;div class=&amp;quot;small red&amp;quot; style=&amp;quot;position: relative; z-index: -1;&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/29/16cdd007537a0a06~tplv-t2oaga2asx-image.image" alt="img"></p><p>两段代码基本一样，只有在深蓝色盒子处有个 <code>z-index</code> 不同。当父级容器的 <code>z-index</code> 为 <code>auto</code> 的时候，红色盒子穿过了父级容器出现在了父级容器的背后（被父级容器遮挡住）。当父级容器的 <code>z-index</code> 为 <code>0</code> 的时候，红色盒子无法穿过父级容器。</p><h3 id="元素-z-轴对比" tabindex="-1"><a class="header-anchor" href="#元素-z-轴对比" aria-hidden="true">#</a> 元素 Z 轴对比</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// 元素 Z 轴对比
  &amp;lt;!-- 100 * 100 的深蓝色盒子 --&amp;gt;
  &amp;lt;div class=&amp;quot;block blue&amp;quot;&amp;gt;
    &amp;lt;div style=&amp;quot;position:relative;z-index:auto;&amp;quot;&amp;gt;
      &amp;lt;!-- 50 * 50 的红色盒子 --&amp;gt;
      &amp;lt;div class=&amp;quot;small red&amp;quot; style=&amp;quot;position:absolute; z-index:2;&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div style=&amp;quot;position:relative;z-index:auto;&amp;quot;&amp;gt;
      &amp;lt;!-- 50 * 50 的灰色盒子 --&amp;gt;
      &amp;lt;div class=&amp;quot;small yellow&amp;quot; style=&amp;quot;position:absolute; z-index:1; top: 10px;&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/29/16cdd007537583bb~tplv-t2oaga2asx-image.image" alt="img"></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// 元素 Z 轴对比
  &amp;lt;!-- 100 * 100 的深蓝色盒子 --&amp;gt;
  &amp;lt;div class=&amp;quot;block blue&amp;quot;&amp;gt;
    &amp;lt;div style=&amp;quot;position:relative;z-index:0;&amp;quot;&amp;gt;
      &amp;lt;!-- 50 * 50 的红色盒子 --&amp;gt;
      &amp;lt;div class=&amp;quot;small red&amp;quot; style=&amp;quot;position:absolute; z-index:2;&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div style=&amp;quot;position:relative;z-index:0;&amp;quot;&amp;gt;
      &amp;lt;!-- 50 * 50 的灰色盒子 --&amp;gt;
      &amp;lt;div class=&amp;quot;small yellow&amp;quot; style=&amp;quot;position:absolute; z-index:1; top: 10px;&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/29/16cdd0075438e856~tplv-t2oaga2asx-image.image" alt="img"></p><p>同样的，以上两段代码基本一样，都是有 3 层的 DIV 盒子。最外层是一个深蓝色盒子，中间一层容器盒子，最下面一层红色及灰色盒子。不同之处在于中间这层容器盒子的 <code>z-index</code> 由 <code>auto</code> 变成了 <code>0</code>。最底下的红色及灰色盒子的 Z 轴层级比较的结果就截然不同。</p><p><strong>由以上两个例子我们可以发现，当 <code>z-index</code> 为数值并且生效的时候，容器会发生一种变化，会使得容器内的子组件无法穿过容器本身，并且子组件的层级由父组件决定。这种变化后的容器元素我们称之为层叠上下文。</strong></p><h2 id="二、特性" tabindex="-1"><a class="header-anchor" href="#二、特性" aria-hidden="true">#</a> 二、特性</h2><ul><li><p>层叠上下文有几个特性</p><ul><li>层叠上下文可以嵌套，内部层叠上下文及其所有子元素均受制于外部的层叠上下文。</li></ul></li></ul><p>&gt; 这个好理解，可以参考例子 2 。当第二层的容器盒子升级为层叠上下文时，红色盒子及灰色盒子 的 Z 轴层级受制于第二层的容器盒子。</p><ul><li>每个层叠上下文和兄弟元素独立，也就是当进行层叠变化或渲染的时候，只需要考虑后代元素。</li></ul><p>&gt; 这一条在性能优化上可以用的上。在更新 DOM 元素的时候考虑上层叠上下文可以使得站点性能 表现更加优异。</p><ul><li>层叠上下文未指定 <code>z-index</code> 时，其层叠等级与 <code>z-index : 0</code> 相同， 要比普通元素高。指定 <code>z-index</code> 时按照层叠规则来。</li></ul><p>&gt; 这条专门指的由 CSS3 属性创建出来的层叠上下文，其本身未指定 z-index。其层叠等级应该 是 z-index: 0。</p><h2 id="三、创建" tabindex="-1"><a class="header-anchor" href="#三、创建" aria-hidden="true">#</a> 三、创建</h2><ul><li><p>层叠上下文大体上可分为三种创建方式</p><ul><li><p>页面根元素，称为根层叠上下文</p></li><li><p><code>z-index</code> 值为数值的定位元素的传统层叠上下文</p></li></ul></li></ul><p>&gt; 注意： &gt; &gt; 1、z-index: auto 和 z-index: 0 在层叠等级上属于同一级。但是 z-index: 0 就是符合这一条“z-index 为数值”会使得元素升级为层叠上下文。 2、IE6，7 有个不合常理的地方，就是当元素的 z-index 为 auto 的时候，该元素也升级为创建层叠上下文。这就是为什么在过去 IE6/IE7 的 z-index 一直是个老大难的原因。还好现在大家可以不用考虑这两款老旧的浏览器了。</p><ul><li><p>其他 CSS3 属性（详情可动手实验了解）</p><ul><li><code>z-index</code> 值不为 <code>auto</code> 的 <code>flex</code> 项(父元素 <code>display : flex | inline-flex</code> )</li><li>元素的 <code>opacity</code> 值不是 <code>1</code></li><li>元素的 <code>transform</code> 值不是 <code>none</code></li><li>元素的 <code>filter</code> 值不是 <code>none</code></li><li>其他</li></ul></li></ul><h2 id="四、两个概念-层叠顺序、层叠等级" tabindex="-1"><a class="header-anchor" href="#四、两个概念-层叠顺序、层叠等级" aria-hidden="true">#</a> 四、两个概念，层叠顺序、层叠等级</h2><p>在说层叠规则之前两个概念需要大家了解一下，这有利于我们在日常交流中探讨相关的问题。</p><ul><li>层叠顺序（ Stacking Order ），这个其实就是很字面的意思，它表示元素发生层叠时按照特定的顺序规则在 Z 轴上垂直显示顺序。</li><li>层叠等级（ Stacking Level ），这个很好理解了。层叠等级就是个描述元素层叠顺序的一个名词，它决定了同一个层叠上下文中元素在 Z 轴上的显示顺序。举个例子：A 元素与 B 元素重叠之后，A 元素在 B 元素上面。那么我们就可以直接说 A 元素的层叠等级大于 B 元素的层叠等级。</li></ul><h2 id="五、层叠规则" tabindex="-1"><a class="header-anchor" href="#五、层叠规则" aria-hidden="true">#</a> 五、层叠规则</h2><p>当元素互相层叠的时候，显示规则如下。</p><ul><li><p>当互相层叠的元素都是层叠上下文元素，即明确的有 <code>z-index</code> 值的时候（没有明确的 <code>z-index</code> 值的层叠上下文也就是 CSS3 创建的层叠上下文 <code>z-index</code> 值为<code>0</code> ）直接比较 <code>z-index</code> 的值，值大的处在值小的元素的上方。</p></li><li><p>当元素处于同一层叠上下文内时可按照如下规则进行层叠判断。</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/29/16cdd0075454a923~tplv-t2oaga2asx-image.image" alt="img"></p></li><li><p>当元素的层叠等级一致、层叠顺序也相同的时候，在 DOM 流中处于后面的元素会覆盖前面的元素。</p></li></ul><h2 id="六、招贤纳士" tabindex="-1"><a class="header-anchor" href="#六、招贤纳士" aria-hidden="true">#</a> 六、招贤纳士</h2><p>招人，前端，隶属政采云前端大团队（ZooTeam），50 余个小伙伴正等你加入一起浪。如果你想改变一直被事折腾，希望开始能折腾事；如果你想改变一直被告诫需要多些想法，却无从破局；如果你想改变你有能力去做成那个结果，却不需要你；如果你想改变你想做成的事需要一个团队去支撑，但没你带人的位置；如果你想改变既定的节奏，将会是“5年工作时间3年工作经验”；如果你想改变本来悟性不错，但总是有那一层窗户纸的模糊… 如果你相信相信的力量，相信平凡人能成就非凡事，相信能遇到更好的自己。如果你希望参与到随着业务腾飞的过程，亲手参与一个有着深入的业务理解、完善的技术体系、技术创造价值、影响力外溢的前端团队的成长历程，我觉得我们该聊聊。任何时间，等着你写点什么，发给 <strong><code>ZooTeam@cai-inc.com</code></strong></p><h2 id="七、参考文章" tabindex="-1"><a class="header-anchor" href="#七、参考文章" aria-hidden="true">#</a> 七、参考文章</h2>`,38),v={href:"https://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/",target:"_blank",rel:"noopener noreferrer"},g={href:"https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Understanding_z_index/The_stacking_context",target:"_blank",rel:"noopener noreferrer"},x={href:"https://juejin.cn/post/6844903667175260174",target:"_blank",rel:"noopener noreferrer"},h=e("p",null,[e("img",{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/29/16cddbe09f60b388~tplv-t2oaga2asx-image.image",alt:""})],-1);function b(z,_){const i=s("ExternalLinkIcon");return l(),n("div",null,[c,m,e("p",null,[a("> 本文首发于政采云前端团队博客： "),e("a",r,[a("CSS 层叠上下文（Stacking Context）"),t(i)])]),u,e("ul",null,[e("li",null,[e("p",null,[e("a",v,[a("深入理解 CSS 中的层叠上下文和层叠顺序"),t(i)])])]),e("li",null,[e("p",null,[e("a",g,[a("层叠上下文"),t(i)])])]),e("li",null,[e("p",null,[e("a",x,[a("彻底搞懂 CSS 层叠上下文、层叠等级、层叠顺序、z-index"),t(i)])])])]),h])}const f=d(p,[["render",b],["__file","CSS 层叠上下文（Stacking Context）.html.vue"]]);export{f as default};
