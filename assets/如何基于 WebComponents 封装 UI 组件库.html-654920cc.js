import{_ as p,z as o,A as l,Y as n,C as a,U as t,a6 as e,Q as i}from"./framework-cb9358d9.js";const c={},u=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d4eb6a01e6564840817b127265b07edd~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1),r=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eed57b09e39a464d979d1521d44ad76e~tplv-k3u1fbpfcp-watermark.image?",alt:"海绵.png"})],-1),d={href:"https://www.zoo.team/article/web-components",target:"_blank",rel:"noopener noreferrer"},k=e(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>作为一名前端攻城狮，相信大家也都在关注着前端的一些新技术，近些年来前端组件化开发已为常态，我们经常把重用性高的模块抽离成一个个的组件，来达到复用的目的，这样减少了我们的维护成本，提高了开发的效率。但是都有一个缺点离不开框架本身，因为我们浏览器本身解析不了那些组件。那么有没有一种技术也可以达到这种效果呢？答案就是今天的主角 Web Components。</p><p>&gt;Web Components 是一套不同的技术，允许您创建可重用的定制元素（它们的功能封装在您的代码之外）并且在您的web应用中使用它们。 目前 W3C 也在积极推动，并且浏览器的支持情况还不错。FireFox、Chrome、Opera 已全部支持，Safari 也大部分支持，Edge 也换成 webkit 内核了，离全面支持应该也不远了。当然社区也有兼容的解决方案 webcomponents/polyfills 。</p><h2 id="webcomponents-三要素和生命周期" tabindex="-1"><a class="header-anchor" href="#webcomponents-三要素和生命周期" aria-hidden="true">#</a> WebComponents 三要素和生命周期</h2><h3 id="button-组件示例" tabindex="-1"><a class="header-anchor" href="#button-组件示例" aria-hidden="true">#</a> Button 组件示例</h3><p>首先我们就从一个最简单的 Button 组件开始，我们可以通过在组件中传入 type 来改变按钮的样式，并且动态监听了数据的变化。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>// html
<span class="token entity named-entity" title="&lt;">&amp;lt;</span>cai-button type=<span class="token entity named-entity" title="&quot;">&amp;quot;</span>primary<span class="token entity named-entity" title="&quot;">&amp;quot;</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span> 
  <span class="token entity named-entity" title="&lt;">&amp;lt;</span>span slot=<span class="token entity named-entity" title="&quot;">&amp;quot;</span>btnText<span class="token entity named-entity" title="&quot;">&amp;quot;</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span>
    按钮
  <span class="token entity named-entity" title="&lt;">&amp;lt;</span>/span<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
<span class="token entity named-entity" title="&lt;">&amp;lt;</span>/cai-button<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
<span class="token entity named-entity" title="&lt;">&amp;lt;</span>template id=<span class="token entity named-entity" title="&quot;">&amp;quot;</span>caiBtn<span class="token entity named-entity" title="&quot;">&amp;quot;</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span>
  <span class="token entity named-entity" title="&lt;">&amp;lt;</span>style<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
    .cai-button {
      display: inline-block;
      padding: 4px 20px;
      font-size: 14px;
      line-height: 1.5715;
      font-weight: 400;
      border: 1px solid #1890ff;
      border-radius: 2px;
      background-color: #1890ff;
      color: #fff;
      box-shadow: 0 2px #00000004;
    }
    .cai-button-warning {
      border: 1px solid #faad14;
      background-color: #faad14;
    }
    .cai-button-danger {
      border: 1px solid #ff4d4f;
      background-color: #ff4d4f;
    }
  <span class="token entity named-entity" title="&lt;">&amp;lt;</span>/style<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
  <span class="token entity named-entity" title="&lt;">&amp;lt;</span>div class=<span class="token entity named-entity" title="&quot;">&amp;quot;</span>cai-button<span class="token entity named-entity" title="&quot;">&amp;quot;</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span> <span class="token entity named-entity" title="&lt;">&amp;lt;</span>slot name=<span class="token entity named-entity" title="&quot;">&amp;quot;</span>btnText<span class="token entity named-entity" title="&quot;">&amp;quot;</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span><span class="token entity named-entity" title="&lt;">&amp;lt;</span>/slot<span class="token entity named-entity" title="&gt;">&amp;gt;</span> <span class="token entity named-entity" title="&lt;">&amp;lt;</span>/div<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
<span class="token entity named-entity" title="&lt;">&amp;lt;</span>/template<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
<span class="token entity named-entity" title="&lt;">&amp;lt;</span>script<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
  const template = document.getElementById(<span class="token entity named-entity" title="&quot;">&amp;quot;</span>caiBtn<span class="token entity named-entity" title="&quot;">&amp;quot;</span>);
  class CaiButton extends HTMLElement {
    constructor() {
      super()
      this._type = {
        primary: <span class="token entity" title="&#39;">&amp;#39;</span>cai-button<span class="token entity" title="&#39;">&amp;#39;</span>,
        warning: <span class="token entity" title="&#39;">&amp;#39;</span>cai-button-warning<span class="token entity" title="&#39;">&amp;#39;</span>,
        danger: <span class="token entity" title="&#39;">&amp;#39;</span>cai-button-danger<span class="token entity" title="&#39;">&amp;#39;</span>,
      }
      // 开启shadow dom
      const shadow = this.attachShadow({
        mode: <span class="token entity" title="&#39;">&amp;#39;</span>open<span class="token entity" title="&#39;">&amp;#39;</span>
      })
      const type = this
      const content = template.content.cloneNode(true) // 克隆一份 防止重复使用 污染
      // 把响应式数据挂到this
      this._btn = content.querySelector(<span class="token entity" title="&#39;">&amp;#39;</span>.cai-button<span class="token entity" title="&#39;">&amp;#39;</span>)
      this._btn.className += \` \${this._type[type]}\`
      shadow.appendChild(content)
    }
    static get observedAttributes() {
      return [<span class="token entity" title="&#39;">&amp;#39;</span>type<span class="token entity" title="&#39;">&amp;#39;</span>]
    }
    attributeChangedCallback(name, oldValue, newValue) {
      this[name] = newValue;
      this.render();
    }
    render() {
      this._btn.className = \`cai-button \${this._type[this.type]}\`
    }
  }
  // 挂载到window
  window.customElements.define(<span class="token entity" title="&#39;">&amp;#39;</span>cai-button<span class="token entity" title="&#39;">&amp;#39;</span>, CaiButton)
<span class="token entity named-entity" title="&lt;">&amp;lt;</span>/script<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="三要素、生命周期和示例的解析" tabindex="-1"><a class="header-anchor" href="#三要素、生命周期和示例的解析" aria-hidden="true">#</a> 三要素、生命周期和示例的解析</h3><ul><li><p><strong>Custom elements（自定义元素）：</strong> 一组 JavaScript API，允许您定义 custom elements 及其行为，然后可以在您的用户界面中按照需要使用它们。在上面例子中就指的是我们的自定义组件，我们通过<code>class CaiButton extends HTMLElement {}</code> 定义我们的组件，通过<code>window.customElements.define(&amp;#39;cai-button&amp;#39;, CaiButton)</code>挂载我们的已定义组件。</p></li><li><p><strong>Shadow DOM（影子 DOM ）</strong>：一组 JavaScript API，用于将封装的“影子” DOM 树附加到元素（与主文档 DOM 分开呈现）并控制其关联的功能。通过这种方式，您可以保持元素的功能私有，这样它们就可以被脚本化和样式化，而不用担心与文档的其他部分发生冲突。使用<code>const shadow = this.attachShadow({mode : &amp;#39;open&amp;#39;})</code>在 WebComponents 中开启。</p></li><li><p><strong>HTML templates（HTML模板）slot</strong>：template 可以简化生成dom元素的操作，我们不再需要 createElement 每一个节点。slot 则和 Vue 里面的 slot 类似，只是使用名称不太一样。</p><p>内部生命周期函数</p></li><li><p><code>connectedCallback</code>: 当 WebComponents 第一次被挂在到 dom 上是触发的钩子，并且只会触发一次。类似 Vue 中的 mounted React 中的 useEffect(() =&gt; {}, [])，componentDidMount。</p></li><li><p><code>disconnectedCallback</code>: 当自定义元素与文档 DOM 断开连接时被调用。</p></li><li><p><code>adoptedCallback</code>: 当自定义元素被移动到新文档时被调用。</p></li><li><p><code>attributeChangedCallback</code>: 当自定义元素的被监听属性变化时被调用。上述例子中我们监听了 type 的变化，使 button 组件呈现不同状态。 虽然 WebComponents 有三个要素，但却不是缺一不可的，WebComponents 借助 shadow dom 来实现样式隔离，借助 templates 来简化标签的操作。</p></li></ul><p><strong>在这个例子用我们使用了 slot 传入了俩个标签之间的内容，如果我们想要不使用 slot 传入标签之间的内容怎么办？</strong></p><p>我们可以通过 <strong>innerHTML</strong> 拿到自定义组件之间的内容，然后把这段内容插入到对应节点即可。</p><h2 id="组件通信" tabindex="-1"><a class="header-anchor" href="#组件通信" aria-hidden="true">#</a> 组件通信</h2><p>了解上面这些基本的概念后，我们就可以开发一些简单的组件了，但是如果我们想传入一些复杂的数据类型（对象，数组等）怎么办？我们只传入字符串还可以么？答案是肯定的！</p><h3 id="传入复杂数据类型" tabindex="-1"><a class="header-anchor" href="#传入复杂数据类型" aria-hidden="true">#</a> 传入复杂数据类型</h3><p>使用我们上面的 button，我们不仅要改变状态，而且要想要传入一些配置，我们可以通过传入一个 JSON 字符串</p><div class="language-plain line-numbers-mode" data-ext="plain"><pre class="language-plain"><code>// html
&amp;lt;cai-button id=&amp;quot;btn&amp;quot;&amp;gt;
&amp;lt;/cai-button&amp;gt;
&amp;lt;script&amp;gt;
  btn.setAttribute(&amp;#39;config&amp;#39;, JSON.stringify({icon: &amp;#39;&amp;#39;, posi: &amp;#39;&amp;#39;}))
&amp;lt;/script&amp;gt;

// button.js 
class CaiButton extends HTMLElement {
    constructor() {
       xxx    
    }
    static get observedAttributes() {
      return [&amp;#39;type&amp;#39;, &amp;#39;config&amp;#39;] // 监听config
    }
    attributeChangedCallback(name, oldValue, newValue) {
      if(name === &amp;#39;config&amp;#39;) {
        newValue = JSON.parse(newValue)
      }
      this[name] = newValue;
      this.render();
    }
    render() {
    }
  }
  window.customElements.define(&amp;#39;cai-button&amp;#39;, CaiButton)
})()
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方式虽然可行但却不是很优雅。</p><ul><li>对于使用者说：我用你个组件你还要让我把所有的复杂类型都转换成字符串？</li><li>对于开发组件者来说：我为什么要每次都 JSON.parse() 一下？</li><li>HTML 中会有很长的数据。 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1c7094551bec435784a929f926120f34~tplv-k3u1fbpfcp-zoom-1.image" alt=""></li></ul><p>因此我们需要换一个思路，我们上面使用的方式都是 attribute 传值，数据类型只能是字符串，那我们可以不用它传值吗？答案当然也是可以的。和 attribute 形影不离还有我们 js 中的property，它指的是 dom 属性，是js对象并且支持传入复杂数据类型。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// table组件  demo,以下为伪代码 仅展示思路</span>
<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>cai<span class="token operator">-</span>table id<span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>table<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>cai<span class="token operator">-</span>table<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>

table<span class="token punctuation">.</span>dataSource <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>xxx<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">19</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>
table<span class="token punctuation">.</span>columns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方式虽然解决上述问题，但是又引出了新的问题--自定义组件中没有办法监听到这个属性的变化，那现在我们应该怎么办？ 或许从一开始是我们的思路就是错的，显然对于数据的响应式变化是我们原生 js 本来就不太具备的能力，我们不应该把使用过的框架的思想过于带入，因此从组件使用的方式上我们需要做出改变，我们不应该过于依赖属性的配置来达到某种效果，因此改造方法如下。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token entity named-entity" title="&lt;">&amp;lt;</span>cai-table thead=<span class="token entity named-entity" title="&quot;">&amp;quot;</span>Name|Age<span class="token entity named-entity" title="&quot;">&amp;quot;</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span>
  <span class="token entity named-entity" title="&lt;">&amp;lt;</span>cai-tr<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
    <span class="token entity named-entity" title="&lt;">&amp;lt;</span>cai-td<span class="token entity named-entity" title="&gt;">&amp;gt;</span>zs<span class="token entity named-entity" title="&lt;">&amp;lt;</span>/cai-td<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
    <span class="token entity named-entity" title="&lt;">&amp;lt;</span>cai-td<span class="token entity named-entity" title="&gt;">&amp;gt;</span>18<span class="token entity named-entity" title="&lt;">&amp;lt;</span>/cai-td<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
  <span class="token entity named-entity" title="&lt;">&amp;lt;</span>/cai-tr<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
  <span class="token entity named-entity" title="&lt;">&amp;lt;</span>cai-tr<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
    <span class="token entity named-entity" title="&lt;">&amp;lt;</span>cai-td<span class="token entity named-entity" title="&gt;">&amp;gt;</span>ls<span class="token entity named-entity" title="&lt;">&amp;lt;</span>/cai-td<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
        <span class="token entity named-entity" title="&lt;">&amp;lt;</span>cai-td<span class="token entity named-entity" title="&gt;">&amp;gt;</span>18<span class="token entity named-entity" title="&lt;">&amp;lt;</span>/cai-td<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
  <span class="token entity named-entity" title="&lt;">&amp;lt;</span>/cai-tr<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
<span class="token entity named-entity" title="&lt;">&amp;lt;</span>/cai-table<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们把属于 HTML 原生的能力归还，而是不是采用配置的方式，就解决了这个问题，但是这样同时也决定了我们的组件并不支持太过复杂的能力。</p><h3 id="状态的双向绑定" tabindex="-1"><a class="header-anchor" href="#状态的双向绑定" aria-hidden="true">#</a> 状态的双向绑定</h3><p>上面讲了数据的单向绑定，组件状态页面也会随之更新，那么我们怎么实现双向绑定呢？</p><p>接下来我们封装一个 input 来实现双向绑定。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>cai<span class="token operator">-</span>input id<span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>ipt<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span> <span class="token operator">:</span>value<span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>data<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span> @change<span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span> data <span class="token operator">=</span> e<span class="token punctuation">.</span>detail <span class="token punctuation">}</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>cai<span class="token operator">-</span>input<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>

<span class="token comment">// js</span>
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> template <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>template<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
  template<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
  &amp;lt;style&amp;gt;
    .cai-input {

    }
  &amp;lt;/style&amp;gt;
  &amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;caiInput&amp;quot;&amp;gt;
  </span><span class="token template-punctuation string">\`</span></span>
  <span class="token keyword">class</span> <span class="token class-name">CaiInput</span> <span class="token keyword">extends</span> <span class="token class-name">HTMLElement</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">const</span> shadow <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">attachShadow</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>closed<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token keyword">const</span> content <span class="token operator">=</span> template<span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>_input <span class="token operator">=</span> content<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>#caiInput<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>_input<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>value<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
      shadow<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>_input<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>input<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> ev <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> target <span class="token operator">=</span> ev<span class="token punctuation">.</span>target<span class="token punctuation">;</span>
        <span class="token keyword">const</span> value <span class="token operator">=</span> target<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CustomEvent</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>change<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">detail</span><span class="token operator">:</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">get</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>value<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">set</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>value<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  window<span class="token punctuation">.</span>customElements<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>cai<span class="token operator">-</span>input<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> CaiInput<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这样就封装了一个简单双向绑定的 input 组件，代码中 get/set 和 observedAttributes / attributeChangedCallback 前者是监听单个，后者可以监听多个状态改变并做出处理。</li><li>这里面核心的一步是 我们监听了这个表单的input事件，并且在每次触发 input 事件的时候触发<strong>自定义的 change 事件</strong>，并且把输入的参数回传。</li><li>那我们应该怎么使用呢？ 以 vue 为例子，vue 的双向绑定 v-model 其实是一个语法糖, 我们的组件则没有办法使用这个语法糖，与 v-model 不简化写法类似 <code>&amp;lt;cai-input :value=&amp;quot;data&amp;quot; @change=&amp;quot;(e) =&amp;gt; { data = e.detail }&amp;quot;&amp;gt;</code></li></ul><h2 id="封装我们自己的组件库" tabindex="-1"><a class="header-anchor" href="#封装我们自己的组件库" aria-hidden="true">#</a> 封装我们自己的组件库</h2><h3 id="设计目录结构" tabindex="-1"><a class="header-anchor" href="#设计目录结构" aria-hidden="true">#</a> 设计目录结构</h3><p>第一步：要有一个优雅的组价库我们首先要设计一个优雅的目录结构 设计目录结构如下</p><div class="language-plain line-numbers-mode" data-ext="plain"><pre class="language-plain"><code>.
└── cai-ui
    ├── components // 自定义组件
    |   ├── Button
        |       |     ├── index.js
    |   └── ...
    └── index.js.  // 主入口
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="独立封装" tabindex="-1"><a class="header-anchor" href="#独立封装" aria-hidden="true">#</a> 独立封装</h3><p>独立封装我们的组件，由于我们组件库中组件的引入，我们肯定是需要把每个组件封装到单独文件中的。</p><p>在我们的 Button/index.js 中写入如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> template <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>template<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
  template<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
  &amp;lt;style&amp;gt;
    /* css和上面一样 */
  &amp;lt;/style&amp;gt;
  &amp;lt;div class=&amp;quot;cai-button&amp;quot;&amp;gt; &amp;lt;slot name=&amp;quot;text&amp;quot;&amp;gt;&amp;lt;/slot&amp;gt; &amp;lt;/div&amp;gt;
  </span><span class="token template-punctuation string">\`</span></span>
  <span class="token keyword">class</span> <span class="token class-name">CaiButton</span> <span class="token keyword">extends</span> <span class="token class-name">HTMLElement</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token comment">// 其余和上述一样</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">static</span> <span class="token keyword">get</span> <span class="token function">observedAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>type<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    <span class="token function">attributeChangedCallback</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> oldValue<span class="token punctuation">,</span> newValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> newValue<span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>_btn<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">cai-button </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>_type<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  window<span class="token punctuation">.</span>customElements<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>cai<span class="token operator">-</span>button<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> CaiButton<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>封装到组件到单独的 js 文件中</p><h3 id="全部导入和按需导入" tabindex="-1"><a class="header-anchor" href="#全部导入和按需导入" aria-hidden="true">#</a> 全部导入和按需导入</h3><ol><li>支持全部导入，我们通过一个 js 文件全部引入组件</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// index.js</span>
<span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token operator">/</span>components<span class="token operator">/</span>Button<span class="token operator">/</span>index<span class="token punctuation">.</span>js<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token operator">/</span>components<span class="token operator">/</span>xxx<span class="token operator">/</span>xxx<span class="token punctuation">.</span>js<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>按需导入我们只需要导入组件的js文件即可如<code>import &amp;#39;cai-ui/components/Button/index.js&amp;#39;</code></li></ol><h3 id="自定义配置主题" tabindex="-1"><a class="header-anchor" href="#自定义配置主题" aria-hidden="true">#</a> 自定义配置主题</h3><p>支持主题色可配置 我们只需把颜色写成变量即可，改造如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> template <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>template<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
  template<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
  &amp;lt;style&amp;gt;
        /* 多余省略 */
    .cai-button {
      border: 1px solid  var(--primary-color, #1890ff);
      background-color: var(--primary-color, #1890ff);
    }
    .cai-button-warning {
      border: 1px solid var(--warning-color, #faad14);
      background-color: var(--warning-color, #faad14);
    }
    .cai-button-danger {
      border: 1px solid var(--danger-color, #ff4d4f);
      background-color: var(--danger-color, #ff4d4f);
    }  
  &amp;lt;/style&amp;gt;
  &amp;lt;div class=&amp;quot;cai-button&amp;quot;&amp;gt; &amp;lt;slot name=&amp;quot;text&amp;quot;&amp;gt;&amp;lt;/slot&amp;gt; &amp;lt;/div&amp;gt;
  </span><span class="token template-punctuation string">\`</span></span>
  <span class="token comment">// 后面省略...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,44),m={href:"https://github.com/lovelts/cai-ui",target:"_blank",rel:"noopener noreferrer"},v=e(`<h2 id="在原生、vue-和-react-中优雅的使用" tabindex="-1"><a class="header-anchor" href="#在原生、vue-和-react-中优雅的使用" aria-hidden="true">#</a> 在原生、Vue 和 React 中优雅的使用</h2><h3 id="在原生-html-中应用" tabindex="-1"><a class="header-anchor" href="#在原生-html-中应用" aria-hidden="true">#</a> 在原生 HTML 中应用：</h3><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token entity named-entity" title="&lt;">&amp;lt;</span>script type=<span class="token entity named-entity" title="&quot;">&amp;quot;</span>module<span class="token entity named-entity" title="&quot;">&amp;quot;</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span>
    import <span class="token entity" title="&#39;">&amp;#39;</span>//cai-ui<span class="token entity" title="&#39;">&amp;#39;</span>;
<span class="token entity named-entity" title="&lt;">&amp;lt;</span>/script<span class="token entity named-entity" title="&gt;">&amp;gt;</span>

<span class="token entity named-entity" title="&lt;">&amp;lt;</span>!--or--<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
<span class="token entity named-entity" title="&lt;">&amp;lt;</span>script type=<span class="token entity named-entity" title="&quot;">&amp;quot;</span>module<span class="token entity named-entity" title="&quot;">&amp;quot;</span> src=<span class="token entity named-entity" title="&quot;">&amp;quot;</span>//cai-ui<span class="token entity named-entity" title="&quot;">&amp;quot;</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span><span class="token entity named-entity" title="&lt;">&amp;lt;</span>/script<span class="token entity named-entity" title="&gt;">&amp;gt;</span>

<span class="token entity named-entity" title="&lt;">&amp;lt;</span>cai-button type=<span class="token entity named-entity" title="&quot;">&amp;quot;</span>primary<span class="token entity named-entity" title="&quot;">&amp;quot;</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span>点击<span class="token entity named-entity" title="&lt;">&amp;lt;</span>/cai-button<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
<span class="token entity named-entity" title="&lt;">&amp;lt;</span>cai-input id=<span class="token entity named-entity" title="&quot;">&amp;quot;</span>caiIpt<span class="token entity named-entity" title="&quot;">&amp;quot;</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span><span class="token entity named-entity" title="&lt;">&amp;lt;</span>/cai-button<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
<span class="token entity named-entity" title="&lt;">&amp;lt;</span>script<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
  const caiIpt = document.getElementById(<span class="token entity" title="&#39;">&amp;#39;</span>caiIpt<span class="token entity" title="&#39;">&amp;#39;</span>)
  /* 获取输入框的值有两种方法
   * 1. getAttribute
   * 2. change 事件
  */
  caiIpt.getAttribute(<span class="token entity" title="&#39;">&amp;#39;</span>value<span class="token entity" title="&#39;">&amp;#39;</span>) 
  caiIpt.addEventListener(<span class="token entity" title="&#39;">&amp;#39;</span>change<span class="token entity" title="&#39;">&amp;#39;</span>, function(e) {
    console.log(e); // e.detail 为表单的值
  }) 
<span class="token entity named-entity" title="&lt;">&amp;lt;</span>/script<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="在-vue-2x-中的应用" tabindex="-1"><a class="header-anchor" href="#在-vue-2x-中的应用" aria-hidden="true">#</a> 在 Vue 2x 中的应用:</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// main.js</span>
<span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>cai<span class="token operator">-</span>ui<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>

<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>template<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>div id<span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>app<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>cai<span class="token operator">-</span>button <span class="token operator">:</span>type<span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>type<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
      <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>span slot<span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>text<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>哈哈哈<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>span<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>cai<span class="token operator">-</span>button<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>cai<span class="token operator">-</span>button @click<span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>changeType<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
      <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>span slot<span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>text<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>哈哈哈<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>span<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>cai<span class="token operator">-</span>button<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>cai<span class="token operator">-</span>input id<span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>ipt<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span> <span class="token operator">:</span>value<span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>data<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span> @change<span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span> data <span class="token operator">=</span> e<span class="token punctuation">.</span>detail <span class="token punctuation">}</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>cai<span class="token operator">-</span>input<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>div<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>template<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>script<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>App<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>primary<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">changeType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>danger<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>script<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="在-vue-3x-中的差异" tabindex="-1"><a class="header-anchor" href="#在-vue-3x-中的差异" aria-hidden="true">#</a> 在 Vue 3x 中的差异:</h3>`,6),b={href:"https://custom-elements-everywhere.com/libraries/vue/results/results.html",target:"_blank",rel:"noopener noreferrer"},y=e(`<h4 id="跳过-vue-本身对组件的解析" tabindex="-1"><a class="header-anchor" href="#跳过-vue-本身对组件的解析" aria-hidden="true">#</a> 跳过 Vue 本身对组件的解析</h4><p>custom Elements 的风格和 Vue 组件很像，导致 Vue 会把自定义（非原生的 HTML 标签）标签解析并注册为一个 Vue 组件，然后解析失败才会再解析为一个自定义组件，这样会消耗一定的性能并且会在控制台警告，因此我们需要在构建工具中跳过这个解析：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vite.config.js</span>
<span class="token keyword">import</span> vue from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>@vitejs<span class="token operator">/</span>plugin<span class="token operator">-</span>vue<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">compilerOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token comment">// 将所有包含短横线的标签作为自定义元素处理</span>
          <span class="token literal-property property">isCustomElement</span><span class="token operator">:</span> tag <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> tag<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>组件的具体使用方法和 Vue 2x 类似。</p><h3 id="在-react-中的应用" tabindex="-1"><a class="header-anchor" href="#在-react-中的应用" aria-hidden="true">#</a> 在 React 中的应用</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useEffect<span class="token punctuation">,</span> useRef<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>react<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>cai<span class="token operator">-</span>ui<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>type<span class="token punctuation">,</span> setType<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>primary<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> setValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> iptRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>
  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>ipt<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>change<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> handleClick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setType</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>danger<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>div className<span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>App<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
      <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>cai<span class="token operator">-</span>button type<span class="token operator">=</span><span class="token punctuation">{</span>type<span class="token punctuation">}</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>span slot<span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>text<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>哈哈哈<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>span<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
      <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>cai<span class="token operator">-</span>button<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
      <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>cai<span class="token operator">-</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>span slot<span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>text<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>点击<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>span<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
      <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>cai<span class="token operator">-</span>button<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
      <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>cai<span class="token operator">-</span>input id<span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>ipt<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span> ref<span class="token operator">=</span><span class="token punctuation">{</span>iptRef<span class="token punctuation">}</span> value<span class="token operator">=</span><span class="token punctuation">{</span>value<span class="token punctuation">}</span> <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>cai<span class="token operator">-</span>input<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>div<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>&gt;Web Components 触发的事件可能无法通过 React 渲染树正确的传递。 你需要在 React 组件中手动添加事件处理器来处理这些事件。 在 React 使用有个点我们需要注意下，WebComponents 组件我们需要添加类时需要使用 class 而不是 className</p><h2 id="总结现阶段的劣势" tabindex="-1"><a class="header-anchor" href="#总结现阶段的劣势" aria-hidden="true">#</a> 总结现阶段的劣势</h2><p>看完这篇文章大家肯定会觉得为什么 WebComponents 实现了一份代码多个框架使用，却还没有霸占组件库的市场呢？我总结了一下几点：</p><ul><li>更加偏向于 UI 层面，与现在数据驱动不太符，和现在的组件库能力上相比功能会比较弱，使用场景相对单一。</li><li>兼容性还有待提升：这里不仅仅指的是浏览器的兼容性，还有框架的兼容性，在框架中使用偶尔会发现意外的“惊喜”，并且写法会比较复杂。</li><li>如果不借助框架开发的话，写法会返璞归真，HTML CSS JS 会糅合在一个文件，html CSS 都是字符串的形式 ，没有高亮，格式也需要自己调整，对于开发人员来说还是难受的。</li><li>单元测试使用繁琐：单元测试是组件库核心的一项，但是在 WebComponents 中使用单元测试十分复杂。</li></ul><h2 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档" aria-hidden="true">#</a> 参考文档：</h2>`,11),g={href:"https://developer.mozilla.org/en-US/docs/Web/Web_Components",target:"_blank",rel:"noopener noreferrer"},h={href:"https://v3.cn.vuejs.org/guide/web-components.html#vue-%E4%B8%8E-web-components",target:"_blank",rel:"noopener noreferrer"},f={href:"https://zh-hans.reactjs.org/docs/web-components.html",target:"_blank",rel:"noopener noreferrer"},w=n("h2",{id:"推荐阅读",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#推荐阅读","aria-hidden":"true"},"#"),a(" 推荐阅读")],-1),q={href:"https://juejin.cn/post/7091068088975622175",target:"_blank",rel:"noopener noreferrer"},x={href:"https://juejin.cn/post/7085873582588297224",target:"_blank",rel:"noopener noreferrer"},_={href:"https://juejin.cn/post/7078078998357475358",target:"_blank",rel:"noopener noreferrer"},j=n("p",null,'[浅析 Snabbdom 中 vnode 和 diff 算法](https://juejin.cn/post/7067693810918096903 "浅析 Snabbdom 中 vnode 和 diff 算法")',-1),C=n("p",null,'[如何利用 SCSS 实现一键换肤](https://juejin.cn/post/7062496975454732301 "如何利用 SCSS 实现一键换肤")',-1),E=n("h2",{id:"开源作品",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#开源作品","aria-hidden":"true"},"#"),a(" 开源作品")],-1),S=n("ul",null,[n("li",null,"政采云前端小报")],-1),V={href:"https://www.zoo.team/openweekly/",target:"_blank",rel:"noopener noreferrer"},T=n("ul",null,[n("li",null,"商品选择 sku 插件")],-1),B={href:"https://github.com/zcy-inc/skuPathFinder-back",target:"_blank",rel:"noopener noreferrer"},M=n("h2",{id:"招贤纳士",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#招贤纳士","aria-hidden":"true"},"#"),a(" 招贤纳士")],-1),L=n("p",null,"政采云前端团队（ZooTeam），一个年轻富有激情和创造力的前端团队，隶属于政采云产品研发部，Base 在风景如画的杭州。团队现有 60 余个前端小伙伴，平均年龄 27 岁，近 4 成是全栈工程师，妥妥的青年风暴团。成员构成既有来自于阿里、网易的“老”兵，也有浙大、中科大、杭电等校的应届新人。团队在日常的业务对接之外，还在物料体系、工程平台、搭建平台、性能体验、云端应用、数据分析及可视化等方向进行技术探索和实战，推动并落地了一系列的内部技术产品，持续探索前端技术体系的新边界。",-1),W=n("p",null,[a("如果你想改变一直被事折腾，希望开始能折腾事；如果你想改变一直被告诫需要多些想法，却无从破局；如果你想改变你有能力去做成那个结果，却不需要你；如果你想改变你想做成的事需要一个团队去支撑，但没你带人的位置；如果你想改变既定的节奏，将会是“5 年工作时间 3 年工作经验”；如果你想改变本来悟性不错，但总是有那一层窗户纸的模糊… 如果你相信相信的力量，相信平凡人能成就非凡事，相信能遇到更好的自己。如果你希望参与到随着业务腾飞的过程，亲手推动一个有着深入的业务理解、完善的技术体系、技术创造价值、影响力外溢的前端团队的成长历程，我觉得我们该聊聊。任何时间，等着你写点什么，发给 "),n("code",null,"ZooTeam@cai-inc.com")],-1),I=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/98d3aa3d1f8646a8bcda8cfd9e335a4b~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1);function A(N,H){const s=i("ExternalLinkIcon");return o(),l("div",null,[u,r,n("p",null,[a("> 这是第 142 篇不掺水的原创，想获取更多原创好文，请搜索公众号关注我们吧~ 本文首发于政采云前端博客："),n("a",d,[a("如何基于 WebComponents 封装 UI 组件库"),t(s)])]),k,n("p",null,[a("这样我们就能在全局中修改主题色了。 "),n("a",m,[a("案例地址"),t(s)])]),v,n("p",null,[a("在最近的 Vue3 中，Vue 对 WebComponents 有了更好的支持。Vue "),n("a",b,[a("在 Custom Elements Everywhere 测试中获得了 100% 的完美分数"),t(s)]),a("。但是还需要我们做出如下配置：")]),y,n("ul",null,[n("li",null,[n("a",g,[a("WebComponents | MDN"),t(s)])]),n("li",null,[n("a",h,[a("Vue 3.0 官方文档"),t(s)])]),n("li",null,[n("a",f,[a("React 官方文档"),t(s)])])]),w,n("p",null,[n("a",q,[a("Web Worker"),t(s)])]),n("p",null,[n("a",x,[a("如何落地一个智能机器人"),t(s)])]),n("p",null,[n("a",_,[a("一名练习时长 2 年零 8 个月的前端练习生自述"),t(s)])]),j,C,E,S,n("p",null,[n("strong",null,[a("开源地址 "),n("a",V,[a("www.zoo.team/openweekly/"),t(s)])]),a(" (小报官网首页有微信交流群)")]),T,n("p",null,[n("strong",null,[a("开源地址 "),n("a",B,[a("https://github.com/zcy-inc/skuPathFinder-back/"),t(s)])])]),M,L,W,I])}const R=p(c,[["render",A],["__file","如何基于 WebComponents 封装 UI 组件库.html.vue"]]);export{R as default};
