import{_ as t,z as n,A as d,Y as e,C as a,U as i,a6 as r,Q as p}from"./framework-cb9358d9.js";const l={},o=e("p",null,[e("img",{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/7/24/1737e6038b00329e~tplv-t2oaga2asx-image.image",alt:""})],-1),c=e("br",null,null,-1),m={href:"https://www.zoo.team/article/http-cache",target:"_blank",rel:"noopener noreferrer"},g=r(`<p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/10/171fea4e2ffb17d3~tplv-t2oaga2asx-image.image" alt=""></p><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>HTTP 的缓存机制，可以说这是前端工程师需要掌握的重要知识点之一。本文将针对 HTTP 缓存整体的流程做一个详细的讲解，争取做到大家读完整篇文章后，对缓存有一个整体的了解。</p><p>HTTP 缓存分为 2 种，一种是强缓存，另一种是协商缓存。主要作用是可以加快资源获取速度，提升用户体验，减少网络传输，缓解服务端的压力。这是缓存运作的一个整体流程图：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/10/171fea0fec0b4668~tplv-t2oaga2asx-image.image" alt="Http缓存.jpg"></p><h2 id="强缓存" tabindex="-1"><a class="header-anchor" href="#强缓存" aria-hidden="true">#</a> 强缓存</h2><p>不需要发送请求到服务端，直接读取浏览器本地缓存，在 Chrome 的 Network 中显示的 HTTP 状态码是 200 ，在 Chrome 中，强缓存又分为 Disk Cache (存放在硬盘中)和 Memory Cache (存放在内存中)，存放的位置是由浏览器控制的。是否强缓存由 Expires、Cache-Control 和 Pragma 3 个 Header 属性共同来控制。</p><h3 id="○-expires" tabindex="-1"><a class="header-anchor" href="#○-expires" aria-hidden="true">#</a> ○ Expires</h3><p>Expires 的值是一个 HTTP 日期，在浏览器发起请求时，会根据系统时间和 Expires 的值进行比较，如果系统时间超过了 Expires 的值，缓存失效。由于和系统时间进行比较，所以当系统时间和服务器时间不一致的时候，会有缓存有效期不准的问题。Expires 的优先级在三个 Header 属性中是最低的。</p><h3 id="○-cache-control" tabindex="-1"><a class="header-anchor" href="#○-cache-control" aria-hidden="true">#</a> ○ Cache-Control</h3><p>Cache-Control 是 HTTP/1.1 中新增的属性，在请求头和响应头中都可以使用，常用的属性值如有：</p><ul><li>max-age：单位是秒，缓存时间计算的方式是距离发起的时间的秒数，超过间隔的秒数缓存失效</li><li>no-cache：不使用强缓存，需要与服务器验证缓存是否新鲜</li><li>no-store：禁止使用缓存（包括协商缓存），每次都向服务器请求最新的资源</li><li>private：专用于个人的缓存，中间代理、CDN 等不能缓存此响应</li><li>public：响应可以被中间代理、CDN 等缓存</li><li>must-revalidate：在缓存过期前可以使用，过期后必须向服务器验证</li></ul><h3 id="○-pragma" tabindex="-1"><a class="header-anchor" href="#○-pragma" aria-hidden="true">#</a> ○ Pragma</h3><p>Pragma 只有一个属性值，就是 no-cache ，效果和 Cache-Control 中的 no-cache 一致，不使用强缓存，需要与服务器验证缓存是否新鲜，在 3 个头部属性中的优先级最高。</p><p>本地通过 express 起一个服务来验证强缓存的 3 个属性，代码如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>const express = require(&amp;#39;express&amp;#39;);
const app = express();
var options = { 
  etag: false, // 禁用协商缓存
  lastModified: false, // 禁用协商缓存
  setHeaders: (res, path, stat) =&amp;gt; {
    res.set(&amp;#39;Cache-Control&amp;#39;, &amp;#39;max-age=10&amp;#39;); // 强缓存超时时间为10秒
  },
};
app.use(express.static((__dirname + &amp;#39;/public&amp;#39;), options));
app.listen(3000);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一次加载，页面会向服务器请求数据，并在 Response Header 中添加 Cache-Control ，过期时间为 10 秒。</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/10/171fea0fefc0c914~tplv-t2oaga2asx-image.image" alt="缓存1.jpg"></p><p>第二次加载，Date 头属性未更新，可以看到浏览器直接使用了强缓存，实际没有发送请求。</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/10/171fea0fec38cd06~tplv-t2oaga2asx-image.image" alt="缓存2.jpg"></p><p>过了 10 秒的超时时间之后，再次请求资源：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/10/171fea0ff0566887~tplv-t2oaga2asx-image.image" alt="缓存3.jpg"></p><p>当 Pragma 和 Cache-Control 同时存在的时候，Pragma 的优先级高于 Cache-Control。</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/10/171fea0ff1465018~tplv-t2oaga2asx-image.image" alt="缓存5.jpg"></p><h2 id="协商缓存" tabindex="-1"><a class="header-anchor" href="#协商缓存" aria-hidden="true">#</a> 协商缓存</h2><p>当浏览器的强缓存失效的时候或者请求头中设置了不走强缓存，并且在请求头中设置了If-Modified-Since 或者 If-None-Match 的时候，会将这两个属性值到服务端去验证是否命中协商缓存，如果命中了协商缓存，会返回 304 状态，加载浏览器缓存，并且响应头会设置 Last-Modified 或者 ETag 属性。</p><h3 id="○-etag-if-none-match" tabindex="-1"><a class="header-anchor" href="#○-etag-if-none-match" aria-hidden="true">#</a> ○ ETag/If-None-Match</h3><p>ETag/If-None-Match 的值是一串 hash 码，代表的是一个资源的标识符，当服务端的文件变化的时候，它的 hash码会随之改变，通过请求头中的 If-None-Match 和当前文件的 hash 值进行比较，如果相等则表示命中协商缓存。ETag 又有强弱校验之分，如果 hash 码是以 &quot;W/&quot; 开头的一串字符串，说明此时协商缓存的校验是弱校验的，只有服务器上的文件差异（根据 ETag 计算方式来决定）达到能够触发 hash 值后缀变化的时候，才会真正地请求资源，否则返回 304 并加载浏览器缓存。</p><h3 id="○-last-modified-if-modified-since" tabindex="-1"><a class="header-anchor" href="#○-last-modified-if-modified-since" aria-hidden="true">#</a> ○ Last-Modified/If-Modified-Since</h3><p>Last-Modified/If-Modified-Since 的值代表的是文件的最后修改时间，第一次请求服务端会把资源的最后修改时间放到 Last-Modified 响应头中，第二次发起请求的时候，请求头会带上上一次响应头中的 Last-Modified 的时间，并放到 If-Modified-Since 请求头属性中，服务端根据文件最后一次修改时间和 If-Modified-Since 的值进行比较，如果相等，返回 304 ，并加载浏览器缓存。</p><p>本地通过 express 起一个服务来验证协商缓存，代码如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>const express = require(&amp;#39;express&amp;#39;);
const app = express();
var options = { 
  etag: true, // 开启协商缓存
  lastModified: true, // 开启协商缓存
  setHeaders: (res, path, stat) =&amp;gt; {
    res.set({
      &amp;#39;Cache-Control&amp;#39;: &amp;#39;max-age=00&amp;#39;, // 浏览器不走强缓存
      &amp;#39;Pragma&amp;#39;: &amp;#39;no-cache&amp;#39;, // 浏览器不走强缓存
    });
  },
};
app.use(express.static((__dirname + &amp;#39;/public&amp;#39;), options));
app.listen(3001);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一次请求资源:</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/10/171fea0ff25773ac~tplv-t2oaga2asx-image.image" alt="缓存6.jpg"></p><p>第二次请求资源，服务端根据请求头中的 If-Modified-Since 和 If-None-Match 验证文件是否修改。</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/10/171fea102889a5fc~tplv-t2oaga2asx-image.image" alt="缓存7.jpg"></p><p>我们再来验证一下 ETag 在强校验的情况下，只增加一行空格，hash 值如何变化，在代码中，我采用的是对文件进行 MD5 加密来计算其 hash 值。</p><p>注：只是为了演示用，实际计算不是通过 MD5 加密的，Apache 默认通过 FileEtag 中 FileEtag INode Mtime Size 的配置自动生成 ETag，用户可以通过自定义的方式来修改文件生成 ETag 的方式。</p><p>为了保证 lastModified 不影响缓存，我把通过 Last-Modified/If-Modified-Since 请求头删除了，源码如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>const express = require(&amp;#39;express&amp;#39;);
const CryptoJS = require(&amp;#39;crypto-js/crypto-js&amp;#39;);
const fs = require(&amp;#39;fs&amp;#39;);
const app = express();
var options = { 
  etag: true, // 只通过Etag来判断
  lastModified: false, // 关闭另一种协商缓存
  setHeaders: (res, path, stat) =&amp;gt; {
    const data = fs.readFileSync(path, &amp;#39;utf-8&amp;#39;); // 读取文件
    const hash = CryptoJS.MD5((JSON.stringify(data))); // MD5加密
    res.set({
      &amp;#39;Cache-Control&amp;#39;: &amp;#39;max-age=00&amp;#39;, // 浏览器不走强缓存
      &amp;#39;Pragma&amp;#39;: &amp;#39;no-cache&amp;#39;, // 浏览器不走强缓存
      &amp;#39;ETag&amp;#39;: hash, // 手动设置Etag值为MD5加密后的hash值
    });
  },
};
app.use(express.static((__dirname + &amp;#39;/public&amp;#39;), options));
app.listen(4000); // 使用新端口号，否则上面验证的协商缓存会一直存在
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一次和第二次请求如下：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/10/171fea1028a3c5a1~tplv-t2oaga2asx-image.image" alt="缓存10.jpg"></p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/10/171fea102b4fd3ff~tplv-t2oaga2asx-image.image" alt="缓存11.jpg"></p><p>然后我修改了 test.js ，增加一个空格后再删除一个空格，保持文件内容不变，但文件的修改时间改变，发起第三次请求，由于我生成 ETag 的方式是通过对文件内容进行 MD5 加密生成，所以虽然修改时间变化了，但请求依然返回了 304 ，读取浏览器缓存。</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/10/171fea102b886f6d~tplv-t2oaga2asx-image.image" alt="缓存13.jpg"></p><p>ETag/If-None-Match 的出现主要解决了 Last-Modified/If-Modified-Since 所解决不了的问题：</p><ul><li>如果文件的修改频率在秒级以下，Last-Modified/If-Modified-Since 会错误地返回 304</li><li>如果文件被修改了，但是内容没有任何变化的时候，Last-Modified/If-Modified-Since 会错误地返回 304 ，上面的例子就说明了这个问题</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>在实际使用场景中，比如政采云的官网。图片、不常变化的 JS 等静态资源都会使用缓存来提高页面的加载速度。例如政采云首页的顶部导航栏，埋点 SDK 等等。</p><p>在文章的最后，我们再次回到这张流程图，这张图涵盖了 HTTP 缓存的整体流程，大家对整体流程熟悉后，也可以自己动手通过 Node 来验证下 HTTP 缓存。</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/10/171fea0fec0b4668~tplv-t2oaga2asx-image.image" alt="Http缓存.jpg"></p><h2 id="推荐阅读" tabindex="-1"><a class="header-anchor" href="#推荐阅读" aria-hidden="true">#</a> 推荐阅读</h2>`,52),h={href:"https://juejin.cn/post/6844903988081475591",target:"_blank",rel:"noopener noreferrer"},u={href:"https://juejin.cn/post/6844904038555729927",target:"_blank",rel:"noopener noreferrer"},v=e("h2",{id:"招贤纳士",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#招贤纳士","aria-hidden":"true"},"#"),a(" 招贤纳士")],-1),f=e("p",null,"政采云前端团队（ZooTeam），一个年轻富有激情和创造力的前端团队，隶属于政采云产品研发部，Base 在风景如画的杭州。团队现有 50 余个前端小伙伴，平均年龄 27 岁，近 3 成是全栈工程师，妥妥的青年风暴团。成员构成既有来自于阿里、网易的“老”兵，也有浙大、中科大、杭电等校的应届新人。团队在日常的业务对接之外，还在物料体系、工程平台、搭建平台、性能体验、云端应用、数据分析及可视化等方向进行技术探索和实战，推动并落地了一系列的内部技术产品，持续探索前端技术体系的新边界。",-1),b=e("p",null,[a("如果你想改变一直被事折腾，希望开始能折腾事；如果你想改变一直被告诫需要多些想法，却无从破局；如果你想改变你有能力去做成那个结果，却不需要你；如果你想改变你想做成的事需要一个团队去支撑，但没你带人的位置；如果你想改变既定的节奏，将会是“ 5 年工作时间 3 年工作经验”；如果你想改变本来悟性不错，但总是有那一层窗户纸的模糊… 如果你相信相信的力量，相信平凡人能成就非凡事，相信能遇到更好的自己。如果你希望参与到随着业务腾飞的过程，亲手推动一个有着深入的业务理解、完善的技术体系、技术创造价值、影响力外溢的前端团队的成长历程，我觉得我们该聊聊。任何时间，等着你写点什么，发给 "),e("code",null,"ZooTeam@cai-inc.com")],-1),x=e("p",null,[e("img",{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/7/24/1737e6194e9c083d~tplv-t2oaga2asx-image.image",alt:""})],-1);function _(j,M){const s=p("ExternalLinkIcon");return n(),d("div",null,[o,e("p",null,[a("> 这是第 49 篇不掺水的原创，想获取更多原创好文，请扫 👆上方二维码关注我们吧~"),c,a(" > 本文首发于政采云前端团队博客："),e("a",m,[a("图解 HTTP 缓存"),i(s)])]),g,e("p",null,[e("a",h,[a("可能是最全的 “文本溢出截断省略” 方案合集"),i(s)])]),e("p",null,[e("a",u,[a("图文并茂，为你揭开“单点登录“的神秘面纱"),i(s)])]),v,f,b,x])}const C=t(l,[["render",_],["__file","图解 HTTP 缓存.html.vue"]]);export{C as default};
