import{_ as p,z as o,A as l,Y as t,C as a,U as n,a6 as s,Q as r}from"./framework-cb9358d9.js";const i={},c=s('<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bfefad3ee3474e3a8a461251aaddceb4~tplv-k3u1fbpfcp-watermark.image?" alt="政采云技术团队.png"></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/29a8a543e7ad456eb573501b05ff9796~tplv-k3u1fbpfcp-watermark.image?" alt="刘静.png"></p><p>&gt; 这是第 159 篇不掺水的原创，想获取更多原创好文，请搜索公众号【政采云前端团队】关注我们吧~</p><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>在日常工作中，当组件跨项目使用时，我们往往会选择把组件抽成 npm 包。那么在 npm 开发以及发布的过程中有什么需要注意的事项吗？本文将从我自己的角度，来为大家介绍一下我认为的一些需要大家注意的点。</p><h2 id="版本号规则" tabindex="-1"><a class="header-anchor" href="#版本号规则" aria-hidden="true">#</a> 版本号规则</h2>',6),d={href:"http://tom.preston-werner.com/",target:"_blank",rel:"noopener noreferrer"},g={href:"https://semver.org/lang/zh-CN/",target:"_blank",rel:"noopener noreferrer"},u=s(`<ul><li><p>X 代表主版本号，也叫做大版本号</p><p>升级大版本时意味着这个包可能做了颠覆性的改动，和低版本的包已经<strong>无法兼容</strong>。每当主版本号递增时，次版本号和修订号必须归零。</p></li><li><p>Y 代表次版本号，也叫做小版本号</p><p>当做了<strong>向下兼容</strong>的功能性新增时，升级小版本号。每当次版本号递增时，修订号必须归零。</p></li><li><p>Z 代表修订号</p><p>当做了<strong>向下兼容</strong>的问题修正（bugfix）时， 升级修订号。</p></li></ul><h2 id="常见版本格式-引用方式" tabindex="-1"><a class="header-anchor" href="#常见版本格式-引用方式" aria-hidden="true">#</a> 常见版本格式/引用方式</h2><p>&lt;table&gt; &lt;tr&gt; &lt;td style=&quot;width: 130px&quot;&gt;版本引用方式&lt;/td&gt; &lt;td style=&quot;width: 90px&quot;&gt;版本号&lt;/td&gt; &lt;td&gt;匹配版本&lt;/td&gt; &lt;td&gt;解释&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;直接使用版本号&lt;/td&gt; &lt;td&gt;2.3.1&lt;/td&gt; &lt;td&gt;2.3.1&lt;/td&gt; &lt;td&gt;只可以匹配 2.3.1 这个版本，如果是比较重要的项目，建议用这种方式固定版本。&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td rowspan=&#39;3&#39;&gt;^:不能修改版本号最左侧非零数字&lt;/td&gt; &lt;td&gt;^2.3.1&lt;/td&gt; &lt;td&gt;&gt;= 2.3.1 &amp;&amp; &lt; 3.0.0&lt;/td&gt; &lt;td&gt;最左侧非零数字是 2&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;^0.3.1&lt;/td&gt; &lt;td&gt;&gt;= 0.3.1 &amp;&amp; &lt; 0.4.0&lt;/td&gt; &lt;td&gt;最左侧非零数字是 3&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;^0.0.1&lt;/td&gt; &lt;td&gt; &gt;= 0.01 &amp;&amp; &lt; 0.02，即 0.01&lt;/td&gt; &lt;td&gt;最左侧非零数字是 1&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td rowspan=&#39;2&#39;&gt;~:版本号列出 Y 时兼容 Z 的修改。列出 X 时兼容 Y、Z&lt;/td&gt; &lt;td&gt;~2.3.1&lt;/td&gt; &lt;td&gt;&gt;= 2.3.1 &amp;&amp; &lt; 2.4.0&lt;/td&gt; &lt;td&gt;Y 为 3。～2.3 同理&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;～2&lt;/td&gt; &lt;td&gt;&gt;= 2.0.0 &amp;&amp; &lt; 3.0.0&lt;/td&gt; &lt;td&gt;X 为 2&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td rowspan=&#39;3&#39;&gt;<em>、X、x，空：表示可以匹配任何版本&lt;/td&gt; &lt;td&gt;&quot;2.3.X&quot;、&quot;2.3.x&quot;、&quot;2.3</em>&quot;、&quot;2.3&quot;&lt;/td&gt; &lt;td&gt;&gt;= 2.3.0 &amp;&amp; &lt; 2.4.0&lt;/td&gt; &lt;td&gt;Z 可以为任意值&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&quot;2.X&quot;、&quot;2.x&quot;、&quot;2.<em>&quot;、&quot;2&quot;&lt;/td&gt; &lt;td&gt;&gt;= 2.0.0 &amp;&amp; &lt; 3.0.0&lt;/td&gt; &lt;td&gt;Y、Z 为任意值&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;</em>、X、x，空&lt;/td&gt; &lt;td&gt;任意版本&lt;/td&gt; &lt;td&gt;任意版本指的是最新的正式版&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;</p><p>关于 npm 的版本格式还有许多，此处不再赘述。</p><p>从上边的常用格式介绍可以看出来，在精确版本号的情况下，版本号是完全固定的，在项目发布时不会出现一些实际安装的包和 package.json 中版本号不一致的问题。或者如果使用方有用到 package-lock.json 文件来固定包的版本，也可以避免包的版本号导致的问题。</p><p>但是在实际开发中，我们并不知道我们包的使用方是否使用的固定版本号或者 package-lock.json 文件，我们怎么做才能让使用方不受影响呢？</p><p>这时候就要用到先行版本号了，下面我将为大家具体介绍。</p><h2 id="先行版本" tabindex="-1"><a class="header-anchor" href="#先行版本" aria-hidden="true">#</a> 先行版本</h2><p>npm 的先行版本号，放到 X.Y.Z 的后边，作为延伸。被标上先行版本号则表示这个版本<strong>并非稳定</strong>而且<strong>可能无法满足预期</strong>的兼容性需求。例如：1.0.0-alpha.1，2.0.0-beta.1 等。一般常用的关键词有：</p><ul><li>alpha：预览版，或者叫内部测试版；一般不向外部发布，会有很多bug（会不太稳定）；一般只有测试人员使用。</li><li>beta：测试版，或者叫公开测试版；这个阶段的版本会一直加入新的功能；在alpha版之后推出。</li><li>rc(release candidate)：最终测试版本；可能成为最终产品的候选版本，如果未出现问题则可发布成为正式版本。</li></ul><h4 id="先行版本升级规则" tabindex="-1"><a class="header-anchor" href="#先行版本升级规则" aria-hidden="true">#</a> 先行版本升级规则</h4><p>我们使用 <code>npm dist-tag ls @zcy/zcy-region-detail-back</code> 查看 @zcy/zcy-region-detail-back 的 tag，如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fb7df6aa7692494a8c31d5044c76f1e1~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>我们可以看到这个包有一个 beta 版，一个 latest 版。</p><p>对比两个版本的名字可以发现，beta 版本是在 latest 版本的 Z 上加了 1 且添加了一个 beta 作为延伸。</p><ul><li>如果包只是对现有的问题进行修复，那么只需要对 Z 进行加 1，然后添加延伸。</li><li>如果包本次是做<strong>向下兼容</strong>的功能性新增，那么需要对 Y 进行加 1，Z 清零，然后添加延伸。</li><li>如果包本次的升级是<strong>无法向下兼容</strong>的，那么就需要对 X 进行加 1，Y、Z 清零，然后添加延伸。</li></ul><p>如果在加了延伸的版本上需要进行 bugfix 时，只需要将我们延伸的版本继续增加即可。当 bugfix 结束，需要发布正式版本时，只需要去掉延伸版本，发布版本即可。</p><h4 id="什么时候需要使用先行版本" tabindex="-1"><a class="header-anchor" href="#什么时候需要使用先行版本" aria-hidden="true">#</a> 什么时候需要使用先行版本</h4><p>假设 P 项目中引用了 @zcy/zcy-region-detail-back 包，如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c620677fe4b2487281a4698d3693f74f~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>A 需求改动了项目 P，发布时间为 6.30。</p><p>B 需求改动了 @zcy/zcy-region-detail-back 包，改动的时间是 6.29。</p><p>B 需求的改动没有使用先行版本且包中的 bug 在 6.30 项目 P 发布时没有修改。此时就会导致项目 P 发布时，下载到了有 bug 的 @zcy/zcy-region-detail-back 包，就会导致线上问题。</p><p>这是因为我们在 P 项目中执行 <code>npm i @zcy/zcy-region-detail-back</code> 后，下载出来的 <code>@zcy/zcy-region-detail-back</code> 的版本号为 1.0.0。因为在执行 <code>npm i @zcy/zcy-region-detail-back</code> 时会默认下载 tag 为 latest 下的最新包。相当于执行了 <code>npm i @zcy/zcy-region-detail-back@latest</code>。<strong>注</strong>：这里的 tag 指的是 npm 中的 tag。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c43e162b9ea54b90849d9f5b6cdce364~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>所以 npm 的 tag 到底有什么用呢？其实 tag 就相当于是 git 的分支管理中的标签，不同的 tag 之间的包互不影响。可以使我们发布先行版本时不影响正式版本。</p><p>一般常用的有三种类型的 tag：</p><ul><li>latest：最后的稳定版，npm install 时就是下载的这个</li><li>beta：测试版本，需要指定版本或者使用 <code>npm install packageName@beta</code> 来下载。例如：1.0.0-beta.0</li><li>next：先行版本，使用 <code>npm install packageName@next</code> 安装</li></ul><h2 id="版本发布" tabindex="-1"><a class="header-anchor" href="#版本发布" aria-hidden="true">#</a> 版本发布</h2><p>那么我们如何发布先行版本的包呢？首先需要升级 A 包的版本号，此处介绍两种升级方式</p><p>方式一：简单粗暴，手动修改 package.json 中的 version：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3bd766dbef3647f2bbe02428b8399165~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220313200823440"></p><p>这种方式需要我们自己手动执行 <code>git commit -am &amp;#39;XXXX&amp;#39;</code> 提交代码，如果需要在此版本的 git 仓库打上 tag 时，需要我们自己手动触发<code>git tag v2.3.2-beta.1</code> ，<code>git push origin v2.3.2-beta.1</code> 。</p><p>方式二：借助 <code>npm version</code> 命令</p><p>A 包中所有的改动都 commit 后，可以根据以下命令更新版本</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> version <span class="token punctuation">[</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>newversion<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token operator">|</span> major <span class="token operator">|</span> minor <span class="token operator">|</span> patch <span class="token operator">|</span> premajor <span class="token operator">|</span> preminor <span class="token operator">|</span> prepatch <span class="token operator">|</span> prerelease <span class="token operator">|</span> from-git<span class="token punctuation">]</span>
// newversion：指定更新的版本号
// major：大版本并且不向下兼容时，使用 major
// minor：有新功能且向下兼容时，使用 minor
// patch：修复一些问题、优化等，使用 patch
// 以 A：2.3.1 为例
<span class="token function">npm</span> version premajor // 版本号会成为 <span class="token number">3.0</span>.0-0，即 <span class="token number">3.0</span>.0 的预发版本
<span class="token function">npm</span> version preminor // 版本号为成为 <span class="token number">2.4</span>.0-0，即 <span class="token number">2.4</span>.0 的预发版本
<span class="token function">npm</span> version prepatch // 版本号成为 <span class="token number">2.3</span>.2-0，即 <span class="token number">2.3</span>.2 的预发版本
/**
* 版本号会成为 <span class="token number">2.3</span>.2-0。
* 执行此命令时，如果没有预发布版本号，则增加 Z，增加预发布号为 <span class="token number">0</span>
* 如果有预发步号，增加预发步号
*/
<span class="token function">npm</span> version prerelease
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据上边的 API 可以看到我们能通过 <code>npm version 2.3.2-beta.1</code> 将 A 的版本升为 2.3.2-beta.1 的形式，除此之外，在 <code>npm 6.4.0</code> 之后，我们也可以使用 <code>--preid</code> 参数来添加前缀：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> version prerelease <span class="token parameter variable">--preid</span><span class="token operator">=</span>beta
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此种方式需要注意，必须要 commit 本地的修改之后才可以执行。<code>npm version</code> 修改版本号，会默认执行 <code>git add</code> -&gt; <code>git commit</code> -&gt; <code>git tag</code> 操作，此时的版本号看起来有 beta，如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e0adbc7e25294507bc20cf51b92ae97a~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220703204725616"></p><p>但是这个 beta 是 git 仓库的 tag，并不是 npm 的 tag。如果不想默认给 git 添加 tag 的话，可以使用以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> --no-git-tag-version version xxx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>那么 <code>npm version </code> 执行时具体发生了什么呢？简要流程图如下</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1079bc8d179d49c8ae78feae23bca45e~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>执行完 <code>npm version 2.3.2-beta.1</code> 之后，如果直接使用 <code>npm publish</code> 来发布的话，发布出来的包的 tag 是 latest，但是我们其实是想发布一个测试包。如果其他人 <code>npm i</code> 下载时就会下载 version 为 2.3.2-beta.1 的包。只有使用 <code>npm publish --tag XXX</code> 才是给 npm 包上打了 tag 标签。</p><p>执行以下命令就可以生成一个 tag 为 beta 的包：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> run build // 打包
<span class="token function">npm</span> publish <span class="token parameter variable">--tag</span> beta // 发布 beta 包
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9b99153d765a4a7ba2621049c0042273~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>如果不小心直接使用 <code>npm publish</code> 发错了也没有关系，可以使用以下命令来添加 tag：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> dist-tag <span class="token function">add</span> <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>pkg<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>@2.3.2-beta.1 <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>tag<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当需要删除多余的 tag 时：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm dist-tag rm &amp;lt;pkg&amp;gt; &amp;lt;tag&amp;gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>给大家提供一条指令完成 beta 版本的发布：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>scripts<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
    <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>publish:beta<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token builtin class-name">:</span> <span class="token function">npm</span> version prerelease <span class="token parameter variable">--preid</span><span class="token operator">=</span>beta <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> <span class="token function">npm</span> run build <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> <span class="token function">npm</span> publish <span class="token parameter variable">--tag</span><span class="token operator">=</span>beta<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>,
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码开发完毕，提交之后，只需要 <code>npm run publish:beta</code> 就可以发布一个测试版本啦～</p><p>以上就是我本次分享的所有内容啦，如果有不足的地方，还望指正。</p><h2 id="参考文献" tabindex="-1"><a class="header-anchor" href="#参考文献" aria-hidden="true">#</a> 参考文献</h2>`,57),m={href:"https://semver.org/lang/zh-CN/spec/v2.0.0.html",target:"_blank",rel:"noopener noreferrer"},b={href:"https://juejin.cn/post/6844903870578032647",target:"_blank",rel:"noopener noreferrer"},h={href:"https://docs.npmjs.com/cli/v6/commands/npm-version",target:"_blank",rel:"noopener noreferrer"},k=t("h2",{id:"推荐阅读",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#推荐阅读","aria-hidden":"true"},"#"),a(" 推荐阅读")],-1),v={href:"https://juejin.cn/post/7140422304920109092",target:"_blank",rel:"noopener noreferrer"},f={href:"https://juejin.cn/post/7135217402983235592",target:"_blank",rel:"noopener noreferrer"},_={href:"https://juejin.cn/post/7132628898453880840",target:"_blank",rel:"noopener noreferrer"},x={href:"https://www.zoo.team/article/http-referer",target:"_blank",rel:"noopener noreferrer"},j={href:"https://juejin.cn/post/7127440050937151525",target:"_blank",rel:"noopener noreferrer"},y=t("h2",{id:"开源作品",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#开源作品","aria-hidden":"true"},"#"),a(" 开源作品")],-1),z=t("ul",null,[t("li",null,"政采云前端小报")],-1),q={href:"https://www.zoo.team/openweekly/",target:"_blank",rel:"noopener noreferrer"},w=t("ul",null,[t("li",null,"商品选择 sku 插件")],-1),X={href:"https://github.com/zcy-inc/skuPathFinder-back",target:"_blank",rel:"noopener noreferrer"},Z=t("h2",{id:"招贤纳士",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#招贤纳士","aria-hidden":"true"},"#"),a(" 招贤纳士")],-1),P=t("p",null,"政采云前端团队（ZooTeam），一个年轻富有激情和创造力的前端团队，隶属于政采云产品研发部，Base 在风景如画的杭州。团队现有 90 余个前端小伙伴，平均年龄 27 岁，近 4 成是全栈工程师，妥妥的青年风暴团。成员构成既有来自于阿里、网易的“老”兵，也有浙大、中科大、杭电等校的应届新人。团队在日常的业务对接之外，还在物料体系、工程平台、搭建平台、性能体验、云端应用、数据分析及可视化等方向进行技术探索和实战，推动并落地了一系列的内部技术产品，持续探索前端技术体系的新边界。",-1),N=t("p",null,[a("如果你想改变一直被事折腾，希望开始能折腾事；如果你想改变一直被告诫需要多些想法，却无从破局；如果你想改变你有能力去做成那个结果，却不需要你；如果你想改变你想做成的事需要一个团队去支撑，但没你带人的位置；如果你想改变既定的节奏，将会是“5 年工作时间 3 年工作经验”；如果你想改变本来悟性不错，但总是有那一层窗户纸的模糊… 如果你相信相信的力量，相信平凡人能成就非凡事，相信能遇到更好的自己。如果你希望参与到随着业务腾飞的过程，亲手推动一个有着深入的业务理解、完善的技术体系、技术创造价值、影响力外溢的前端团队的成长历程，我觉得我们该聊聊。任何时间，等着你写点什么，发给 "),t("code",null,"ZooTeam@cai-inc.com")],-1),Y=t("p",null,[t("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/98d3aa3d1f8646a8bcda8cfd9e335a4b~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1);function A(T,B){const e=r("ExternalLinkIcon");return o(),l("div",null,[c,t("p",null,[a("从日常的开发中我们可以看到，npm 包的版本号的格式都是 X.Y.Z。那么大家发布的 npm 包为什么都在遵循这个格式呢？这个格式其实是由 Gravatars 创办者兼 GitHub 共同创办者 "),t("a",d,[a("Tom Preston-Werner"),n(e)]),a(" 所建立。由 GitHub 起草的统一的版本号表示规则，称为 Semantic Versioning(语义化版本表示)。这些规范具体包含的内容大家可以参考"),t("a",g,[a("语义化版本 2.0.0"),n(e)]),a("。本文只针对我们开发中容易忽略的地方做一些详述。")]),u,t("p",null,[t("a",m,[a("语义化版本 2.0.0"),n(e)])]),t("p",null,[t("a",b,[a("前端工程化（5）：你所需要的npm知识储备都在这了"),n(e)])]),t("p",null,[t("a",h,[a("npm version"),n(e)])]),k,t("p",null,[t("a",v,[a("你想知道的前后端协作规范都在这了"),n(e)])]),t("p",null,[t("a",f,[a("带你了解 Tree Shaking"),n(e)])]),t("p",null,[t("a",_,[a("厉害！这篇正则表达式竟写的如此详尽"),n(e)])]),t("p",null,[t("a",x,[a("学习 HTTP Referer"),n(e)])]),t("p",null,[t("a",j,[a("浅谈低代码平台远程组件加载方案"),n(e)])]),y,z,t("p",null,[t("strong",null,[a("开源地址 "),t("a",q,[a("www.zoo.team/openweekly/"),n(e)])]),a(" (小报官网首页有微信交流群)")]),w,t("p",null,[t("strong",null,[a("开源地址 "),t("a",X,[a("https://github.com/zcy-inc/skuPathFinder-back/"),n(e)])])]),Z,P,N,Y])}const C=p(i,[["render",A],["__file","规范升级 NPM 包.html.vue"]]);export{C as default};
