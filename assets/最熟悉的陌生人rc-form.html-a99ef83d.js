import{_ as e,z as o,A as c,Y as n,C as s,U as t,a6 as p,Q as l}from"./framework-cb9358d9.js";const i={},u={href:"https://juejin.cn/post/6978685539985653767",target:"_blank",rel:"noopener noreferrer"},r=n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d4eb6a01e6564840817b127265b07edd~tplv-k3u1fbpfcp-zoom-1.image",alt:""},null,-1),k={href:"https://zoo.team/article/rc-from",target:"_blank",rel:"noopener noreferrer"},d=p(`<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d418387923574e8fb301751f707be871~tplv-k3u1fbpfcp-watermark.image" alt="清风.png"></p><h3 id="rc-form-是谁" tabindex="-1"><a class="header-anchor" href="#rc-form-是谁" aria-hidden="true">#</a> rc-form 是谁?</h3><p>我们也许会经常使用例如 Ant Design、Element UI、Vant 等第三方组件库来快速在项目中完成页面的布局效果和简单的交互功能。</p><p>但是我们可能会忽略掉在这些优秀的第三方库中的某些组件可能也依赖于其他优秀的库！正如我们使用频率很高的 Ant Design 中的 Form 组件（这里我说的是 React 版本的）。</p><p>其实这些优秀的开源库内部使用了优秀的第三方库 rc-form，正如我们经常使用的 getFieldDecorator、getFieldsValue、setFieldsValue、validateFields 等这些 Api，其实这些都是 rc-form 暴露出来的方法。</p><h3 id="为什么要使用-rc-form" tabindex="-1"><a class="header-anchor" href="#为什么要使用-rc-form" aria-hidden="true">#</a> 为什么要使用 rc-form?</h3><p>&gt; 我们都知道 React 框架设计模式和 Vue 不同，Vue 中作者已经帮我们实现了数据的双向绑定，数据驱动视图，视图驱动数据的改变，但是 React 中需要我们手动调用 setState 实现数据驱动视图的改变，请看下面的代码。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> from <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>react<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">index</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
  state <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">value1</span><span class="token operator">:</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>peter<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">value2</span><span class="token operator">:</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token number">123</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">value3</span><span class="token operator">:</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token number">23</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  onChange1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token punctuation">{</span> value <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">value1</span><span class="token operator">:</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  onChange2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token punctuation">{</span> value <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">value2</span><span class="token operator">:</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  
  onChange3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token punctuation">{</span> value <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">value3</span><span class="token operator">:</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  
	submit <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> value1<span class="token punctuation">,</span> value2<span class="token punctuation">,</span> value3 <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>
    <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
      value1<span class="token punctuation">,</span>
      value2<span class="token punctuation">,</span>
      value3<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">axios</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>url<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> value1<span class="token punctuation">,</span> value2<span class="token punctuation">,</span> value3 <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>div<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>form action<span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
          <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>label <span class="token keyword">for</span><span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>用户名<span class="token operator">:</span> <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>label<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
          <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>input type<span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>text<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span> value<span class="token operator">=</span><span class="token punctuation">{</span>value1<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>onChange1<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
          <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>br <span class="token operator">/</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
          <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>label <span class="token keyword">for</span><span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>密码<span class="token operator">:</span> <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>label<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
          <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>input type<span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>text<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span> value<span class="token operator">=</span><span class="token punctuation">{</span>value2<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>onChange2<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
          <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>br <span class="token operator">/</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
          <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>label <span class="token keyword">for</span><span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>年龄<span class="token operator">:</span> <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>label<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
          <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>input type<span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>text<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span> value<span class="token operator">=</span><span class="token punctuation">{</span>value3<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>onChange3<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
          <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>br <span class="token operator">/</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
          <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>submit<span class="token punctuation">}</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>提交<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>button<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>form<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
      <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>div<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>上面是一个表单登录的简单功能！要想实现表单数据的实时更新需要在表单 onChange 的时候手动更新 state 状态;</p></li><li><p>从上面代码中可以看出，这样写功能也能实现，但是当我们的表单多的时候，难道页面要写十几个 onChange 事件去实现页面的数据驱动视图的更新吗？这样考虑一下其实是不妥的;</p></li><li><p>这个时候 rc-form 就应运而生了，rc-form 创建一个数据集中管理仓库，这个仓库负责统一收集表单数据验证、重置、设置、获取值等逻辑操作，这样我们就把重复无用功交给 rc-form 来处理了，以达到代码的高度可复用性!</p></li></ul><h3 id="主要-api-简要说明" tabindex="-1"><a class="header-anchor" href="#主要-api-简要说明" aria-hidden="true">#</a> 主要 Api 简要说明</h3>`,10),m=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"Api 名称"),n("th",null,"说明"),n("th",null,"类型")])],-1),v=n("tr",null,[n("td",{style:{"text-align":"left"}},"getFieldDecorator"),n("td",null,"用于和表单进行双向绑定，"),n("td",null,"Function(name)")],-1),b=n("td",{style:{"text-align":"left"}},"getFieldsValue",-1),g=n("td",null,[s("获取一组字段名对应的值，会按照对应结构返回。默认返回现存字段值，当调用 "),n("code",null,"getFieldsValue(true)"),s(" 时返回所有值")],-1),f={href:"https://ant.design/components/form-cn/#NamePath",target:"_blank",rel:"noopener noreferrer"},y=n("td",{style:{"text-align":"left"}},"getFieldValue",-1),h=n("td",null,"获取对应字段名的值",-1),w={href:"https://ant.design/components/form-cn/#NamePath",target:"_blank",rel:"noopener noreferrer"},F=n("tr",null,[n("td",{style:{"text-align":"left"}},"setFieldsValue"),n("td",null,"设置一组表单的值"),n("td",null,"(values) => void")],-1),_=n("td",{style:{"text-align":"left"}},"setFields",-1),j=n("td",null,"设置一组字段状态",-1),x={href:"https://ant.design/components/form-cn/#FieldData",target:"_blank",rel:"noopener noreferrer"},q=n("td",{style:{"text-align":"left"}},"validateFields",-1),C=n("td",null,"触发表单验证",-1),V={href:"https://ant.design/components/form-cn/#NamePath",target:"_blank",rel:"noopener noreferrer"},P=n("td",{style:{"text-align":"left"}},"isFieldValidating",-1),S=n("td",null,"检查一组字段是否正在校验",-1),E={href:"https://ant.design/components/form-cn/#NamePath",target:"_blank",rel:"noopener noreferrer"},R=n("td",{style:{"text-align":"left"}},"getFieldProps",-1),M=n("td",null,"获取对应字段名的属性",-1),T={href:"https://ant.design/components/form-cn/#NamePath",target:"_blank",rel:"noopener noreferrer"},A=p(`<h3 id="使用-rc-form" tabindex="-1"><a class="header-anchor" href="#使用-rc-form" aria-hidden="true">#</a> 使用 rc-form</h3><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createForm <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token entity named-entity" title="&quot;">&amp;quot;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>rc<span class="token operator">-</span>form<span class="token entity named-entity" title="&quot;">&amp;quot;</span><span class="token punctuation">;</span>
<span class="token comment">// import ReactClass from &amp;#39;./ReactClass&amp;#39;</span>

<span class="token keyword">const</span> RcForm <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">form</span><span class="token operator">:</span> <span class="token punctuation">{</span> getFieldDecorator<span class="token punctuation">,</span> validateFields <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span>

  <span class="token keyword">const</span> handleSubmit <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span> <span class="token punctuation">{</span>
    e <span class="token entity named-entity" title="&amp;">&amp;amp;</span><span class="token entity named-entity" title="&amp;">&amp;amp;</span> e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">validateFields</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token entity named-entity" title="&lt;">&amp;lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">padding</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token literal-property property">background</span><span class="token operator">:</span> <span class="token entity named-entity" title="&quot;">&amp;quot;</span>#fff<span class="token entity named-entity" title="&quot;">&amp;quot;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token entity named-entity" title="&gt;">&amp;gt;</span>
      <span class="token entity named-entity" title="&lt;">&amp;lt;</span>form<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
        <span class="token entity named-entity" title="&lt;">&amp;lt;</span>label<span class="token entity named-entity" title="&gt;">&amp;gt;</span><span class="token literal-property property">姓名</span><span class="token operator">:</span><span class="token entity named-entity" title="&lt;">&amp;lt;</span><span class="token operator">/</span>label<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
        <span class="token punctuation">{</span><span class="token function">getFieldDecorator</span><span class="token punctuation">(</span><span class="token entity named-entity" title="&quot;">&amp;quot;</span>username<span class="token entity named-entity" title="&quot;">&amp;quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token entity named-entity" title="&quot;">&amp;quot;</span>请输入用户名<span class="token operator">!</span><span class="token entity named-entity" title="&quot;">&amp;quot;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token literal-property property">initialValue</span><span class="token operator">:</span><span class="token entity" title="&#39;">&amp;#39;</span>initialValue<span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token entity named-entity" title="&lt;">&amp;lt;</span>input type<span class="token operator">=</span><span class="token entity named-entity" title="&quot;">&amp;quot;</span>text<span class="token entity named-entity" title="&quot;">&amp;quot;</span> <span class="token operator">/</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
        <span class="token entity named-entity" title="&lt;">&amp;lt;</span>br <span class="token operator">/</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span>
        <span class="token entity named-entity" title="&lt;">&amp;lt;</span>label<span class="token entity named-entity" title="&gt;">&amp;gt;</span><span class="token literal-property property">密码</span><span class="token operator">:</span><span class="token entity named-entity" title="&lt;">&amp;lt;</span><span class="token operator">/</span>label<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
        <span class="token punctuation">{</span><span class="token function">getFieldDecorator</span><span class="token punctuation">(</span><span class="token entity named-entity" title="&quot;">&amp;quot;</span>password<span class="token entity named-entity" title="&quot;">&amp;quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token punctuation">{</span> <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token entity named-entity" title="&quot;">&amp;quot;</span>请输入密码<span class="token operator">!</span><span class="token entity named-entity" title="&quot;">&amp;quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> 
            <span class="token punctuation">{</span> <span class="token literal-property property">pattern</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[a-z0-9_-]{6,18}$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token literal-property property">message</span><span class="token operator">:</span><span class="token entity" title="&#39;">&amp;#39;</span>只允许数字<span class="token operator">!</span><span class="token entity" title="&#39;">&amp;#39;</span> <span class="token punctuation">}</span>
          <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token entity named-entity" title="&lt;">&amp;lt;</span>input type<span class="token operator">=</span><span class="token entity named-entity" title="&quot;">&amp;quot;</span>password<span class="token entity named-entity" title="&quot;">&amp;quot;</span> style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">marginTop</span><span class="token operator">:</span> <span class="token entity named-entity" title="&quot;">&amp;quot;</span>15px<span class="token entity named-entity" title="&quot;">&amp;quot;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span> <span class="token punctuation">)</span><span class="token punctuation">}</span>
        <span class="token entity named-entity" title="&lt;">&amp;lt;</span>br <span class="token operator">/</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span>
        <span class="token entity named-entity" title="&lt;">&amp;lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>handleSubmit<span class="token punctuation">}</span> style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">marginTop</span><span class="token operator">:</span> <span class="token entity named-entity" title="&quot;">&amp;quot;</span>15px<span class="token entity named-entity" title="&quot;">&amp;quot;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span>
          提交
        <span class="token entity named-entity" title="&lt;">&amp;lt;</span><span class="token operator">/</span>button<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
      <span class="token entity named-entity" title="&lt;">&amp;lt;</span><span class="token operator">/</span>form<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
    <span class="token entity named-entity" title="&lt;">&amp;lt;</span><span class="token operator">/</span>div<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>RcForm<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>&gt; 注意: 经过 createForm 方法处理的组件（就是 Ant Design 中 Form 的 create( ) 方法），会自动向组件没注入 form 对象，组件本身也就拥有了这些 Api 。</p><ul><li><p>Demo 只是简单的基于 rc-form 实现了表单的装饰、表单验证、数据收集等功能。那么如何实现更加具有针对性的，适用多种业务场景的表单组件呢?</p></li><li><p>绕开优秀的开源的组件库不说，如果哪一天这些优秀的开源作品不再开源了，那我们怎么办？</p></li><li><p>为了避免这种情况发生，或者如果仅是为了我们自己的职业生涯规划，使自己更上一层楼的话也是有必要的去学习一下优秀的三方库的设计理念。就算看一下别人的代码风格也是有必要的。其实还是需要我们自己了解 rc-form 的设计思路的；只有了解了这些优秀开源作品的精髓，我们即使不用开源库，也可以封装自己的代码库以及类似 Ant Design 中 Form 这些优秀的组件的。</p></li></ul><h3 id="从-createform-开始" tabindex="-1"><a class="header-anchor" href="#从-createform-开始" aria-hidden="true">#</a> 从 createForm 开始</h3><p>都知道我们平时编写业务组件一般只要用到表单都会用到 createForm 或者 Form.create( ) 这些方法对自己的组件进行包装，那么我们就从这里开始我们的故事。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> createBaseForm from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token operator">/</span>createBaseForm<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">createForm</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">createBaseForm</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> <span class="token punctuation">[</span>mixin<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> createForm<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到其实 createForm 只是做了一层封装，真正的调用函数是 createBaseForm，那么着重看一下 createBaseForm 函数内部实现。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/31017cf7cf1a400f9f355acd159397f2~tplv-k3u1fbpfcp-zoom-1.image" alt="createBaseForm"></p><p>上面的图片中可以看出这个函数利用闭包特性返回一个新函数，这个函数的参数其实就是你的业务组件对象，经过 createBaseForm 内部加工之后返回给你的是一个注入了 form 对象的组件。也就是我们常说的这个 createBaseForm 是一个高阶组件。</p><p>那么也就清楚了 Ant Design 的 <code>Form.create()</code> 方法就是 <code>rc-form</code> 中的 <code>createBaseForm</code> 方法的替代！经过 <code>createBaseForm</code> 包装的组件将会注入 form 对象， 而 <code>form</code> 属性中提供的 getFieldDecorator 以及 fieldsStore 实例则是实现数据自动收集的关键。</p><h3 id="浅析内部实现" tabindex="-1"><a class="header-anchor" href="#浅析内部实现" aria-hidden="true">#</a> 浅析内部实现</h3><p>我们就先从最初的的渲染表单的逻辑开始，我们业务场景中用到的表单组件都会使用 getFieldDecorator 包装一下。当然，我说的是 Ant Design 4.0 以前的版本， 那么我们就先从这里开始看起。</p><p>这里首先说明一下，此篇文章我只是浅析一下整个表单数据双向绑定的简单过程，因为这个是 rc-form 的核心，精力有限具体的细节处理留待以后慢慢研究。那么我们就来看一下 <code>getFieldDecorator</code> 方法做了些什么？</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">getFieldDecorator</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> fieldOption</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getFieldProps</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> fieldOption<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> fieldElem <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
    <span class="token comment">// We should put field in record if it is rendered</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>renderFields<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> fieldMeta <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fieldsStore<span class="token punctuation">.</span><span class="token function">getFieldMeta</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> originalProps <span class="token operator">=</span> fieldElem<span class="token punctuation">.</span>props<span class="token punctuation">;</span>
    fieldMeta<span class="token punctuation">.</span>originalProps <span class="token operator">=</span> originalProps<span class="token punctuation">;</span>
    fieldMeta<span class="token punctuation">.</span>ref <span class="token operator">=</span> fieldElem<span class="token punctuation">.</span>ref<span class="token punctuation">;</span>
    <span class="token keyword">const</span> decoratedFieldElem <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">cloneElement</span><span class="token punctuation">(</span>fieldElem<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token operator">...</span>props<span class="token punctuation">,</span>
      <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>fieldsStore<span class="token punctuation">.</span><span class="token function">getFieldValuePropValue</span><span class="token punctuation">(</span>fieldMeta<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">supportRef</span><span class="token punctuation">(</span>fieldElem<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>
      decoratedFieldElem
    <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>
      <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>FieldElemWrapper name<span class="token operator">=</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span> form<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">}</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
      <span class="token punctuation">{</span>decoratedFieldElem<span class="token punctuation">}</span>
  <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>FieldElemWrapper<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此处我删除了一些无关紧要的代码，因为这样看起来更加清晰明了。 首先对传入的表单组件调用 getFieldProps 方法进行了 props 的构建处理，接着返回一个函数，这个函数参数就是我们使用 getFieldDecorator 传入的表单组件，调用 fieldsStore 中的 getFieldMeta 获取表单组件的配置数据，兼容原有组件的配置属性以及对不支持 ref 组件的处理，最终返回一个克隆后的挂载处理后的一些配置对象的组件！</p><h4 id="fieldsstore" tabindex="-1"><a class="header-anchor" href="#fieldsstore" aria-hidden="true">#</a> fieldsStore</h4><p>既然用到了 fieldsStore，那么这里要说一下 fieldsStore，fieldsStore 中包含了当前 form 的主要信息和一些处理表单数据的方法。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">FieldsStore</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">fields</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>fields <span class="token operator">=</span> <span class="token function">internalFlattenFields</span><span class="token punctuation">(</span>fields<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>fieldsMeta <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>fieldMeta 可以看成是一个表单项的描述，以传入的 name 为索引 key，支持嵌套、存储表单数据， 即配置信息不涉及值的问题，主要包括：</p><ul><li>name 字段的名称</li><li>originalProps 被 getFieldDecorator( ) 装饰的组件的原始 props</li><li>rules 校验的规则</li><li>trigger 触发数据收集的时机 默认 <code>onChange</code></li><li>validate 校验规则和触发事件</li><li>valuePropName 子节点的值的属性，例如 checkbox 应该设为 <code>checked</code></li><li>getValueFromEvent 如何从 event 中获取组件的值</li><li>hidden 为 true 时，校验或者收集数据时会忽略这个字段</li></ul><p>fields 主要用于记录每个表单的实时属性，主要包括：</p><ul><li><p>dirty 数据是否已经改变，但未校验</p></li><li><p>errors 校验文案</p></li><li><p>name 字段名称</p></li><li><p>touched 数据是否更新过</p></li><li><p>value 字段的值</p></li><li><p>validating 校验状态</p></li></ul><p>那么接下来还是要看一下 getFieldProps 方法内部是如何实现 props 构建的?</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">getFieldProps</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> usersFieldOption <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 重新组装 props</span>
  <span class="token keyword">const</span> fieldOption <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token punctuation">,</span>
    <span class="token literal-property property">trigger</span><span class="token operator">:</span> <span class="token constant">DEFAULT_TRIGGER</span><span class="token punctuation">,</span>
    <span class="token literal-property property">valuePropName</span><span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>value<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">validate</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token operator">...</span>usersFieldOption<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span>
    rules<span class="token punctuation">,</span>
    trigger<span class="token punctuation">,</span>
    validateTrigger <span class="token operator">=</span> trigger<span class="token punctuation">,</span>
    validate<span class="token punctuation">,</span>
  <span class="token punctuation">}</span> <span class="token operator">=</span> fieldOption<span class="token punctuation">;</span>
  <span class="token keyword">const</span> fieldMeta <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fieldsStore<span class="token punctuation">.</span><span class="token function">getFieldMeta</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 初始值处理</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>initialValue<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span> <span class="token keyword">in</span> fieldOption<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    fieldMeta<span class="token punctuation">.</span>initialValue <span class="token operator">=</span> fieldOption<span class="token punctuation">.</span>initialValue<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
	<span class="token comment">// 组装 inputProps</span>
  <span class="token keyword">const</span> inputProps <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>fieldsStore<span class="token punctuation">.</span><span class="token function">getFieldValuePropValue</span><span class="token punctuation">(</span>fieldOption<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">ref</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCacheBind</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">__ref</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>saveRef<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>fieldNameProp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    inputProps<span class="token punctuation">[</span>fieldNameProp<span class="token punctuation">]</span> <span class="token operator">=</span> formName <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>formName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
	
  <span class="token comment">// 收集验证规则</span>
  <span class="token keyword">const</span> validateRules <span class="token operator">=</span> <span class="token function">normalizeValidateRules</span><span class="token punctuation">(</span>validate<span class="token punctuation">,</span> rules<span class="token punctuation">,</span> validateTrigger<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> validateTriggers <span class="token operator">=</span> <span class="token function">getValidateTriggers</span><span class="token punctuation">(</span>validateRules<span class="token punctuation">)</span><span class="token punctuation">;</span>
  validateTriggers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>inputProps<span class="token punctuation">[</span>action<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    inputProps<span class="token punctuation">[</span>action<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCacheBind</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> action<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onCollectValidate<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 不走效验的组件使用 onCollect 收集组件的值</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>trigger <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> validateTriggers<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>trigger<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    inputProps<span class="token punctuation">[</span>trigger<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCacheBind</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> trigger<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onCollect<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> inputProps<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>删除了一些细节代码, 先来看看 getFieldProps 首先进行了默认值的处理，如果用户没有设置 <code>trigger</code> 和 <code>valuePropName</code> 则使用默认值，随后调用 <code>fieldsStore</code> 中的<code>getFieldMeta</code> 方法，<code>fieldsStore</code> 实例对象在整个过程中尤为关键，它的作用是作为一个数据中心，让我们免除了手动去维护 <code>form</code> 中绑定的各个值。那么我们看一下 <code>fieldsStore.getFieldMeta</code> 做了那些工作？</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">getFieldMeta</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>fieldsMeta<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fieldsMeta<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fieldsMeta<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此函数作用在于根据组件传递的 name 属性获取数据中心的 fieldMeta，如果没有则默认空对象，也就是首次渲染返回初始值。 重要的是 inputProps 的组装环节，第一步调用 <code>getFieldValuePropValue</code> 方法获取当前 props，然后加入 ref 属性，接下来是效验规则的收集。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> validateRules <span class="token operator">=</span> <span class="token function">normalizeValidateRules</span><span class="token punctuation">(</span>validate<span class="token punctuation">,</span> rules<span class="token punctuation">,</span> validateTrigger<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> validateTriggers <span class="token operator">=</span> <span class="token function">getValidateTriggers</span><span class="token punctuation">(</span>validateRules<span class="token punctuation">)</span><span class="token punctuation">;</span>
validateTriggers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>inputProps<span class="token punctuation">[</span>action<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    inputProps<span class="token punctuation">[</span>action<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCacheBind</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> action<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onCollectValidate<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>trigger <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> validateTriggers<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>trigger<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    inputProps<span class="token punctuation">[</span>trigger<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCacheBind</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> trigger<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onCollect<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>validateRules </code> 即是所有的表单组件效验规则，<code>validateTriggers</code> 即所有效验规则触发的事件名， 那么我们就看一下 <code>nomalizeValidateRules</code> 以及 <code>getValidateTriggers </code> 方法是如何收集验证规则的。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">normalizeValidateRules</span><span class="token punctuation">(</span><span class="token parameter">validate<span class="token punctuation">,</span> rules<span class="token punctuation">,</span> validateTrigger</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> validateRules <span class="token operator">=</span> validate<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> newItem <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token operator">...</span>item<span class="token punctuation">,</span>
      <span class="token literal-property property">trigger</span><span class="token operator">:</span> item<span class="token punctuation">.</span>trigger <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> newItem<span class="token punctuation">.</span>trigger <span class="token operator">===</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>string<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      newItem<span class="token punctuation">.</span>trigger <span class="token operator">=</span> <span class="token punctuation">[</span>newItem<span class="token punctuation">.</span>trigger<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> newItem<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>rules<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    validateRules<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">trigger</span><span class="token operator">:</span> validateTrigger
      <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>validateTrigger<span class="token punctuation">)</span>
      <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      rules<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> validateRules<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">getValidateTriggers</span><span class="token punctuation">(</span><span class="token parameter">validateRules</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> validateRules
    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token operator">!</span><span class="token operator">!</span>item<span class="token punctuation">.</span>rules <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> item<span class="token punctuation">.</span>rules<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> item<span class="token punctuation">.</span>trigger<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span> curr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> pre<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>curr<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其会将 <code>validate</code>、 <code>rules</code> 组合，返回一个数组，其内部的元素为一个个规则对象，并且每个元素都存在一个可以为空的 <code>trigger</code> 数组，并且将 <code>validateTrigger</code> 作为 <code>rule</code> 的 <code>triggers</code> 推入 <code>validateRules</code> 中，我们回回头看一下 <code>validateTrigger</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fieldOption <span class="token operator">=</span> <span class="token punctuation">{</span>
     name<span class="token punctuation">,</span>
     <span class="token literal-property property">trigger</span><span class="token operator">:</span> <span class="token constant">DEFAULT_TRIGGER</span><span class="token punctuation">,</span>
     <span class="token literal-property property">valuePropName</span><span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>value<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
     <span class="token literal-property property">validate</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
     <span class="token operator">...</span>usersFieldOption<span class="token punctuation">,</span>
 <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token punctuation">{</span>
    rules<span class="token punctuation">,</span>
    trigger<span class="token punctuation">,</span>
    validateTrigger <span class="token operator">=</span> trigger<span class="token punctuation">,</span>
    validate<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token operator">=</span> fieldOption<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里可以看出如果用户配置了触发验证方法时默认使用配置的 <code>trigger</code>，如果用户没有设置 <code>trigger</code> 则默认使用默认 <code>onChange</code>。</p><p><code>getValidateTriggers</code> 则是将所有触发事件统一收集至一个数组，随后通过 forEach 循环将所有 <code>validateTriggers </code> 中的事件都绑定上同一个处理函数 getCacheBind 上。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> validateTriggers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
 	<span class="token keyword">if</span> <span class="token punctuation">(</span>inputProps<span class="token punctuation">[</span>action<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
 	inputProps<span class="token punctuation">[</span>action<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCacheBind</span><span class="token punctuation">(</span>
    name<span class="token punctuation">,</span> 
    action<span class="token punctuation">,</span> 
    <span class="token keyword">this</span><span class="token punctuation">.</span>onCollectValidate
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面再来看一下触发验证规则绑定事件 action 的 getCacheBind 函数做了哪些操作？</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">getCacheBind</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> action<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>cachedBind<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>cachedBind<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cachedBind<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>
    <span class="token operator">!</span>cache<span class="token punctuation">[</span>action<span class="token punctuation">]</span> <span class="token operator">||</span>
    cache<span class="token punctuation">[</span>action<span class="token punctuation">]</span><span class="token punctuation">.</span>oriFn <span class="token operator">!==</span> fn 
  	<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cache<span class="token punctuation">[</span>action<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">fn</span><span class="token operator">:</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token literal-property property">oriFn</span><span class="token operator">:</span> fn<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> cache<span class="token punctuation">[</span>action<span class="token punctuation">]</span><span class="token punctuation">.</span>fn<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>暂且忽略 cachedBind 方法，这里可以看到 getCacheBind 方法主要对传入的 fn 做了一个改变 this 指向的逻辑处理，真正的处理函数则是 <code>onCollectValidate</code>，那我们来看一下 <code>onCollectValidate </code> 做了什么？</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">onCollectValidate</span><span class="token punctuation">(</span><span class="token parameter">name_<span class="token punctuation">,</span> action<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> field<span class="token punctuation">,</span> fieldMeta <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onCollectCommon</span><span class="token punctuation">(</span>name_<span class="token punctuation">,</span> action<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> newField <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>field<span class="token punctuation">,</span>
    <span class="token literal-property property">dirty</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>fieldsStore<span class="token punctuation">.</span><span class="token function">setFieldsAsDirty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">validateFieldsInternal</span><span class="token punctuation">(</span><span class="token punctuation">[</span>newField<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    action<span class="token punctuation">,</span>
    <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">firstFields</span><span class="token operator">:</span> <span class="token operator">!</span><span class="token operator">!</span>fieldMeta<span class="token punctuation">.</span>validateFirst<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当 <code>onCollectValidate </code> 被调用，也就是数据校验函数被触发时，首先调用了 onCollectCommon 方法，那么这个函数是干什么的？</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">onCollectCommon</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> action<span class="token punctuation">,</span> args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> fieldMeta <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fieldsStore<span class="token punctuation">.</span><span class="token function">getFieldMeta</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>fieldMeta<span class="token punctuation">[</span>action<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    fieldMeta<span class="token punctuation">[</span>action<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>fieldMeta<span class="token punctuation">.</span>originalProps <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> fieldMeta<span class="token punctuation">.</span>originalProps<span class="token punctuation">[</span>action<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    fieldMeta<span class="token punctuation">.</span>originalProps<span class="token punctuation">[</span>action<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> value <span class="token operator">=</span> fieldMeta<span class="token punctuation">.</span>getValueFromEvent <span class="token operator">?</span>
        fieldMeta<span class="token punctuation">.</span><span class="token function">getValueFromEvent</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token operator">:</span>
  <span class="token function">getValueFromEvent</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>onValuesChange <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> value <span class="token operator">!==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fieldsStore<span class="token punctuation">.</span><span class="token function">getFieldValue</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> valuesAll <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fieldsStore<span class="token punctuation">.</span><span class="token function">getAllValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> valuesAllSet <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    valuesAll<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>valuesAll<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>key <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token function">set</span><span class="token punctuation">(</span>valuesAllSet<span class="token punctuation">,</span> key<span class="token punctuation">,</span> valuesAll<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">onValuesChange</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token punctuation">[</span>formPropName<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>props
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">,</span> valuesAllSet<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> field <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fieldsStore<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">,</span> <span class="token literal-property property">field</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span>field<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token literal-property property">touched</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> fieldMeta <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>onCollectCommon </code> 主要是获取了包装组件最新的值，随后将其包装在对象中返回，返回后将其组装为一个新的名为 <code>newField </code> 的对象。</p><p>而 <code>fieldsStore.setFieldsAsDirty</code> 则是标记包装组件的校验状态，暂且略过，随后执行 <code>validateFieldsInternal</code>，我们看一下 validateFieldsInternal 函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">validateFieldsInternal</span><span class="token punctuation">(</span> 
  <span class="token parameter">fields<span class="token punctuation">,</span>
  <span class="token punctuation">{</span> fieldNames<span class="token punctuation">,</span> action<span class="token punctuation">,</span> options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  callback<span class="token punctuation">,</span></span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> allRules <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> allValues <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> allFields <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> alreadyErrors <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  fields<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>field <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> name <span class="token operator">=</span> field<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>force <span class="token operator">!==</span> <span class="token boolean">true</span> <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> field<span class="token punctuation">.</span>dirty <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>field<span class="token punctuation">.</span>errors<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">set</span><span class="token punctuation">(</span>alreadyErrors<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">errors</span><span class="token operator">:</span> field<span class="token punctuation">.</span>errors <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> fieldMeta <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fieldsStore<span class="token punctuation">.</span><span class="token function">getFieldMeta</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> newField <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token operator">...</span>field<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    newField<span class="token punctuation">.</span>errors <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    newField<span class="token punctuation">.</span>validating <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    newField<span class="token punctuation">.</span>dirty <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    allRules<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getRules</span><span class="token punctuation">(</span>fieldMeta<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span>
    allValues<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> newField<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    allFields<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> newField<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFields</span><span class="token punctuation">(</span>allFields<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// in case normalize</span>
  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>allValues<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>f <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
    allValues<span class="token punctuation">[</span>f<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fieldsStore<span class="token punctuation">.</span><span class="token function">getFieldValue</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>callback <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> <span class="token function">isEmptyObject</span><span class="token punctuation">(</span>allFields<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">callback</span><span class="token punctuation">(</span>
      <span class="token function">isEmptyObject</span><span class="token punctuation">(</span>alreadyErrors<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> alreadyErrors<span class="token punctuation">,</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>fieldsStore<span class="token punctuation">.</span><span class="token function">getFieldsValue</span><span class="token punctuation">(</span>fieldNames<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// console.log(allRules);</span>
  <span class="token keyword">const</span> validator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AsyncValidator</span><span class="token punctuation">(</span>allRules<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>validateMessages<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// console.log(validateMessages);</span>
    validator<span class="token punctuation">.</span><span class="token function">messages</span><span class="token punctuation">(</span>validateMessages<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  validator<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>allValues<span class="token punctuation">,</span> options<span class="token punctuation">,</span> errors <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> errorsGroup <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token operator">...</span>alreadyErrors<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// ...</span>
    <span class="token keyword">const</span> expired <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> nowAllFields <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>allRules<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>name <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> fieldErrors <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span>errorsGroup<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> nowField <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fieldsStore<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// avoid concurrency problems</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">eq</span><span class="token punctuation">(</span>nowField<span class="token punctuation">.</span>value<span class="token punctuation">,</span> allValues<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        expired<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
          name<span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        nowField<span class="token punctuation">.</span>errors <span class="token operator">=</span> fieldErrors <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> fieldErrors<span class="token punctuation">.</span>errors<span class="token punctuation">;</span>
        nowField<span class="token punctuation">.</span>value <span class="token operator">=</span> allValues<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>
        nowField<span class="token punctuation">.</span>validating <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        nowField<span class="token punctuation">.</span>dirty <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        nowAllFields<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> nowField<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFields</span><span class="token punctuation">(</span>nowAllFields<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为 <code>validateFieldsInternal</code> 主要逻辑都是在调用 <code>AsyncValidator</code> 进行异步校验以及对特殊场景的处理，我们暂时略过只看数据收集部分，我们看到在最后调用了 <code>this.setFields(allFields);</code> 并传入了新的值，接下来就看一下 <code>setFields</code> 方法。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">setFields</span><span class="token punctuation">(</span><span class="token parameter">maybeNestedFields<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> fields <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fieldsStore<span class="token punctuation">.</span><span class="token function">flattenRegisteredFields</span><span class="token punctuation">(</span>maybeNestedFields<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>fieldsStore<span class="token punctuation">.</span><span class="token function">setFields</span><span class="token punctuation">(</span>fields<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>onFieldsChange<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> changedFields <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>fields<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>acc<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token function">set</span><span class="token punctuation">(</span>acc<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fieldsStore<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">onFieldsChange</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token punctuation">[</span>formPropName<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>props
    <span class="token punctuation">}</span><span class="token punctuation">,</span> changedFields<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fieldsStore<span class="token punctuation">.</span><span class="token function">getNestedAllFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">forceUpdate</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到，<code>setFields</code> 首先对传入的值进行与初始化相似的验证，随后调用 fieldsStore 实例中的 setFields 方法将值存入 <code>fieldsStore</code>， 暂时忽略 <code>onFieldsChange</code>，之后调用 <code>forceUpdate</code> 更新视图。到此，我们简单的描述了整个流程。</p><h4 id="表单数据双向绑定" tabindex="-1"><a class="header-anchor" href="#表单数据双向绑定" aria-hidden="true">#</a> 表单数据双向绑定</h4><p>表单数据更新大致流程如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/89ccfd515d484823a82150a441b54fbc~tplv-k3u1fbpfcp-zoom-1.image" alt="forceUpdate"></p><p><strong>总结:</strong></p><ul><li><p>用户输入或者选择表单组件的行为都会触发 getFieldDecorator(HOC) 高阶组件，进而调用 getFieldProps 组装组件 props，这个方法中如果表单组件中配置了 validateRules 以及 validateTriggers 的话（也就是 rules 对象）就调用 onCollectValidate 方法收集效验规则。然后就是设置表单组件的最新的值到 fieldsStore 中， 并调用 this.forceUpdate( ) 更新 UI 视图！</p></li><li><p>如果我们没有配置 validateRules 以及 validateTriggers 等规则，那就使用 onCollect 方法收集最新的数据并更新到 fieldsStore 中。不对表单进行单独验证,，从而在设置最新值 setFields 方法中调用 this.forceUpdate( ) 更新 UI 视图！</p></li></ul><h4 id="整体设计思路" tabindex="-1"><a class="header-anchor" href="#整体设计思路" aria-hidden="true">#</a> 整体设计思路</h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/08d067e47d494774ad82df7289f3e969~tplv-k3u1fbpfcp-zoom-1.image" alt="fremework"></p><p><strong>总结:</strong></p><ul><li>总之 rc-form 内部有自己的状态管理，fieldsStore 记录着所有表单项的信息，通过 getFieldDecorator 和表单进行双向绑定；</li><li>真正的区别在于用不用表单规则验证，不用就 onCollect，否则使用 onCollectValidate，但是必然都会使用 onCollectCommon；</li><li>onCollectCommon 方法内部展示了 onCollect 取值的细节，forceUpdate 在更新组件后，触发 render 方法，接着又回到一开始 getFieldDecorator 中获取 fieldStore 内的值，返回被修改后的组件。</li></ul><p>&gt; 想一下假如当我改变输入框的值得时候是不是会引起表单的重新渲染的问题。 所以这也就导致了渲染性能的问题! 那么必然会有优化的方法，有兴趣的可以看看 rc-field-form。</p><p>文章只是整体浅析实现思路，如有不同意见，欢迎联系我交流！</p><h2 id="推荐阅读" tabindex="-1"><a class="header-anchor" href="#推荐阅读" aria-hidden="true">#</a> 推荐阅读</h2>`,60),N={href:"https://zoo.team/article/about-vite",target:"_blank",rel:"noopener noreferrer"},B={href:"https://juejin.cn/post/6974184935804534815",target:"_blank",rel:"noopener noreferrer"},D={href:"https://juejin.cn/post/6981921291980767269",target:"_blank",rel:"noopener noreferrer"},O=n("h2",{id:"开源作品",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#开源作品","aria-hidden":"true"},"#"),s(" 开源作品")],-1),I=n("ul",null,[n("li",null,"政采云前端小报")],-1),z={href:"https://www.zoo.team/openweekly/",target:"_blank",rel:"noopener noreferrer"},U=n("h2",{id:"招贤纳士",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#招贤纳士","aria-hidden":"true"},"#"),s(" 招贤纳士")],-1),G=n("p",null,"政采云前端团队（ZooTeam），一个年轻富有激情和创造力的前端团队，隶属于政采云产品研发部，Base 在风景如画的杭州。团队现有 40 余个前端小伙伴，平均年龄 27 岁，近 3 成是全栈工程师，妥妥的青年风暴团。成员构成既有来自于阿里、网易的“老”兵，也有浙大、中科大、杭电等校的应届新人。团队在日常的业务对接之外，还在物料体系、工程平台、搭建平台、性能体验、云端应用、数据分析及可视化等方向进行技术探索和实战，推动并落地了一系列的内部技术产品，持续探索前端技术体系的新边界。",-1),L=n("p",null,[s("如果你想改变一直被事折腾，希望开始能折腾事；如果你想改变一直被告诫需要多些想法，却无从破局；如果你想改变你有能力去做成那个结果，却不需要你；如果你想改变你想做成的事需要一个团队去支撑，但没你带人的位置；如果你想改变既定的节奏，将会是“5 年工作时间 3 年工作经验”；如果你想改变本来悟性不错，但总是有那一层窗户纸的模糊… 如果你相信相信的力量，相信平凡人能成就非凡事，相信能遇到更好的自己。如果你希望参与到随着业务腾飞的过程，亲手推动一个有着深入的业务理解、完善的技术体系、技术创造价值、影响力外溢的前端团队的成长历程，我觉得我们该聊聊。任何时间，等着你写点什么，发给 "),n("code",null,"ZooTeam@cai-inc.com")],-1),$=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/98d3aa3d1f8646a8bcda8cfd9e335a4b~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1);function W(Z,H){const a=l("ExternalLinkIcon");return o(),c("div",null,[n("p",null,[s("本文已参与好文召集令活动，点击查看："),n("a",u,[s("后端、大前端双赛道投稿，2万元奖池等你挑战！"),t(a)]),r]),n("p",null,[s("> 这是第 107 篇不掺水的原创，想获取更多原创好文，请搜索公众号关注我们吧~ 本文首发于政采云前端博客："),n("a",k,[s("最熟悉的陌生人rc-form"),t(a)])]),d,n("table",null,[m,n("tbody",null,[v,n("tr",null,[b,g,n("td",null,[s("(nameList?: "),n("a",f,[s("NamePath"),t(a)]),s("[], filterFunc?: (meta: { touched: boolean, validating: boolean }) => boolean) => any")])]),n("tr",null,[y,h,n("td",null,[s("(name: "),n("a",w,[s("NamePath"),t(a)]),s(") => any")])]),F,n("tr",null,[_,j,n("td",null,[s("(fields: "),n("a",x,[s("FieldData"),t(a)]),s("[]) => void")])]),n("tr",null,[q,C,n("td",null,[s("(nameList?: "),n("a",V,[s("NamePath"),t(a)]),s("[]) => Promise")])]),n("tr",null,[P,S,n("td",null,[s("(name: "),n("a",E,[s("NamePath"),t(a)]),s(") => boolean")])]),n("tr",null,[R,M,n("td",null,[s("(name: "),n("a",T,[s("NamePath"),t(a)]),s(") => any")])])])]),A,n("p",null,[n("a",N,[s("Vite 特性和部分源码解析"),t(a)])]),n("p",null,[n("a",B,[s("我在工作中是如何使用 git 的"),t(a)])]),n("p",null,[n("a",D,[s("Serverless Custom (Container) Runtime"),t(a)])]),O,I,n("p",null,[n("strong",null,[s("开源地址 "),n("a",z,[s("www.zoo.team/openweekly/"),t(a)])]),s(" (小报官网首页有微信交流群)")]),U,G,L,$])}const Y=e(i,[["render",W],["__file","最熟悉的陌生人rc-form.html.vue"]]);export{Y as default};
