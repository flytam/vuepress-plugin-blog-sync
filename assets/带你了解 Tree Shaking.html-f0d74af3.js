import{_ as p,z as o,A as c,Y as n,C as s,U as e,a6 as t,Q as i}from"./framework-cb9358d9.js";const l={},u=t(`<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bfefad3ee3474e3a8a461251aaddceb4~tplv-k3u1fbpfcp-watermark.image?" alt="政采云技术团队.png"></p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b4bcf3e8f8294db798dd11c54b597805~tplv-k3u1fbpfcp-watermark.image?" alt="佳民.png"></p><p>&gt; 这是第 156 篇不掺水的原创，想获取更多原创好文，请搜索公众号【政采云前端团队】关注我们吧~</p><h3 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h3><p>JavaScript 绝大多数情况需要通过网络进行加载再执行，加载的文件越小，整体执行时间更短，所以就有了 Tree Shaking 去除无用代码，从而减小文件体积。</p><h3 id="什么是-tree-shaking" tabindex="-1"><a class="header-anchor" href="#什么是-tree-shaking" aria-hidden="true">#</a> 什么是 Tree Shaking</h3><p><strong>Tree-shaking</strong> (摇树) 是一个术语，通常指通过打包工具&quot;摇&quot;我们的代码，将未引用代码 (Dead Code) &quot;摇&quot; 掉。在 Webpack 项目中，有一个入口文件，相当于一棵树的主干，入口文件有很多依赖的模块，相当于树枝，虽然依赖了某些模块，但其实只使用其中的某些方法，通过 Tree Shaking ，将没有使用的方法摇掉，这样来达到删除无用代码的目的。</p><h3 id="tree-shaking-具体做了什么" tabindex="-1"><a class="header-anchor" href="#tree-shaking-具体做了什么" aria-hidden="true">#</a> Tree Shaking 具体做了什么</h3><p>我们通过例子来详细了解一下 Webpack 中 Tree Shaking 到底做了什么</p><ul><li>未使用的函数消除</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// utils.js</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> x <span class="token operator">-</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// index.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> sum <span class="token punctuation">}</span> from <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token operator">/</span>utils<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token comment">// import * as math from &amp;quot;./utils&amp;quot;;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在 utils 中定义了 sum 与 sub 两个方法， 仅使用了 sum 方法，而 sub 方法并没有被使用。我们一起看一下打包后的结果</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">{</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>use strict<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>未使用的 JSON 数据消除</li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// main.json</span>
<span class="token punctuation">{</span>
  &amp;quot;a&amp;quot;<span class="token operator">:</span> &amp;quot;a&amp;quot;<span class="token punctuation">,</span>
  &amp;quot;b&amp;quot;<span class="token operator">:</span> &amp;quot;b&amp;quot;
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// index.js</span>
<span class="token keyword">import</span> main from <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span>json<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>main<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到仅使用了 JSON 中的 a 。我们一起看一下打包后的结果</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">{</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>use strict<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>a<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="tree-shaking-的原理" tabindex="-1"><a class="header-anchor" href="#tree-shaking-的原理" aria-hidden="true">#</a> Tree Shaking 的原理</h3><p>Tree Shaking 在去除代码冗余的过程中，程序会从入口文件出发，扫描所有的模块依赖，以及模块的子依赖，然后将它们链接起来形成一个 “抽象语法树” (AST)。随后，运行所有代码，查看哪些代码是用到过的，做好标记。最后，再将“抽象语法树”中没有用到的代码“摇落”。经历这样一个过程后，就去除了没有用到的代码。 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7bed23d8877d4ddf8ffc249f7cbbf276~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20200729195132323"></p><p>前提是模块必须采用 ES6 Module 语法，因为 Tree Shaking 依赖 ES6 的静态语法：import 和 export。不同于 ES6 Module，CommonJS 支持动态加载模块，在加载前是无法确定模块是否有被调用，所以并不支持 Tree Shaking 。如果项目中使用了 babel 的话， <code>@babel/preset-env</code> 默认将模块转换成 CommonJs 语法，因此需要设置 <code>module：false</code>。</p><p>CommonJS 与 ES6 Module 模块的依赖的区别在于，CommonJS 是<strong>动态的</strong>，ES6 Module 是<strong>静态的</strong>。</p><p>CommonJS 导入时，<code>require</code> 的路径参数是支持表达式的，路径在代码执行时是可以动态改变的，所以如果在代码编译阶段就建立各个模块的依赖关系，那么一定是不准确的，只有在代码运行了以后，才可以真正确认模块的依赖关系，因此说CommonJS 是动态的。</p><p>ES6 模块不是对象，它的对外接口只是一种静态定义，在代码编译，静态解析阶段就会生成，这样我们就可以使用各种工具对JS模块进行依赖分析，优化代码。</p><h4 id="development-模式下" tabindex="-1"><a class="header-anchor" href="#development-模式下" aria-hidden="true">#</a> Development 模式下</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// mode: &amp;quot;production&amp;quot;,</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>development<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">devtool</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">usedExports</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 目的使未被使用的export被标记出来</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打包后的 bundle.js</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* harmony export */</span> __webpack_require__<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>__webpack_exports__<span class="token punctuation">,</span> <span class="token punctuation">{</span>
<span class="token comment">/* harmony export */</span>   <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>sum<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">(</span><span class="token comment">/* binding */</span> sum<span class="token punctuation">)</span>
<span class="token comment">/* harmony export */</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* unused harmony export sub */</span>
<span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> x <span class="token operator">-</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1、可以看到未被使用的 sub 会被标记为 <code>/* unused harmony export sub */</code>，不会被 <code>__webpack_require__.d</code> 进行 exports 绑定；</p>`,30),r=n("code",null,"__webpack_require__.d",-1),d={href:"https://segmentfault.com/a/1190000024457777",target:"_blank",rel:"noopener noreferrer"},k=t(`<p>2、经过压缩工具（UglifyJSPlugin）压缩后，未使用的接口代码会被删除。原理显而易见，未被 <code>__webpack_require__.d</code> 引用，所以压缩工具可以将其安全移除。</p><h4 id="production-模式下" tabindex="-1"><a class="header-anchor" href="#production-模式下" aria-hidden="true">#</a> Production 模式下</h4><p>由前面的例子可以看出 <code>dist/bundle.js</code> 中整个 bundle 都已经被 压缩工具 压缩和混淆破坏，但是如果仔细观察，则不会看到引 <code>sub</code> 函数，但能看到 <code>sum</code> 函数的混淆破坏版本（<code>function r(e){return e*e*e}n.a=r</code>）。</p><p>再看一下两次打包的文件体积会发现，bundle 的体积明显减少了。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7c7005dcdb934685a2ee94629944f464~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220721071044241"></p><h3 id="tree-shaking-和-sideeffects" tabindex="-1"><a class="header-anchor" href="#tree-shaking-和-sideeffects" aria-hidden="true">#</a> Tree Shaking 和 sideEffects</h3><p>提到 Tree Shaking 就要聊一下 sideEffects。什么是 sideEffects ？sideEffects 又是与 Tree Shaking 如何搭配使用的？</p><p><strong>sideEffect</strong>(副作用) 的定义是，在导入时会执行特殊行为的代码，而不是仅仅暴露一个 export 或多个 export。</p><p>webpack v4 开始新增了一个 <code>sideEffects</code> 特性，通过给 <code>package.json</code> 加入 <code>sideEffects: false</code> 声明该包模块是否包含副作用，从而可以为 Tree Shaking 提供更大的优化空间。</p><p>举例说明</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// a.js</span>
<span class="token comment">// 无副作用，仅仅是单纯的 export</span>
<span class="token keyword">function</span> <span class="token function">a</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>a<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  a
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// b.js</span>
<span class="token keyword">function</span> <span class="token function">b</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>b<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 执行了特殊行为</span>
<span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>fun <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  b
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果 a 在 import 后未使用，Tree Shaking 完全可以将其优化掉；但是 b 在 import 后未使用，但因为存在他还执行了为数组原型添加了方法，副作用还是会被保留下来。这时就需要使用 <code>sideEffects: false</code> ，可以强制标识该包模块不存在副作用，那么不管它是否真的有副作用，只要它没有被引用到，整个 模块/包 都会被完整的移除。</p><p>如果你的项目中存在一些副作用代码 b 需要被保留下来，比如 polyfill、css、scss、less 等，可以按下面方法一样配置；保证必要的代码不被 Tree Shaking</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// package.json</span>
<span class="token punctuation">{</span>
  &amp;quot;name&amp;quot;<span class="token operator">:</span> &amp;quot;your-project&amp;quot;<span class="token punctuation">,</span>
  &amp;quot;sideEffects&amp;quot;<span class="token operator">:</span> <span class="token punctuation">[</span>&amp;quot;./src/b.js&amp;quot;<span class="token punctuation">,</span> &amp;quot;*.css&amp;quot;<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p>通过以上讲解，使 Webpack 更精确地检测无效代码，完成 Tree Shaking 操作，需要符合以下条件：</p><ul><li>使用 ES6 Module 语法（即 <code>import</code> 和 <code>export</code>）。</li><li>确保没有 <code>@babel/preset-env</code>等工具将 ES6Module 语法转换为 CommonJS 模块。</li><li><code>optimization: { minimize: true, usedExports: true }</code>。</li><li>使用支持 Tree Shaking 的包。</li></ul><h3 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接" aria-hidden="true">#</a> 参考链接</h3>`,19),m={href:"https://segmentfault.com/a/1190000040037144",target:"_blank",rel:"noopener noreferrer"},v={href:"https://webpack.docschina.org/guides/tree-shaking/",target:"_blank",rel:"noopener noreferrer"},b=n("h2",{id:"推荐阅读",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#推荐阅读","aria-hidden":"true"},"#"),s(" 推荐阅读")],-1),h={href:"https://juejin.cn/post/7132628898453880840",target:"_blank",rel:"noopener noreferrer"},g={href:"https://www.zoo.team/article/http-referer",target:"_blank",rel:"noopener noreferrer"},f={href:"https://juejin.cn/post/7127440050937151525",target:"_blank",rel:"noopener noreferrer"},_={href:"https://juejin.cn/post/7124839474575441934",target:"_blank",rel:"noopener noreferrer"},j={href:"https://juejin.cn/post/7122240814108901406",target:"_blank",rel:"noopener noreferrer"},x=n("h2",{id:"开源作品",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#开源作品","aria-hidden":"true"},"#"),s(" 开源作品")],-1),y=n("ul",null,[n("li",null,"政采云前端小报")],-1),q={href:"https://www.zoo.team/openweekly/",target:"_blank",rel:"noopener noreferrer"},S=n("ul",null,[n("li",null,"商品选择 sku 插件")],-1),w={href:"https://github.com/zcy-inc/skuPathFinder-back",target:"_blank",rel:"noopener noreferrer"},T=n("h2",{id:"招贤纳士",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#招贤纳士","aria-hidden":"true"},"#"),s(" 招贤纳士")],-1),E=n("p",null,"政采云前端团队（ZooTeam），一个年轻富有激情和创造力的前端团队，隶属于政采云产品研发部，Base 在风景如画的杭州。团队现有 90 余个前端小伙伴，平均年龄 27 岁，近 4 成是全栈工程师，妥妥的青年风暴团。成员构成既有来自于阿里、网易的“老”兵，也有浙大、中科大、杭电等校的应届新人。团队在日常的业务对接之外，还在物料体系、工程平台、搭建平台、性能体验、云端应用、数据分析及可视化等方向进行技术探索和实战，推动并落地了一系列的内部技术产品，持续探索前端技术体系的新边界。",-1),z=n("p",null,[s("如果你想改变一直被事折腾，希望开始能折腾事；如果你想改变一直被告诫需要多些想法，却无从破局；如果你想改变你有能力去做成那个结果，却不需要你；如果你想改变你想做成的事需要一个团队去支撑，但没你带人的位置；如果你想改变既定的节奏，将会是“5 年工作时间 3 年工作经验”；如果你想改变本来悟性不错，但总是有那一层窗户纸的模糊… 如果你相信相信的力量，相信平凡人能成就非凡事，相信能遇到更好的自己。如果你希望参与到随着业务腾飞的过程，亲手推动一个有着深入的业务理解、完善的技术体系、技术创造价值、影响力外溢的前端团队的成长历程，我觉得我们该聊聊。任何时间，等着你写点什么，发给 "),n("code",null,"ZooTeam@cai-inc.com")],-1),J=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/98d3aa3d1f8646a8bcda8cfd9e335a4b~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1);function C(M,N){const a=i("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("> 关于 "),r,s(" 的含义，可参考 "),n("a",d,[s("深入了解 webpack 模块加载原理"),e(a)]),s(" 一文。")]),k,n("p",null,[n("a",m,[s("Tree shaking原理及应用"),e(a)])]),n("p",null,[n("a",v,[s("Tree Shaking"),e(a)])]),b,n("p",null,[n("a",h,[s("厉害！这篇正则表达式竟写的如此详尽"),e(a)])]),n("p",null,[n("a",g,[s("学习 HTTP Referer"),e(a)])]),n("p",null,[n("a",f,[s("浅谈低代码平台远程组件加载方案"),e(a)])]),n("p",null,[n("a",_,[s("前端富文本基础及实现"),e(a)])]),n("p",null,[n("a",j,[s("可视化搭建系统之数据源"),e(a)])]),x,y,n("p",null,[n("strong",null,[s("开源地址 "),n("a",q,[s("www.zoo.team/openweekly/"),e(a)])]),s(" (小报官网首页有微信交流群)")]),S,n("p",null,[n("strong",null,[s("开源地址 "),n("a",w,[s("https://github.com/zcy-inc/skuPathFinder-back/"),e(a)])])]),T,E,z,J])}const B=p(l,[["render",C],["__file","带你了解 Tree Shaking.html.vue"]]);export{B as default};
