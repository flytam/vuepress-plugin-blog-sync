import{_ as r,z as s,A as l,Y as e,C as t,U as n,Q as _}from"./framework-cb9358d9.js";const a={},c={href:"https://weekly.zoo.team/detail/124",target:"_blank",rel:"noopener noreferrer"},i=e("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/316fb6cc772f41568ecb1fdda8b093a5~tplv-k3u1fbpfcp-zoom-1.image",alt:""},null,-1),p={href:"https://juejin.cn/post/6844904197595332622",target:"_blank",rel:"noopener noreferrer"},h=e("p",null,"> 浅拷贝是创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值，如果属性是引用类型，拷贝的就是内存地址 ，所以如果其中一个对象改变了这个地址，就会影响到另一个对象。 深拷贝是将一个对象从内存中完整的拷贝一份出来,从堆内存中开辟一个新…",-1),u={start:"2"},f={href:"https://zhuanlan.zhihu.com/p/312306021",target:"_blank",rel:"noopener noreferrer"},d=e("p",null,"> 这篇文章中提到的内容，均为我今年在蚂蚁集团· 体验技术部 4 个月暑期实习的成果，在此特别说明。非常感谢实习期间 @林外 @偏右悄悄地 @王嘉喆 等前辈们的指导，以及诸多可爱的小伙伴们，想你们呀 XD。 自诩为「…",-1),m={start:"3"},b={href:"https://mp.weixin.qq.com/s/PFFkWxfUkyw3iKS3Mukrpw",target:"_blank",rel:"noopener noreferrer"},k=e("p",null,"> 分享一个业内一款出色的包管理器——pnpm。目前 GitHub 已经有 star 9.8k，现在已经相对成熟且稳定了。它由 npm/yarn 衍生而来，但却解决了 npm/yarn 内部潜在的 bug，并且极大了地优化了性能，扩展了使用场景",-1),g={start:"4"},j={href:"https://mp.weixin.qq.com/s/z5yyUFtwvkQnc3q3AHOgJg",target:"_blank",rel:"noopener noreferrer"},y=e("p",null,"> 一文让读者一文搞懂 source map的机制。",-1),w={start:"5"},x={href:"https://juejin.cn/post/6935232082482298911",target:"_blank",rel:"noopener noreferrer"},v=e("p",null,"> 浏览器主进程：只有一个，主要控制页面的创建、销毁、网络资源管理、下载等。 第三方插件进程：每一种类型的插件对应一个进程，仅当使用该插件时才创建。 GPU进程：最多一个，用于3D绘制等。 浏览器渲染进程(浏览器内核)：每个Tab页对应一个进程，互不影响。 这里我们只考虑输入的是一…",-1),z={start:"6"},q={href:"https://juejin.cn/post/6934500357091360781",target:"_blank",rel:"noopener noreferrer"},I=e("p",null,"> 最大安全数字：Number.MAX_SAFE_INTEGER = Math.pow(2, 53) - 1，转换成整数就是 16 位，所以 0.1 === 0.1，是因为通过 toPrecision(16) 去有效位之后，两者是相等的。 在两数相加时，会先转换成二进制，0.1 和…",-1),N={start:"7"},C={href:"https://blog.csdn.net/qq_31967569/article/details/106617532",target:"_blank",rel:"noopener noreferrer"},E=e("p",null,"> 简介 控制反转和依赖注入是常见一种设计模式，在前后端均有很深的应用场景，不了解的小伙伴可以先看下资料：wiki/设计模式_(计算机)，wiki/控制反转 如果之前有过 Angular 开发经历，那么肯定用过Injectable和Component等常见的装饰器，其作用就是完成控制反转和依赖注入 对于 node 后端，也同样有很多以IoC和DI这套思想为主打的库，比如：NestJs，InversifyJs等 今天主要聊聊这些依赖注入框架下的装饰器的使用原理...",-1),T=e("p",null,[e("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d1bfd6a55ef4412fbe0b73ab29e4366c~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1);function A(D,U){const o=_("ExternalLinkIcon");return s(),l("div",null,[e("p",null,[t("> "),e("a",c,[t("ZooTeam 前端周刊｜第 124 期"),n(o)]),t(" > > 浏览更多往期周刊，请访问： https://weekly.zoo.team > > "),i]),e("ol",null,[e("li",null,[e("a",p,[t("浅拷贝与深拷贝"),n(o)])])]),h,e("ol",u,[e("li",null,[e("a",f,[t("html2sketch：一名设计工程师的 C2D 探索之路"),n(o)])])]),d,e("ol",m,[e("li",null,[e("a",b,[t("为什么现在我更推荐 pnpm 而不是 npm/yarn?"),n(o)])])]),k,e("ol",g,[e("li",null,[e("a",j,[t("前端工程化探究--source map"),n(o)])])]),y,e("ol",w,[e("li",null,[e("a",x,[t("从输入URL开始建立前端知识体系"),n(o)])])]),v,e("ol",z,[e("li",null,[e("a",q,[t("字节跳动最爱考的前端面试题：JavaScript 基础"),n(o)])])]),I,e("ol",N,[e("li",null,[e("a",C,[t("有趣的装饰器：使用 Reflect Metadata 实践依赖注入_嘿嘿-CSDN博客"),n(o)])])]),E,T])}const J=r(a,[["render",A],["__file","ZooTeam 前端周刊｜第 124 期.html.vue"]]);export{J as default};
