import{_ as r,z as s,A as a,Y as e,C as t,U as n,a6 as c,Q as l}from"./framework-cb9358d9.js";const _={},i={href:"https://weekly.zoo.team/detail/105",target:"_blank",rel:"noopener noreferrer"},p=e("img",{src:"//p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/404f9aee59e7467499767b83835b2f56~tplv-k3u1fbpfcp-zoom-1.image",alt:""},null,-1),d={href:"https://segmentfault.com/a/1190000037516664",target:"_blank",rel:"noopener noreferrer"},h=e("p",null,"> 这里科普下,什么是serverless: 现在如果是普通的发布构建流程,那么你先要去买个服务器,然后配置nginx,然后启动你的后端服务器，如果是前后端分离项目,还要把前端构建后的静态资源产物同步到对应文件夹提供给用户访问（也有容器化的,这里不做过多阐述）,这一系列的操作，很难让一个人完全实现，或者即使能实现那么对这个...",-1),u={start:"2"},f={href:"https://www.jianshu.com/p/65b348bf86ad",target:"_blank",rel:"noopener noreferrer"},m=e("p",null,"> Context 通过组件树提供了一个传递数据的方法，从而避免了在每一个层级手动的传递 props 属性。 有部分小伙伴应该使用props属性进行组件向下传值的操作。当多个组件嵌套时候。你就需要慢慢向上寻找最初的值是什么~",-1),g={start:"3"},b={href:"https://mp.weixin.qq.com/s/0IdR0JamKGu_gU-MMen_zg",target:"_blank",rel:"noopener noreferrer"},k=e("p",null,"> 如何做到代码质量的管控与提升。",-1),v={start:"4"},S={href:"https://juejin.cn/post/6885471967714115597?utm_source=gold_browser_extension",target:"_blank",rel:"noopener noreferrer"},j={href:"https://github.com/axios/axios",target:"_blank",rel:"noopener noreferrer"},E={start:"5"},x={href:"https://segmentfault.com/a/1190000018250127",target:"_blank",rel:"noopener noreferrer"},R=e("p",null,"> 在 React Fiber 架构面世一年多后，最近 React 又发布了最新版 16.8.0，又一激动人心的特性：React Hooks 正式上线，让我升级 React 的意愿越来越强烈了。在升级之前，不妨回到原点，了解下人才济济的 React 团队为什么要大费周章，重写 React 架构，而 Fiber 又是个什么概念。",-1),B={start:"6"},A={href:"https://juejin.cn/post/6886258269137043464",target:"_blank",rel:"noopener noreferrer"},C=e("p",null,"> @argyleink在第四次的伦敦（LondonCSS 2020）CSS活动中分享了一个有关于CSS特性相关的话题。看了一下这个主题的PPT，里面有些新东西还是蛮有意思的。基于该PPT，我稍微整理近24个CSS方面的新特性，感兴趣的同学可以继续往下阅读。",-1),T={start:"7"},P={href:"https://juejin.cn/post/6885957893724569613",target:"_blank",rel:"noopener noreferrer"},F=e("p",null,[t("> 我工作中的技术栈主要是 "),e("code",null,"React + TypeScript"),t("，这篇文章我想总结一下如何在项目中运用 React 的一些技巧解决一些实际问题，本文中使用的代码都是简化后的，不代表生产环境。生产环境的代码肯定比文中的例子要复杂很多，但是简化后的思想应该是相通的。")],-1),H={start:"8"},w={href:"https://juejin.cn/post/6885364720056926221",target:"_blank",rel:"noopener noreferrer"},y={href:"https://blog.shenfq.com/2019/%E3%80%90%E7%BF%BB%E8%AF%91%E3%80%91%E5%9C%A8-react-hooks-%E4%B8%AD%E5%A6%82%E4%BD%95%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE%EF%BC%9F/",target:"_blank",rel:"noopener noreferrer"},z={start:"9"},I={href:"https://juejin.cn/post/6881795051492474893",target:"_blank",rel:"noopener noreferrer"},J=c("<p>&gt; <code>vue-vben-admin-2.0</code> 是一个全新的开源系统,基于<code>ant-design-vue2.x</code>,<code>typescript4</code>,<code>vue3</code>,<code>vite</code>实现的 vue3 风格的后台管理系统。 &gt; &gt; 项目基于<code>ant-design-vue</code>,<code>typescript</code>,<code>vue3.0</code>,<code>vite</code>,<code>tailwindcss</code>,<code>tsx</code>实现的 vue3 风格的后台管理系统。</p>",1),V={start:"10"},N={href:"https://juejin.cn/post/6885494787630170120",target:"_blank",rel:"noopener noreferrer"},q=e("p",null,"> 1995年，Brendan Eich 只用 10 天就写出了 JavaScript 的第一版，如今JavaScript 25 岁了，25 年的反复锻造与打磨，成就了 JavaScript 在今天的应用程序开发中毋庸置疑的统治地位。这25年间，很多人认识前端、走近前端，并因此改变了一些事情。截至 2019 年，JavaScript 已连续七年位居“最常用编程语言”。那它的未来又会怎样？ 10月24日，我们邀请到前端圈的大佬跟我们一同回顾前端的过去、畅聊前端的现在、瞻望前端的将来。",-1),D=e("p",null,[e("img",{src:"//p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fbc069fa4a1d4ccaa792e2f49493d2a5~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1);function L(Z,G){const o=l("ExternalLinkIcon");return s(),a("div",null,[e("p",null,[t("> "),e("a",i,[t("ZooTeam 前端周刊｜第 105 期"),n(o)]),t(" > > 浏览更多往期周刊，请访问： https://weekly.zoo.team > > "),p]),e("ol",null,[e("li",null,[e("a",d,[t("5G前端时代会迎来什么改变"),n(o)])])]),h,e("ol",u,[e("li",null,[e("a",f,[t("React Context(上下文) 作用和使用 看完不懂 你打我 - 简书"),n(o)])])]),m,e("ol",g,[e("li",null,[e("a",b,[t("在淘宝，我们是这样衡量代码质量的"),n(o)])])]),k,e("ol",v,[e("li",null,[e("a",S,[t("77.9K Star 的 Axios 项目有哪些值得借鉴的地方"),n(o)])])]),e("p",null,[t("> "),e("a",j,[t("Axios"),n(o)]),t(" 是一个基于 Promise 的 HTTP 客户端，同时支持浏览器和 Node.js 环境。它是一个优秀的 HTTP 客户端，被广泛地应用在大量的 Web 项目中。")]),e("ol",E,[e("li",null,[e("a",x,[t("(22) React Fiber 原理介绍_有赞美业前端团队 - SegmentFault 思否"),n(o)])])]),R,e("ol",B,[e("li",null,[e("a",A,[t("超详|2020年你不应该错过的CSS新特性"),n(o)])])]),C,e("ol",T,[e("li",null,[e("a",P,[t("我在大厂写React，学到了什么？"),n(o)])])]),F,e("ol",H,[e("li",null,[e("a",w,[t("Vue 3 的组合 API 如何请求数据？"),n(o)])])]),e("p",null,[t("> 之前在学习 React Hooks 的过程中，看到一篇外网文章，通过 Hooks 来请求数据，并将这段逻辑抽象成一个新的 Hooks 给其他组件复用，我也在我的博客里翻译了一下："),e("a",y,[t("《在 React Hooks 中如何请求数据？》"),n(o)]),t("，感兴趣可以看看。虽然是去年的文章，在阅读之后一下子就掌握了 Hooks 的使用方式，而且数据请求是在业务代码中很常用的逻辑。 > > Vue 3 已经发布一段时间了，其组合 API 多少有点 React Hooks 的影子在里面，今天我也打算通过这种方式来学习下组合 API。")]),e("ol",z,[e("li",null,[e("a",I,[t("一个基于vue3+vite+ts的完整项目"),n(o)])])]),J,e("ol",V,[e("li",null,[e("a",N,[t("【官方】1024圆桌活动：JavaScript 的过去、现在和未来"),n(o)])])]),q,D])}const M=r(_,[["render",L],["__file","ZooTeam 前端周刊｜第 105 期.html.vue"]]);export{M as default};
