import{_ as t,z as e,A as o,Y as n,C as s,U as p,a6 as c,Q as l}from"./framework-cb9358d9.js";const i={},r=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/390e29834bd5468497b300850c876cdc~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1),u={href:"https://zoo.team/article/set-up-the-npm-private-library",target:"_blank",rel:"noopener noreferrer"},k=n("p",null,[n("img",{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f044dfd61aea41e3a9a3ce154bcd4ef6~tplv-k3u1fbpfcp-watermark.image",alt:""})],-1),d=n("h2",{id:"前言",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),s(" 前言")],-1),m=n("p",null,"按照国际惯例，正文开始之前，我们先简单介绍下目前市面上的 npm 私库开源框架。",-1),v=n("ul",null,[n("li",null,"Verdaccio")],-1),b=n("p",null,'Verdaccio 是 sinopia 开源框架的一个分支。它提供了自己的小数据库，以及代理其他注册中心的能力（例如。npmjs.org 网站)，配置以及部署相对简单，一步到"胃"。如果公司的私包比较少的话或者你想偷懒，可以考虑一下。',-1),g=n("ul",null,[n("li",null,"Cnpmjs.org")],-1),f={href:"https://registry.npm.taobao.org/",target:"_blank",rel:"noopener noreferrer"},y=c(`<ul><li>Nexus</li></ul><p>后端开发的小伙伴应该比较熟悉。Nexus2 主要是用于 maven/gralde 仓库的统一管理，而 Nexus3 则添加了npm插件，可以对 npm 提供支持，其中 npm 仓库有三种类型，分别是 hosted（私有仓库）、proxy（代理仓库）、group（组合仓库）。</p><p>总体来讲，抛开 Nexus，虽然 Cnpmjs.org 在部署过程以及总体设计方案上相对于 Verdaccio 复杂的多，但是它提供更高的拓展性，定制性，可以支持多种业务使用场景。接下来，我们分别从 Cnpmjs.org 容器化部署、数据迁移、OSS 容灾备份等内容，层层展开。</p><h2 id="cnpmjs-org-容器化部署" tabindex="-1"><a class="header-anchor" href="#cnpmjs-org-容器化部署" aria-hidden="true">#</a> Cnpmjs.org 容器化部署</h2><p>目前，公司的应用部署基本都是容器化部署，内部搭建了 ipaas 平台，应用流程化部署以及一键发布。而 <strong>Cnpmjs.org</strong> 也附带了 Dockerfile 以及 docker-compose.yml 文件，所以，这里大致讲解下怎么用 <strong>docker</strong> 部署吧。</p><ul><li>首先让我们看看 <strong>Dockerfile</strong> 文件</li></ul><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> node:12</span>
<span class="token instruction"><span class="token keyword">MAINTAINER</span> zian yuanzhian@cai-inc.com</span>

<span class="token comment"># Working enviroment</span>
<span class="token instruction"><span class="token keyword">ENV</span> <span class="token operator">\\</span>
    CNPM_DIR=&amp;quot;/var/app/cnpmjs.org&amp;quot; <span class="token operator">\\</span>
    CNPM_DATA_DIR=&amp;quot;/var/data/cnpm_data&amp;quot; </span>

<span class="token comment"># shell格式</span>
<span class="token comment"># 在docker build 时运行</span>
<span class="token instruction"><span class="token keyword">RUN</span> mkdir -p <span class="token variable">\${CNPM_DIR}</span></span>

<span class="token comment"># 指定工作目录：用 WORKDIR 指定的工作目录，会在构建镜像的每一层中都存在</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> <span class="token variable">\${CNPM_DIR}</span></span>

<span class="token comment"># 复制指令：从上下文目录中复制目录或文件到容器里指定的路径</span>
<span class="token instruction"><span class="token keyword">COPY</span> package.json <span class="token variable">\${CNPM_DIR}</span></span>

<span class="token instruction"><span class="token keyword">RUN</span> npm set registry https://registry.npm.taobao.org</span>

<span class="token instruction"><span class="token keyword">RUN</span> npm install --production</span>

<span class="token instruction"><span class="token keyword">COPY</span> .  <span class="token variable">\${CNPM_DIR}</span></span>
<span class="token instruction"><span class="token keyword">COPY</span> docs/dockerize/config.js  <span class="token variable">\${CNPM_DIR}</span>/config/</span>

<span class="token comment"># 声明端口（7001为register服务、7002为web服务）</span>
<span class="token instruction"><span class="token keyword">EXPOSE</span> 7001/tcp 7002/tcp</span>

<span class="token comment"># 匿名数据卷：在启动容器时忘记挂载数据卷，会自动挂载到匿名卷。</span>
<span class="token instruction"><span class="token keyword">VOLUME</span> [&amp;quot;/var/data/cnpm_data&amp;quot;]</span>

<span class="token instruction"><span class="token keyword">RUN</span> chmod +x <span class="token variable">\${CNPM_DIR}</span>/docker-entrypoint_prod.sh</span>

<span class="token comment"># Entrypoint </span>
<span class="token comment"># exec格式</span>
<span class="token comment"># 在docker run 时运行</span>
<span class="token comment"># dockerfile存在多个 CMD 命令，仅最后一个生效</span>
<span class="token comment"># CMD [&amp;quot;node&amp;quot;, &amp;quot;dispatch.js&amp;quot;]</span>
<span class="token instruction"><span class="token keyword">CMD</span> [&amp;quot;npm&amp;quot;, &amp;quot;run&amp;quot;, &amp;quot;prod&amp;quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里把 <strong>CMD</strong> 命令修改为<code>[&amp;quot;npm&amp;quot;, &amp;quot;run&amp;quot;, &amp;quot;prod&amp;quot;]</code>，因为增加了一层不同环境的 <strong>shell</strong> 脚本，目前全局变量全都存放在这里。</p><p>示例：docker-entrypoint_env.sh</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">DB</span><span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment">#39;db_cnpmjs&amp;#39;</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">DB_USRNAME</span><span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment">#39;root&amp;#39;</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">DB_PASSWORD</span><span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment">#39;123456&amp;#39;</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">DB_HOST</span><span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment">#39;127.0.0.1&amp;#39;</span>

<span class="token builtin class-name">export</span> <span class="token assign-left variable">BINDING_HOST</span><span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment">#39;0.0.0.0&amp;#39;</span>

<span class="token assign-left variable">DEBUG</span><span class="token operator">=</span>cnpm* <span class="token function">node</span> dispatch.js 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>再修改下 <strong>docker-compose.yml</strong> 文件，这里把 <strong>mysql-db</strong> 这个服务删掉了，原因是可通过 <strong>/docs/dockerize/config.js</strong> 下的配置文件去连接公司测试环境的 <strong>mysql</strong> 数据库，则不需要构建生成 <strong>mysql-db镜像</strong> 。</li></ul><div class="language-docker-compose.yml line-numbers-mode" data-ext="docker-compose.yml"><pre class="language-docker-compose.yml"><code>version: &amp;#39;3&amp;#39; # docker版本
services: # 配置的容器列表
  web: # 自定义，服务名称
    build: # 基于dockerfile构建镜像(可增加args)
      context: .
      dockerfile: Dockerfile ## 依赖的Dockerfile文件
    image: cnpmjs.org # 镜像名称或id
    volumes:
      - cnpm-files-volume:/var/data/cnpm_data
    ports:
      - &amp;quot;7001:7001&amp;quot;
      - &amp;quot;7002:7002&amp;quot; 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>&lt;font color=&quot;red&quot;&gt;注意点：1、全局配置文件路径： <strong>/docs/dockerize/config.js</strong> ；2、<strong>bindingHost</strong> 为 0.0.0.0 。&lt;/font&gt;</p><ul><li>最后，在控制台敲下<code>docker-compose up -d</code>，即以守护进程模式形式启动应用，然后打开浏览器入<code>http://127.0.0.1:7002</code>，就会看到 web 页面。执行 <code>npm config set registry http://127.0.0.1:7001 </code> 可设置为搭建的私库的镜像源地址，这里推荐使用 <code>nrm</code>，可自由切换 npm 源。</li></ul><p>展示站点如下图：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0813e94d563c46f6b4ddbc0114623b60~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>&lt;font color=&quot;red&quot;&gt;注意点：1、当你改变本地代码之后，先执行 <strong>docker-compose build</strong> 构建新的镜像，然后执行 <strong>docker-compose up -d</strong> 取代运行中的容器。&lt;/font&gt;</p><h2 id="数据迁移" tabindex="-1"><a class="header-anchor" href="#数据迁移" aria-hidden="true">#</a> 数据迁移</h2><p>由于公司之前用的 <strong>Verdaccio</strong> 搭建的私库，要切换使用新的 <strong>npm 私库</strong>，意味着要把之前发布过的私包全部迁移过来。大概统计了下，有400 多个 package，总共有 7000 多个版本，按照正常逻辑，做数据迁移首先会从数据库下手，但是 <strong>Verdaccio</strong> 并不依赖数据库。刚开始没有一点头绪，大概看了下 <strong>Cnpmjs.org</strong> 的源码，了解到当我们 <strong>publish</strong> 模块时， 它是怎么把 <strong>npm 模块</strong> 的元数据存储到数据库，下面我们一步步来揭开她的面纱。</p><p>通过路由文件（<code>/routes/registry.js</code>）我们很容易找到<code>/controllers/registry/package/save.js</code>，这个文件便是我们想要的。</p><p>核心代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> pkg <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>request<span class="token punctuation">.</span>body<span class="token punctuation">;</span> <span class="token comment">// 这里拿到npm模块元数据，即package.json文件经过libnpmpublish模块处理过的json数据</span>
<span class="token keyword">var</span> username <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment">// 当前用户名</span>
<span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>params<span class="token punctuation">.</span>name <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// npm模块名</span>
<span class="token keyword">var</span> filename <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>_attachments <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// npm模块的压缩后的文件名</span>
<span class="token keyword">var</span> version <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>versions <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// npm模块的最新版本</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// upload attachment</span>

<span class="token comment">// base64解码，获取模块文件二进制数据。从libnpmpublish模块了解到tardata.toString(&amp;#39;base64&amp;#39;)，即npm模块文件流转base64字符串</span>
<span class="token keyword">var</span> tarballBuffer <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>attachment<span class="token punctuation">.</span>data<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>base64<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">// 默认使用fs-cnpm，将npm模块文件保存到本地，默认保存路径：path.join(p<wbr>rocess.env.HOME, &amp;#39;.cnpmjs.org&amp;#39;, &amp;#39;nfs&amp;#39;)</span>
<span class="token keyword">var</span> uploadResult <span class="token operator">=</span> <span class="token keyword">yield</span> nfs<span class="token punctuation">.</span><span class="token function">uploadBuffer</span><span class="token punctuation">(</span>tarballBuffer<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> versionPackage <span class="token operator">=</span> pkg<span class="token punctuation">.</span>versions<span class="token punctuation">[</span>version<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> dist <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">shasum</span><span class="token operator">:</span> shasum<span class="token punctuation">,</span>
  <span class="token literal-property property">size</span><span class="token operator">:</span> attachment<span class="token punctuation">.</span>length
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// if nfs upload return a key, record it</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>uploadResult<span class="token punctuation">.</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  dist<span class="token punctuation">.</span>tarball <span class="token operator">=</span> uploadResult<span class="token punctuation">.</span>url<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>uploadResult<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  dist<span class="token punctuation">.</span>key <span class="token operator">=</span> uploadResult<span class="token punctuation">.</span>key<span class="token punctuation">;</span>
  dist<span class="token punctuation">.</span>tarball <span class="token operator">=</span> uploadResult<span class="token punctuation">.</span>key<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> mod <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> name<span class="token punctuation">,</span>
  <span class="token literal-property property">version</span><span class="token operator">:</span> version<span class="token punctuation">,</span>
  <span class="token literal-property property">author</span><span class="token operator">:</span> username<span class="token punctuation">,</span>
  <span class="token keyword">package</span><span class="token operator">:</span> versionPackage
<span class="token punctuation">}</span><span class="token punctuation">;</span>

mod<span class="token punctuation">.</span>package<span class="token punctuation">.</span>dist <span class="token operator">=</span> dist<span class="token punctuation">;</span>

<span class="token comment">// 模块数据保存到数据库</span>
<span class="token keyword">var</span> addResult <span class="token operator">=</span> <span class="token keyword">yield</span> packageService<span class="token punctuation">.</span><span class="token function">saveModule</span><span class="token punctuation">(</span>mod<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>即只要我们能够拿到 npm 模块的元数据（即 package.json 被处理过的 json 数据），就能把模块文件上传到文件系统或者 OSS 服务，同时数据落库。<strong>Verdaccio</strong> 有两个 api 可以拿到其私库 npm 模块全量数据和当前 npm 模块的 json 数据，路径分别是<code>/-/verdaccio/packages</code>，<code>/-/verdaccio/sidebar/$PKG$</code>，其中有 scope 的模块的请求路径是<code>/-/verdaccio/sidebar/$SCOPE$/$PKG$</code>。</p><p>思路已经很明确了，开始动起来吧！新增 save_zcy.js 文件，基于原来的<code>/controllers/registry/package/save.js</code>稍加改造下。</p><p>核心代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 请求远程文件，并返回二进制流</span>
<span class="token keyword">const</span> <span class="token function-variable function">handleFiles</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      http<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> res <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>binary<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token comment">// 二进制</span>
        <span class="token keyword">let</span> files <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>
        res<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>data<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> chunk <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span> <span class="token comment">// 加载到内存</span>
          files <span class="token operator">+=</span> chunk
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>end<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span> <span class="token comment">// 加载完</span>
          <span class="token function">resolve</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span> 
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 获取远程模块文件的二进制数据</span>
<span class="token keyword">yield</span> <span class="token function">handleFiles</span><span class="token punctuation">(</span>dist<span class="token punctuation">.</span>tarball<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 利用 Buffer 转为对象</span>
  <span class="token keyword">const</span> tardata <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>binary<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
  pkg<span class="token punctuation">.</span>_attachments <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  pkg<span class="token punctuation">.</span>_attachments<span class="token punctuation">[</span>filename<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>content_type<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>application<span class="token operator">/</span>octet<span class="token operator">-</span>stream<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
    <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>data<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token operator">:</span> tardata<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>base64<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 从缓冲区读取数据，使用base64编码并转换成字符串</span>
    <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>length<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token operator">:</span> tardata<span class="token punctuation">.</span>length<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> error <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">{</span>
    error<span class="token punctuation">,</span>
    <span class="token literal-property property">reason</span><span class="token operator">:</span> error<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来我们把控制器 save_zcy.js 接入到 registry 服务的 app 路由上。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 新增 fetchPackageZcy、savePackageZcy 控制器</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">:name</span><span class="token regex-delimiter">/</span></span><span class="token operator">:</span>version<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> syncByInstall<span class="token punctuation">,</span> fetchPackageZcy<span class="token punctuation">,</span> savePackageZcy<span class="token punctuation">,</span> getOneVersion<span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">:</span>name<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> syncByInstall<span class="token punctuation">,</span> fetchPackageZcy<span class="token punctuation">,</span> savePackageZcy<span class="token punctuation">,</span> listAllVersions<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>控制器 fetchPackageZcy 作用是请求上面的 api（/-/verdaccio/sidebar/$SCOPE$/$PKG$ 或 /-/verdaccio/sidebar/$PKG$）来拉取对应模块的 json 数据。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4ee40a7766ac407b861e0e6084e3de39~tplv-k3u1fbpfcp-zoom-1.image" alt="213BFDE6-B389-4376-A959-DC9E2F71FDF7.png"></p><p>Ok，接下来我们写一个定时任务，每隔一段时间执行 <code>npm install [name]</code>，这样原来私库的 npm 包都能够 install 并进入到上面的控制器逻辑，大功告成！</p><h2 id="oss-容灾备份" tabindex="-1"><a class="header-anchor" href="#oss-容灾备份" aria-hidden="true">#</a> OSS 容灾备份</h2><p>首先，简单说明下为什么要做 <strong>OSS 容灾备份</strong>，有以下几点。</p><ul><li>如果服务器上磁盘损坏，易丢失文件，有一定的风险</li><li>若服务器磁盘爆满，可自动降级上传模块文件到 <strong>OSS</strong></li></ul><p>基于以上几点，我们整理了下容灾备份方案：</p><ul><li><strong>package publish</strong></li></ul><p>&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/06b600e8297a434087f43bcad08c7f6d~tplv-k3u1fbpfcp-zoom-1.image&quot; style=&quot;zoom:33%;&quot; /&gt;</p><p>即发布模块文件时本地存储，同时上传到 <strong>oss</strong> 作为备份，用到的插件分别是 <strong>fs-cnpm</strong>、<strong>oss-cnpm</strong>。</p><ul><li><strong>package install</strong></li></ul><p>&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/df3ff3801cf74755a0c09be7d2a19029~tplv-k3u1fbpfcp-zoom-1.image&quot; style=&quot;zoom:33%;&quot; /&gt;</p><p>即下载模块文件时，先判断是否是私包（即是包名否有带 <strong>scope</strong>），如果不是私包代理到上游 <strong>registry</strong>，若是私包先判断服务器本地是否有该私包文件，如果不存在先去 <strong>oss</strong> 下载到本地 <strong>nfs</strong> 目录下，如果存在则直接从 <strong>nfs</strong> 目录找到模块文件，然后读取并写到 <strong>downloads</strong> 目录下，最后调用 <strong>fs.createReadStream</strong> 方法流读取该文件。</p><p><strong>isEnsureFileExists</strong> 即判断模块文件本地是否存在，代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> mkdirp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>mkdirp<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>fs<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">ensureFileExists</span><span class="token punctuation">(</span><span class="token parameter">filepath</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    fs<span class="token punctuation">.</span><span class="token function">access</span><span class="token punctuation">(</span>filepath<span class="token punctuation">,</span> fs<span class="token punctuation">.</span>constants<span class="token punctuation">.</span><span class="token constant">F_OK</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，在 oss 下载模块文件到 nfs 之前，一定要先创建模块文件目录，方法如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> mkdirp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>mkdirp<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">ensureDirExists</span><span class="token punctuation">(</span><span class="token parameter">filepath</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">mkdirp</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">dirname</span><span class="token punctuation">(</span>filepath<span class="token punctuation">)</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="邮件通知" tabindex="-1"><a class="header-anchor" href="#邮件通知" aria-hidden="true">#</a> 邮件通知</h2><p><strong>Cnpmjs.org</strong> 本来就带有邮件通知的功能，但只应用错误日志上报。由于我们的私包大部分都是业务组件、工具等，有时候发布正式版本的业务组件需要通知到业务组件的使用方。目前，我们采用 <strong>maintainers</strong> 来维护，包含模块的维护者及使用者。</p><p>示例：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>&amp;quot;maintainers&amp;quot;<span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    &amp;quot;name&amp;quot;<span class="token operator">:</span> &amp;quot;yuanzhian&amp;quot;<span class="token punctuation">,</span>
    &amp;quot;email&amp;quot;<span class="token operator">:</span> &amp;quot;yuanzhian@cai-inc.com&amp;quot;
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>邮箱配置如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">mail</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">enable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">appname</span><span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>cnpmjs<span class="token punctuation">.</span>org<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">from</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">EMAIL_HOST</span><span class="token punctuation">,</span>
  <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>smtp<span class="token punctuation">.</span>mxhichina<span class="token punctuation">.</span>com<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">service</span><span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>qiye<span class="token punctuation">.</span>aliyun<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token comment">// 使用了内置传输发送邮件,查看支持列表：https://nodemailer.com/smtp/well-known/</span>
  <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">465</span><span class="token punctuation">,</span> <span class="token comment">// SMTP 端口</span>
  <span class="token literal-property property">secureConnection</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 使用了 SSL</span>
  <span class="token literal-property property">auth</span><span class="token operator">:</span> <span class="token punctuation">{</span>
     <span class="token literal-property property">user</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">EMAIL_HOST</span><span class="token punctuation">,</span>
     <span class="token literal-property property">pass</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">EMAIL_PSD</span><span class="token punctuation">,</span> <span class="token comment">// </span>
   <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="写在文末" tabindex="-1"><a class="header-anchor" href="#写在文末" aria-hidden="true">#</a> 写在文末</h2><p>未来，我们还可以在 <strong>Cnpmjs.org</strong> 上做很多定制化开发，比如接入公司内部权限系统、web 页面重构、对接业务组件在线文档等等。如果你正好也需要搭建 npm 私有库，希望这篇文章对你有所帮助。</p><h2 id="推荐阅读" tabindex="-1"><a class="header-anchor" href="#推荐阅读" aria-hidden="true">#</a> 推荐阅读</h2>`,55),h={href:"https://juejin.im/editor/posts/5eef64de518825658c1ad1f6",target:"_blank",rel:"noopener noreferrer"},_={href:"https://juejin.cn/post/6901210381574733832",target:"_blank",rel:"noopener noreferrer"},j=n("h2",{id:"招贤纳士",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#招贤纳士","aria-hidden":"true"},"#"),s(" 招贤纳士")],-1),w=n("p",null,"政采云前端团队（ZooTeam），一个年轻富有激情和创造力的前端团队，隶属于政采云产品研发部，Base 在风景如画的杭州。团队现有 40 余个前端小伙伴，平均年龄 27 岁，近 3 成是全栈工程师，妥妥的青年风暴团。成员构成既有来自于阿里、网易的“老”兵，也有浙大、中科大、杭电等校的应届新人。团队在日常的业务对接之外，还在物料体系、工程平台、搭建平台、性能体验、云端应用、数据分析及可视化等方向进行技术探索和实战，推动并落地了一系列的内部技术产品，持续探索前端技术体系的新边界。",-1),q=n("p",null,[s("如果你想改变一直被事折腾，希望开始能折腾事；如果你想改变一直被告诫需要多些想法，却无从破局；如果你想改变你有能力去做成那个结果，却不需要你；如果你想改变你想做成的事需要一个团队去支撑，但没你带人的位置；如果你想改变既定的节奏，将会是“5 年工作时间 3 年工作经验”；如果你想改变本来悟性不错，但总是有那一层窗户纸的模糊… 如果你相信相信的力量，相信平凡人能成就非凡事，相信能遇到更好的自己。如果你希望参与到随着业务腾飞的过程，亲手推动一个有着深入的业务理解、完善的技术体系、技术创造价值、影响力外溢的前端团队的成长历程，我觉得我们该聊聊。任何时间，等着你写点什么，发给 "),n("code",null,"ZooTeam@cai-inc.com")],-1),x=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a3110d4d271e41d1b8d0db9172a02592~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1);function D(P,S){const a=l("ExternalLinkIcon");return e(),o("div",null,[r,n("p",null,[s("> 这是第 80 篇不掺水的原创，想获取更多原创好文，请搜索公众号关注我们吧~ 本文首发于政采云前端博客："),n("a",u,[s("npm 私库从搭建到数据迁移最后容灾备份的一些解决方案"),p(a)])]),k,d,m,v,b,g,n("p",null,[s("大名鼎鼎的 cnpm，想必各位早就感受到了它的速度之“快”，没错，它的 register 服务就是"),n("a",f,[s("淘宝镜像"),p(a)]),s("。主要是基于Koa、MySQL 和简单存储服务的企业专用 npm 注册和 web 服务，其中最强大的功能就是它的同步模块机制（定时同步所有源 registry 的模块、只同步已经存在于数据库的模块、只同步 popular 模块）。")]),y,n("p",null,[n("a",h,[s("分分钟教会你搭建企业级的 npm 私有仓库"),p(a)])]),n("p",null,[n("a",_,[s("编写高质量可维护的代码：组件的抽象与粒度"),p(a)])]),j,w,q,x])}const R=t(i,[["render",D],["__file","npm 私库从搭建到数据迁移最后容灾备份的一些解决方案.html.vue"]]);export{R as default};
