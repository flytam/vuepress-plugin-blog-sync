import{_ as e,z as o,A as c,Y as n,C as s,U as t,a6 as p,Q as l}from"./framework-cb9358d9.js";const i={},u=n("p",null,[n("img",{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/7/26/1738ae6bd8113663~tplv-t2oaga2asx-image.image",alt:""})],-1),r={href:"https://zoo.team/article/dark-theme",target:"_blank",rel:"noopener noreferrer"},d=p('<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/65b31d5127ea4749b8331623cbd2a4a0~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h2><p>随着 iOS 13 的发布，深色模式（Dark Mode）越来越多地出现在大众的视野中，支持深色模式已经成为现代移动应用和网站的一个潮流，前段时间更是因为微信的适配再度引起热议。</p><p>深色模式不仅可以大幅减少电量的消耗，减弱强光对比 ，还能提供更好的可视性和沉浸感。</p><p>那针对一款 App 应用（原生 + H5）怎么进行深色模式的适配呢？今天就让我们一起来探究吧！</p><h2 id="系统兼容" tabindex="-1"><a class="header-anchor" href="#系统兼容" aria-hidden="true">#</a> 系统兼容</h2><p>想要实现深色模式的效果，前提条件是要系统支持， 目前 常见系统支持情况如下：</p><p><img src="https://www.zoo.team/images/upload/upload_36baf4329a743d9d181a96f9615111c2.jpg" alt=""></p><h2 id="h5-深色适配" tabindex="-1"><a class="header-anchor" href="#h5-深色适配" aria-hidden="true">#</a> H5 深色适配</h2>',9),k={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/@media/prefers-color-scheme",target:"_blank",rel:"noopener noreferrer"},m={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Using_CSS_custom_properties",target:"_blank",rel:"noopener noreferrer"},v={href:"https://caniuse.com/#search=prefers-color-scheme",target:"_blank",rel:"noopener noreferrer"},h=n("p",null,"可以通过以下两种方式来实现 Web 端的深色适配：",-1),b=n("h3",{id:"一、css-的媒体查询",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#一、css-的媒体查询","aria-hidden":"true"},"#"),s(" 一、CSS 的媒体查询")],-1),g={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/@media/prefers-color-scheme",target:"_blank",rel:"noopener noreferrer"},f=p(`<ul><li>CSS</li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">prefers-color-scheme</span><span class="token punctuation">:</span> light<span class="token punctuation">)</span></span> <span class="token punctuation">{</span> 
  <span class="token selector">.article</span> <span class="token punctuation">{</span>  
    <span class="token property">background</span><span class="token punctuation">:</span>#fff<span class="token punctuation">;</span> 
    <span class="token property">color</span><span class="token punctuation">:</span> #000<span class="token punctuation">;</span>  
  <span class="token punctuation">}</span> 
<span class="token punctuation">}</span> 
<span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">prefers-color-scheme</span><span class="token punctuation">:</span> dark<span class="token punctuation">)</span></span> <span class="token punctuation">{</span> 
  <span class="token selector">.article</span> <span class="token punctuation">{</span>  
    <span class="token property">background</span><span class="token punctuation">:</span>#000<span class="token punctuation">;</span>  
    <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>  
  <span class="token punctuation">}</span> 
<span class="token punctuation">}</span> 
<span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">prefers-color-scheme</span><span class="token punctuation">:</span> no-preference<span class="token punctuation">)</span></span> <span class="token punctuation">{</span> 
  <span class="token selector">.article</span> <span class="token punctuation">{</span>  
    <span class="token property">background</span><span class="token punctuation">:</span>#fff<span class="token punctuation">;</span> 
    <span class="token property">color</span><span class="token punctuation">:</span> #000<span class="token punctuation">;</span>  
  <span class="token punctuation">}</span> 
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>link 标签</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>link href<span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token operator">/</span>common<span class="token punctuation">.</span>css<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span> rel<span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>stylesheet<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span> type<span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>text<span class="token operator">/</span>css<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> 
<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>link href<span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token operator">/</span>light<span class="token operator">-</span>mode<span class="token operator">-</span>theme<span class="token punctuation">.</span>css<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span> rel<span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>stylesheet<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span> type<span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>text<span class="token operator">/</span>css<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> 
<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>link href<span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token operator">/</span>dark<span class="token operator">-</span>mode<span class="token operator">-</span>theme<span class="token punctuation">.</span>css<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span> rel<span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>stylesheet<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span> type<span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>text<span class="token operator">/</span>css<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span> media<span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">(</span>prefers<span class="token operator">-</span>color<span class="token operator">-</span>scheme<span class="token operator">:</span> dark<span class="token punctuation">)</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>来看一下效果，将系统设置为浅色外观：</p><p><img src="https://www.zoo.team/images/upload/upload_fa5eb1da6f0f2062ee35cbc20163936a.png" alt=""></p><p><img src="https://www.zoo.team/images/upload/upload_36426ac10e78790dbee5e8c5262dc27b.png" alt=""></p><p>然后将系统设置为深色外观：</p><p><img src="https://www.zoo.team/images/upload/upload_e589e25fdbd5b70992e17cc5eb647c3e.png" alt=""></p><p>页面已经加载了对应深色主题的样式：</p><p><img src="https://www.zoo.team/images/upload/upload_6a71e25de6cad4998b62cd5499b0cfec.png" alt=""></p><h3 id="二、css-变量-媒体查询" tabindex="-1"><a class="header-anchor" href="#二、css-变量-媒体查询" aria-hidden="true">#</a> 二、CSS 变量 + 媒体查询</h3>`,12),y={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/matchMedia",target:"_blank",rel:"noopener noreferrer"},_={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/matchMedia",target:"_blank",rel:"noopener noreferrer"},S=p(`<p>CSS 变量的作用域与 CSS 的&quot;层叠&quot;规则一致，优先级最高的声明生效。所以当 body 上存在 &quot;dark&quot; 类名时，:root .dark 会生效，否则 :root 生效。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.article</span> <span class="token punctuation">{</span> 
  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--text-color<span class="token punctuation">,</span> #eee<span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--text-background<span class="token punctuation">,</span> #fff<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 
<span class="token selector">:root</span> <span class="token punctuation">{</span> 
  <span class="token property">--text-color</span><span class="token punctuation">:</span> #000<span class="token punctuation">;</span> 
  <span class="token property">--text-background</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 
<span class="token selector">:root .dark</span> <span class="token punctuation">{</span> 
  <span class="token property">--text-color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span> 
  <span class="token property">--text-background</span><span class="token punctuation">:</span> #000<span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 matchMedia 匹配主题媒体，深色模式匹配 <code>(prefers-color-scheme: dark)</code> ，浅色模式匹配 <code>(prefers-color-scheme: light)</code> 。</p><p>监听主题模式，深色模式时为 body 添加类名 dark，根据 CSS 变量的响应式布局特点，自动生效 dark 类名下的 CSS。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> darkMode <span class="token operator">=</span> window<span class="token punctuation">.</span>matchMedia <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> window<span class="token punctuation">.</span><span class="token function">matchMedia</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">(</span>prefers<span class="token operator">-</span>color<span class="token operator">-</span>scheme<span class="token operator">:</span> dark<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">// 判断是否匹配深色模式 </span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>darkMode <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> darkMode<span class="token punctuation">.</span>matches<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>dark<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 
<span class="token comment">// 监听主题切换事件 </span>
darkMode <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> darkMode<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>change<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> e <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span> 
  <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>matches<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>dark<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> 
    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>dark<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  <span class="token punctuation">}</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://www.zoo.team/images/upload/upload_ecf0588c3f0df8641126ff758f9fd097.png" alt=""></p><p><img src="https://www.zoo.team/images/upload/upload_f11bad37a3ede4108ff2dcdffa5e5a80.jpeg" alt=""></p>`,7),w={href:"https://www.npmjs.com/package/postcss-css-variables",target:"_blank",rel:"noopener noreferrer"},C=p(`<p>用法如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 根目录 postcss.config.js </span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span> 
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">{</span> 
    <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>postcss<span class="token operator">-</span>css<span class="token operator">-</span>variables<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">:</span> <span class="token punctuation">{</span> 
      <span class="token literal-property property">preserve</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 保留 var() 定义 </span>
      <span class="token literal-property property">preserveInjectedVariables</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 去除其他模块的重复变量 </span>
      <span class="token literal-property property">variables</span><span class="token operator">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token operator">/</span>page<span class="token punctuation">.</span>json<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// CSS 变量，可以支持多个 </span>
    <span class="token punctuation">}</span> 
  <span class="token punctuation">}</span> 
<span class="token punctuation">}</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://www.zoo.team/images/upload/upload_c2d212f23efb754e9916cd68a71ad350.png" alt=""></p><p><img src="https://zoo-team.oss-cn-hangzhou.aliyuncs.com/9.gif" alt="图片"></p><h3 id="项目实践" tabindex="-1"><a class="header-anchor" href="#项目实践" aria-hidden="true">#</a> 项目实践</h3><p>现在的 Web、App 项目大都引用第三方开源组件库，组件库一般会使用 Sass、Less 等 CSS 预处理器定义颜色变量作为组件的基础色值，并单独抽离为配置文件。所以，项目使用组件库时可以修改基础色值来自定义主题。那么针对项目的深色模式适配方案也一样，主要分为三步：一、组件库深浅色主题适配 ； 二是、项目中深浅色的颜色适配 ； 三、 完成 CSS 变量到页面的注入。</p><h4 id="组件库样式、自定义样式适配" tabindex="-1"><a class="header-anchor" href="#组件库样式、自定义样式适配" aria-hidden="true">#</a> <strong>组件库样式、自定义样式适配</strong></h4><p>如果第三方组件本身支持多主题或者深色模式，可以直接按说明给组件设置对应主题模式；如果第三方组件库不支持的话，只能用覆盖的方式。这里以 Less 为例进行简单实例说明：</p><p>修改前：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>// index.less 
<span class="token atrule"><span class="token rule">@white</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span></span> // 颜色预定义 
<span class="token atrule"><span class="token rule">@background-color</span><span class="token punctuation">:</span> <span class="token atrule"><span class="token rule">@white</span><span class="token punctuation">;</span></span></span> <span class="token selector">// 组件样式 panel.less 
.panel-background-color</span> <span class="token punctuation">{</span> 
  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token atrule"><span class="token rule">@background-color</span><span class="token punctuation">;</span></span> // 组件中使用 less 变量定义颜色样式 
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>新增两个 js 或者 JSON 文件，分别定义深浅模式下的 CSS 变量， 并命名为 light-theme1.js、dark-theme1.js 他们并不会影响组件的样式，只是便于后期注入到全局 style 中。</p><p>修改后：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>// 浅色主题文件 light-theme1.js 
const bgColor = &amp;#39<span class="token punctuation">;</span>#fff&amp;#39<span class="token punctuation">;</span><span class="token punctuation">;</span>// <span class="token selector">颜色预定义 
module.exports =</span> <span class="token punctuation">{</span> 
  &amp;quot<span class="token punctuation">;</span>--background-color&amp;quot<span class="token punctuation">;</span><span class="token punctuation">:</span> bgColor<span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 
// 深色主题文件 dark-theme1.js 
const bgColor = &amp;#39<span class="token punctuation">;</span>#000&amp;#39<span class="token punctuation">;</span><span class="token punctuation">;</span>// <span class="token selector">颜色预定义 
module.exports =</span> <span class="token punctuation">{</span> 
  &amp;quot<span class="token punctuation">;</span>--background-color&amp;quot<span class="token punctuation">;</span><span class="token punctuation">:</span> bgColor<span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">// 组件样式 panel.less 
.panel-background-color</span> <span class="token punctuation">{</span> 
  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--background-color<span class="token punctuation">)</span><span class="token punctuation">;</span> //组件中颜色样式 
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>CSS 变量支持第二参数，当变量不存在或者未注册成功时，可以为其设置默认值，优化如下：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">// 组件样式 panel.less 
.panel-background-color</span> <span class="token punctuation">{</span> 
  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--background-color<span class="token punctuation">,</span> <span class="token atrule"><span class="token rule">@background-color</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span> // 组件中颜色样式，其中 @background-color 代表修改前组件的背景颜色变量，这里设其为默认值，在适配不成功情况下，可以保持适配前的样式。 
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>项目才是真正使用组件的地方，并且项目本身也有很多自定义 CSS 的颜色样式，需要做与组件库类似的处理，结果也会得到两个 js / json 文件，分别命名为 light-theme2.js 、dark-theme2.js。</p><h4 id="css-注入" tabindex="-1"><a class="header-anchor" href="#css-注入" aria-hidden="true">#</a> CSS 注入</h4><p>在页面渲染前，需要把定义深浅样式的 CSS 变量注入到页面。</p><p>以上两步得到了四个文件，合并浅色样式文件 light-theme1.js 和 light-theme2.js 得到 light-theme.js，合并深色样式文件dark-theme1.js 和 dark-theme2.js 得到 dark-theme.js， 最后 把 light-theme.js、 dark-theme.js 两个文件注入到页面中，注入脚本如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> lightTheme from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token operator">/</span>light<span class="token operator">-</span>theme<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span> 
<span class="token keyword">import</span> darkTheme from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token operator">/</span>dark<span class="token operator">-</span>theme<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span> 
<span class="token comment">// 创建一个 style 元素，用于插入 css 定义 </span>
<span class="token keyword">const</span> createStyle <span class="token operator">=</span> <span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span> 
  <span class="token keyword">const</span> style <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>style<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  style<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>text<span class="token operator">/</span>css<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span> 
  style<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> content<span class="token punctuation">;</span>  
  document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>script<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>style<span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token comment">// 在 body 标签中定义 css 变量 </span>
  <span class="token keyword">const</span> createCssStyle <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span> 
  <span class="token keyword">const</span> lightThemeStr <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>lightTheme<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>key <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> key <span class="token operator">+</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token operator">:</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span> <span class="token operator">+</span> lightTheme<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		 
  <span class="token keyword">const</span> darkThemeStr <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>darkTheme<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>key <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> key <span class="token operator">+</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token operator">:</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span> <span class="token operator">+</span> darkTheme<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token keyword">const</span> lightContent <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">body{</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>lightThemeStr<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">}</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span> <span class="token comment">// 浅色模式 CSS 变量定义 </span>
  <span class="token keyword">const</span> darkContent <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">body.dark{</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>darkThemeStr<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">}</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span> <span class="token comment">// 深色模式 CSS 变量定义 </span>
  <span class="token function">createStyle</span><span class="token punctuation">(</span>lightContent<span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token function">createStyle</span><span class="token punctuation">(</span>darkContent<span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token function">isDarkSchemePreference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注入完成后，项目页面中就有了 css 变量定义，包括浅色模式 CSS 变量定义和深色模式 CSS 变量定义，具体哪一个生效，就可以根据上面提到的两种适配方案给 body 添加 class 来控制 。 默认时浅色模式生效，添加 <code>dark</code> 类名时，深色模式会生效。至此就实现了一套完整的深色模式适配方案。</p><h2 id="native-深色适配" tabindex="-1"><a class="header-anchor" href="#native-深色适配" aria-hidden="true">#</a> native 深色适配</h2><h3 id="ios" tabindex="-1"><a class="header-anchor" href="#ios" aria-hidden="true">#</a> iOS</h3><p>在 iOS 系统中， 开发者从颜色和图片两个方面来进行适配，我们不需要关心切换模式后该怎么操作，因为这些都由系统帮我们实现。颜色的适配，需要使用系统提供的 API，在回调用中不同的模式下分别设置颜色，而图片的适配，需要在 XCode 的工具栏中 Appearances 下选择 Any，Dark，在同一名称资源的配置下分别添加图片资源。当切换深色模式时，系统会根据适配的颜色和图片资源进行查找和自动切换对应模式下的颜色和资源文件。</p><h3 id="android" tabindex="-1"><a class="header-anchor" href="#android" aria-hidden="true">#</a> Android</h3><p>安卓在 Android 10（API 级别 29）及更高版本中提供深色主题背景，可以通过以下三种方法启用深色主题背景：</p><ul><li>使用系统设置（Settings -&gt; Display -&gt; Theme）启用深色主题背景</li><li>使用&quot;快捷设置&quot;图块，从通知托盘中切换主题背景（启用后）</li><li>在 Pixel 设备上，选择&quot;省电模式&quot;将同时启用深色主题背景，其他原始设备制造商 (OEM) 不一定支持这种行为</li></ul><h4 id="在应用中支持深色主题背景" tabindex="-1"><a class="header-anchor" href="#在应用中支持深色主题背景" aria-hidden="true">#</a> <strong>在应用中支持深色主题背景</strong></h4><p>如要支持深色主题背景，必须将应用的主题背景（通常可在 <code>res/values/styles.xml</code> 中找到）设置为继承 <code>DayNight</code> 主题背景：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token entity named-entity" title="&lt;">&amp;lt;</span>style name=<span class="token entity named-entity" title="&quot;">&amp;quot;</span>AppTheme<span class="token entity named-entity" title="&quot;">&amp;quot;</span> parent=<span class="token entity named-entity" title="&quot;">&amp;quot;</span>Theme.AppCompat.DayNight<span class="token entity named-entity" title="&quot;">&amp;quot;</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,31),x={href:"https://material.io/develop/android/theming/dark",target:"_blank",rel:"noopener noreferrer"},q=p(`<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token entity named-entity" title="&lt;">&amp;lt;</span>style name=<span class="token entity named-entity" title="&quot;">&amp;quot;</span>AppTheme<span class="token entity named-entity" title="&quot;">&amp;quot;</span> parent=<span class="token entity named-entity" title="&quot;">&amp;quot;</span>Theme.MaterialComponents.DayNight<span class="token entity named-entity" title="&quot;">&amp;quot;</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这会将应用的主要主题背景与系统控制的夜间模式标记相关联，并将应用的默认主题背景设置为深色主题背景（如果已启用）。</p><h4 id="主题背景和样式" tabindex="-1"><a class="header-anchor" href="#主题背景和样式" aria-hidden="true">#</a> <strong>主题背景和样式</strong></h4><p>主题背景和样式应避免使用，旨在于浅色主题背景下使用的硬编码颜色或图标，您应改用主题背景属性（首选）或适合在夜间使用的资源，以下是需要了解的两个最重要的主题背景属性：</p><ul><li><code>?android:attr/textColorPrimary</code> 这是一种通用型文本颜色，它在浅色主题背景下接近于黑色，在深色主题背景下接近于白色，该颜色包含一个停用状态。</li><li><code>?attr/colorControlNormal</code> 一种通用图标颜色，该颜色包含一个停用状态。</li></ul><h3 id="flutter" tabindex="-1"><a class="header-anchor" href="#flutter" aria-hidden="true">#</a> Flutter</h3><p>这里以 Flutter 为例，简单介绍下跨平台开发框架如何适配深色模式。Flutter 定义主题有两种方式：全局主题或使用 Theme 来定义应用程序局部的颜色和字体样式。</p><h4 id="全局主题" tabindex="-1"><a class="header-anchor" href="#全局主题" aria-hidden="true">#</a> <strong>全局主题</strong></h4><p>全局主题就是有应用程序根 MaterialAPP 创建 的 Theme。为了在整个应用程序中共享包含颜色和字体样式的主题，我们可以提供 ThemeData 给 Material 的构造函数。theme 指定的是浅色模式，darkTheme 指定的是深色模式，程序会根据系统设定的暗黑模式自动匹配模式。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">new</span> <span class="token class-name">MaterialApp</span><span class="token punctuation">(</span> 
  title<span class="token punctuation">:</span> title<span class="token punctuation">,</span> 
  theme<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">ThemeData</span><span class="token punctuation">(</span> 
     brightness<span class="token punctuation">:</span> <span class="token class-name">Brightness</span><span class="token punctuation">.</span>light<span class="token punctuation">,</span> 
     primaryColor<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>lightBlue<span class="token punctuation">[</span><span class="token number">800</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 
     accentColor<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>cyan<span class="token punctuation">[</span><span class="token number">600</span><span class="token punctuation">]</span> <span class="token punctuation">,</span> 
  <span class="token punctuation">)</span><span class="token punctuation">,</span> 
  darkTheme<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">ThemeData</span><span class="token punctuation">(</span> 
     brightness<span class="token punctuation">:</span> <span class="token class-name">Brightness</span><span class="token punctuation">.</span>dark<span class="token punctuation">,</span> 
     primaryColor<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>lightGreen<span class="token punctuation">[</span><span class="token number">800</span><span class="token punctuation">]</span> <span class="token punctuation">,</span> 
     accentColor<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>cyan<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 
  <span class="token punctuation">)</span><span class="token punctuation">,</span> 
<span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="局部主题" tabindex="-1"><a class="header-anchor" href="#局部主题" aria-hidden="true">#</a> <strong>局部主题</strong></h4><p>如果我们想在应用程序的一部分中覆盖应用程序的全局的主题，我们可以将要覆盖得部分封装在一个 Theme 的 Widget 中，有 2 种方法可解决：创建特有的 ThemeData 或扩展父主题。</p><p><strong>创建特有的 ThemeData</strong></p><p>如果我们不想继承任何应用程序的颜色或字体样式，我们可以通过 <code>new ThemeData()</code> 创建一个实例并将其传递给 Theme Widget。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// Create a unique theme with &amp;quot;new ThemeData&amp;quot; </span>
<span class="token keyword">new</span> <span class="token class-name">Theme</span><span class="token punctuation">(</span> 
  data<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">ThemeData</span><span class="token punctuation">(</span> 
    accentColor<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>yellow<span class="token punctuation">,</span> 
  <span class="token punctuation">)</span><span class="token punctuation">,</span> 
  child<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">FloatingActionButton</span><span class="token punctuation">(</span> 
    onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> 
    child<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Icon</span><span class="token punctuation">(</span><span class="token class-name">Icons</span><span class="token punctuation">.</span>add<span class="token punctuation">)</span><span class="token punctuation">,</span> 
  <span class="token punctuation">)</span><span class="token punctuation">,</span> 
<span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>扩展父主题</strong></p><p>扩展父主题时无需覆盖所有的主题属性，我们可以通过使用 <code>copyWith</code> 方法来实现。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// Find and Extend the parent theme using &amp;quot;copyWith&amp;quot;. Please see the next section for more info on \`Theme.of\`. </span>
<span class="token keyword">new</span> <span class="token class-name">Theme</span><span class="token punctuation">(</span> 
  data<span class="token punctuation">:</span> <span class="token class-name">Theme</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">copyWith</span><span class="token punctuation">(</span>accentColor<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>yellow<span class="token punctuation">)</span><span class="token punctuation">,</span> 
  child<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">FloatingActionButton</span><span class="token punctuation">(</span> 
    onPressed<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> 
    child<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Icon</span><span class="token punctuation">(</span><span class="token class-name">Icons</span><span class="token punctuation">.</span>add<span class="token punctuation">)</span><span class="token punctuation">,</span> 
  <span class="token punctuation">)</span><span class="token punctuation">,</span> 
<span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用主题" tabindex="-1"><a class="header-anchor" href="#使用主题" aria-hidden="true">#</a> <strong>使用主题</strong></h4><p>我们可以在 Widget 的 <code>build</code> 方法中通过 <code>Theme.of(context)</code> 函数使用自定义的主题。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span> 
  color<span class="token punctuation">:</span> <span class="token class-name">Theme</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>accentColor<span class="token punctuation">,</span> 
  child<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span> 
    <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token class-name">Text</span> <span class="token keyword">with</span> a background color<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> 
    style<span class="token punctuation">:</span> <span class="token class-name">Theme</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>textTheme<span class="token punctuation">.</span>title<span class="token punctuation">,</span> 
  <span class="token punctuation">)</span><span class="token punctuation">,</span> 
<span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>渲染效果 如下 ：</p><p><img src="https://www.zoo.team/images/upload/upload_db679b64c7c67ead51dec849336d32f7.png" alt=""><img src="https://www.zoo.team/images/upload/upload_1add5dae6f9e7aef94bb18e57ad33ca0.png" alt=""></p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>以上分别介绍了在 App 应用中对 H5 页面和客户端的深色模式适配方案，当然其中 H5 的方案页同样适应于 PC 端。使用前一定要确保你的系统和浏览器是兼容深色模式的，不然就没有效果了呢。本篇只简单介绍了几种方案，欢迎有更好想法的小伙伴一起讨论~</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,26),j={href:"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme",target:"_blank",rel:"noopener noreferrer"},T={href:"https://juejin.cn/post/6844904167761248263",target:"_blank",rel:"noopener noreferrer"},z={href:"https://developer.android.com/guide/topics/ui/look-and-feel/darktheme",target:"_blank",rel:"noopener noreferrer"},M={href:"https://flutterchina.club/cookbook/design/themes/",target:"_blank",rel:"noopener noreferrer"},A=n("h2",{id:"推荐阅读",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#推荐阅读","aria-hidden":"true"},"#"),s(" 推荐阅读")],-1),W={href:"https://juejin.cn/post/6844904046352924680",target:"_blank",rel:"noopener noreferrer"},N={href:"https://juejin.cn/post/6844903988081475591",target:"_blank",rel:"noopener noreferrer"},D=n("h2",{id:"招贤纳士",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#招贤纳士","aria-hidden":"true"},"#"),s(" 招贤纳士")],-1),I=n("p",null,"政采云前端团队（ZooTeam），一个年轻富有激情和创造力的前端团队，隶属于政采云产品研发部，Base 在风景如画的杭州。团队现有 50 余个前端小伙伴，平均年龄 27 岁，近 3 成是全栈工程师，妥妥的青年风暴团。成员构成既有来自于阿里、网易的“老”兵，也有浙大、中科大、杭电等校的应届新人。团队在日常的业务对接之外，还在物料体系、工程平台、搭建平台、性能体验、云端应用、数据分析及可视化等方向进行技术探索和实战，推动并落地了一系列的内部技术产品，持续探索前端技术体系的新边界。",-1),P=n("p",null,[s("如果你想改变一直被事折腾，希望开始能折腾事；如果你想改变一直被告诫需要多些想法，却无从破局；如果你想改变你有能力去做成那个结果，却不需要你；如果你想改变你想做成的事需要一个团队去支撑，但没你带人的位置；如果你想改变既定的节奏，将会是“5 年工作时间 3 年工作经验”；如果你想改变本来悟性不错，但总是有那一层窗户纸的模糊… 如果你相信相信的力量，相信平凡人能成就非凡事，相信能遇到更好的自己。如果你希望参与到随着业务腾飞的过程，亲手推动一个有着深入的业务理解、完善的技术体系、技术创造价值、影响力外溢的前端团队的成长历程，我觉得我们该聊聊。任何时间，等着你写点什么，发给 "),n("code",null,"ZooTeam@cai-inc.com")],-1),B=n("p",null,[n("img",{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/7/26/1738ae797b21cb74~tplv-t2oaga2asx-image.image",alt:""})],-1);function E(L,O){const a=l("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("> 这是第 65 篇不掺水的原创，想获取更多原创好文，请搜索 👆 上方公众号关注我们吧~ > > 本文首发于政采云前端博客："),n("a",r,[s("深色模式适配指南"),t(a)])]),d,n("p",null,[s("随着深色模式的流行，越来越多的操作系统、浏览器开始支持深色模式，现在可以利用 CSS 的媒体查询方法（"),n("a",k,[s("prefers-color-scheme"),t(a)]),s("）以及 "),n("a",m,[s("CSS 变量"),t(a)]),s("（CSS variables、CSS custom properties）就可以实现页面主题跟随系统自动切换深浅模式 。CSS 变量除了 IE ，其余各大浏览器都支持的比较好， 但 prefers-color-scheme 方法还处于 W3C 草案规范，需要对不兼容浏览器做向下兼容，具体浏览器兼容性可以查询 "),n("a",v,[s("Can I Use"),t(a)]),s("， 综合来说，高版本的主流浏览器都已经支持，IE 不支持。")]),h,b,n("p",null,[n("a",g,[s("prefers-color-scheme"),t(a)]),s(" 是一种用于检测用户是否有将系统的主题色设置为亮色或者暗色的 CSS 媒体特性。利用其设置不同主题模式下的 CSS 样式，浏览器会自动根据当前系统主题加载对应的 CSS 样式。light 适配浅色主题，dark 适配深色主题，no-preference 表示获取不到主题时的适配方案。")]),f,n("p",null,[n("a",y,[s("window.matchMedia"),t(a)]),s(" 方法可以用来查询指定的媒体查询字符串解析后的结果。 结合 CSS 变量和 "),n("a",_,[s("matchMedia"),t(a)]),s(" 的查询结果，设置对应的 CSS 主题颜色。该方法更灵活，可以单独抽离主题色进行适配。")]),S,n("p",null,[s("那么，针对不支持 CSS 变量的 IE 浏览器怎么办呢？不做兼容性处理的话那页面可能就是一团糟了。所以我们需要针对不兼容的浏览器做一些兜底处理，这里我们可以在 webpack 等构建工具中借助 post-css 的 "),n("a",w,[s("postcss-css-variables"),t(a)]),s(" 插件来自动解析 CSS 变量对应的色值，并在原始 CSS 定义之上添加一条新的 CSS 样式 ， 做到对不支持 CSS 变量浏览器的兼容 。")]),C,n("p",null,[s("还可以使用 "),n("a",x,[s("MaterialComponent"),t(a)]),s(" 的深色主题背景：")]),q,n("ul",null,[n("li",null,[n("a",j,[s("https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme"),t(a)])]),n("li",null,[n("a",T,[s("https://juejin.cn/post/6844904167761248263"),t(a)])]),n("li",null,[n("a",z,[s("https://developer.android.com/guide/topics/ui/look-and-feel/darktheme"),t(a)])]),n("li",null,[n("a",M,[s("https://flutterchina.club/cookbook/design/themes"),t(a)])])]),A,n("p",null,[n("a",W,[s("你可能不是那么了解的 CSS Background"),t(a)])]),n("p",null,[n("a",N,[s("可能是最全的 “文本溢出截断省略” 方案合集"),t(a)])]),D,I,P,B])}const H=e(i,[["render",E],["__file","深色模式适配指南.html.vue"]]);export{H as default};
