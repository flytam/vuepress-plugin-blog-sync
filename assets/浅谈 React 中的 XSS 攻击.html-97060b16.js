import{_ as e,z as o,A as c,Y as n,C as a,U as p,a6 as t,Q as l}from"./framework-cb9358d9.js";const r={},i=n("p",null,[n("img",{src:"//p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/49bd3f09786f43b5888b3562d4a129c0~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1),u={href:"https://zoo.team/article/xss-in-react",target:"_blank",rel:"noopener noreferrer"},k=t(`<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8692d3bcbc0d465493743b37621d8785~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>前端一般会面临 XSS 这样的安全风险，但随着 React 等现代前端框架的流行，使我们在平时开发时不用太关注安全问题。以 React 为例，React 从设计层面上就具备了很好的防御 XSS 的能力。本文将以源码角度，看看 React 做了哪些事情来实现这种安全性的。</p><h2 id="xss-攻击是什么" tabindex="-1"><a class="header-anchor" href="#xss-攻击是什么" aria-hidden="true">#</a> XSS 攻击是什么</h2><p>Cross-Site Scripting（跨站脚本攻击）简称 XSS，是一种代码注入攻击。XSS 攻击通常指的是利用网页的漏洞，攻击者通过巧妙的方法注入 XSS 代码到网页，因为浏览器无法分辨哪些脚本是可信的，导致 XSS 脚本被执行。XSS 脚本通常能够窃取用户数据并发送到攻击者的网站，或者冒充用户，调用目标网站接口并执行攻击者指定的操作。</p><h2 id="xss-攻击类型" tabindex="-1"><a class="header-anchor" href="#xss-攻击类型" aria-hidden="true">#</a> XSS 攻击类型</h2><h3 id="反射型-xss" tabindex="-1"><a class="header-anchor" href="#反射型-xss" aria-hidden="true">#</a> 反射型 XSS</h3><ul><li>XSS 脚本来自当前 HTTP 请求</li><li>当服务器在 HTTP 请求中接收数据并将该数据拼接在 HTML 中返回时，例子：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>   <span class="token comment">// 某网站具有搜索功能，该功能通过 URL 参数接收用户提供的搜索词：</span>
   <span class="token literal-property property">https</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>xxx<span class="token punctuation">.</span>com<span class="token operator">/</span>search<span class="token operator">?</span>query<span class="token operator">=</span><span class="token number">123</span>
   <span class="token comment">// 服务器在对此 URL 的响应中回显提供的搜索词：</span>
   <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>p<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>您搜索的是<span class="token operator">:</span> <span class="token number">123</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>p<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
   <span class="token comment">// 如果服务器不对数据进行转义等处理，则攻击者可以构造如下链接进行攻击：</span>
   <span class="token literal-property property">https</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>xxx<span class="token punctuation">.</span>com<span class="token operator">/</span>search<span class="token operator">?</span>query<span class="token operator">=</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>img src<span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>empty<span class="token punctuation">.</span>png<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span> onerror <span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>xss<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
   <span class="token comment">// 该 URL 将导致以下响应，并运行 alert(&amp;#39;xss&amp;#39;)：</span>
   <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>p<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>您搜索的是<span class="token operator">:</span> <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>img src<span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>empty<span class="token punctuation">.</span>png<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span> onerror <span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>xss<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>p<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
   <span class="token comment">// 如果有用户请求攻击者的 URL ，则攻击者提供的脚本将在用户的浏览器中执行。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="存储型-xss" tabindex="-1"><a class="header-anchor" href="#存储型-xss" aria-hidden="true">#</a> 存储型 XSS</h3><ul><li>XSS 脚本来自服务器数据库中</li><li>攻击者将恶意代码提交到目标网站的数据库中，普通用户访问网站时服务器将恶意代码返回，浏览器默认执行，例子：</li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>   // 某个评论页，能查看用户评论。
   // 攻击者将恶意代码当做评论提交，服务器没对数据进行转义等处理
   // 评论输入：
   <span class="token entity named-entity" title="&lt;">&amp;lt;</span>textarea<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
      <span class="token entity named-entity" title="&lt;">&amp;lt;</span>img src=<span class="token entity named-entity" title="&quot;">&amp;quot;</span>empty.png<span class="token entity named-entity" title="&quot;">&amp;quot;</span> onerror =<span class="token entity named-entity" title="&quot;">&amp;quot;</span>alert(<span class="token entity" title="&#39;">&amp;#39;</span>xss<span class="token entity" title="&#39;">&amp;#39;</span>)<span class="token entity named-entity" title="&quot;">&amp;quot;</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span>
   <span class="token entity named-entity" title="&lt;">&amp;lt;</span>/textarea<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
   // 则攻击者提供的脚本将在所有访问该评论页的用户浏览器执行
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dom-型-xss" tabindex="-1"><a class="header-anchor" href="#dom-型-xss" aria-hidden="true">#</a> DOM 型 XSS</h3><p>该漏洞存在于客户端代码，与服务器无关</p><ul><li>类似反射型，区别在于 DOM 型 XSS 并不会和后台进行交互，前端直接将 URL 中的数据不做处理并动态插入到 HTML 中，是纯粹的前端安全问题，要做防御也只能在客户端上进行防御。</li></ul><h2 id="react-如何防止-xss-攻击" tabindex="-1"><a class="header-anchor" href="#react-如何防止-xss-攻击" aria-hidden="true">#</a> React 如何防止 XSS 攻击</h2><p>无论使用哪种攻击方式，其本质就是将恶意代码注入到应用中，浏览器去默认执行。React 官方中提到了 React DOM 在渲染所有输入内容之前，默认会进行转义。它可以确保在你的应用中，永远不会注入那些并非自己明确编写的内容。所有的内容在渲染之前都被转换成了字符串，因此恶意代码无法成功注入，从而有效地防止了 XSS 攻击。我们具体看下：</p><h3 id="自动转义" tabindex="-1"><a class="header-anchor" href="#自动转义" aria-hidden="true">#</a> 自动转义</h3><p>React 在渲染 HTML 内容和渲染 DOM 属性时都会将 <code>&amp;quot;&amp;#39;&amp;amp;&amp;lt;&amp;gt;</code> 这几个字符进行转义，转义部分源码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>index <span class="token operator">=</span> match<span class="token punctuation">.</span>index<span class="token punctuation">;</span> index <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> <span class="token number">34</span><span class="token operator">:</span> <span class="token comment">// &amp;quot;</span>
        escape <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span>quot<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token number">38</span><span class="token operator">:</span> <span class="token comment">// &amp;amp;</span>
        escape <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token number">39</span><span class="token operator">:</span> <span class="token comment">// &amp;#39;</span>
        escape <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span>#x27<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token number">60</span><span class="token operator">:</span> <span class="token comment">// &amp;lt;</span>
        escape <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span>lt<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token number">62</span><span class="token operator">:</span> <span class="token comment">// &amp;gt;</span>
        escape <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span>gt<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码是 React 在渲染到浏览器前进行的转义，可以看到对浏览器有特殊含义的字符都被转义了，恶意代码在渲染到 HTML 前都被转成了字符串，如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 一段恶意代码</span>
<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>img src<span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>empty<span class="token punctuation">.</span>png<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span> onerror <span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>xss<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> 
<span class="token comment">// 转义后输出到 html 中</span>
<span class="token operator">&amp;</span>amp<span class="token punctuation">;</span>lt<span class="token punctuation">;</span>img src<span class="token operator">=</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span>quot<span class="token punctuation">;</span>empty<span class="token punctuation">.</span>png<span class="token operator">&amp;</span>amp<span class="token punctuation">;</span>quot<span class="token punctuation">;</span> onerror <span class="token operator">=</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span>quot<span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span>#x27<span class="token punctuation">;</span>xss<span class="token operator">&amp;</span>amp<span class="token punctuation">;</span>#x27<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span>quot<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span>gt<span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就有效的防止了 XSS 攻击。</p><h3 id="jsx-语法" tabindex="-1"><a class="header-anchor" href="#jsx-语法" aria-hidden="true">#</a> JSX 语法</h3><p>JSX 实际上是一种语法糖，Babel 会把 JSX 编译成 <code>React.createElement()</code> 的函数调用，最终返回一个 <code>ReactElement</code>，以下为这几个步骤对应的代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// JSX</span>
<span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token punctuation">(</span>
  <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>h1 className<span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>greeting<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
      Hello<span class="token punctuation">,</span> world<span class="token operator">!</span>
  <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>h1<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 通过 babel 编译后的代码</span>
<span class="token keyword">const</span> element <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>
  <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>h1<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span><span class="token literal-property property">className</span><span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>greeting<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>Hello<span class="token punctuation">,</span> world<span class="token operator">!</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// React.createElement() 方法返回的 ReactElement</span>
<span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token punctuation">{</span>
  $$<span class="token keyword">typeof</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>react<span class="token punctuation">.</span>element<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>h1<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>Hello<span class="token punctuation">,</span> world<span class="token operator">!</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">className</span><span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>greeting<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>   
  <span class="token punctuation">}</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到，最终渲染的内容是在 Children 属性中，那了解了 JSX 的原理后，我们来试试能否通过构造特殊的 Children 进行 XSS 注入，来看下面一段代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> storedData <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">{
    &amp;quot;ref&amp;quot;:null,
    &amp;quot;type&amp;quot;:&amp;quot;body&amp;quot;,
    &amp;quot;props&amp;quot;:{
        &amp;quot;dangerouslySetInnerHTML&amp;quot;:{
            &amp;quot;__html&amp;quot;:&amp;quot;&amp;lt;img src=\\&amp;quot;empty.png\\&amp;quot; onerror =\\&amp;quot;alert(&amp;#39;xss&amp;#39;)\\&amp;quot;/&amp;gt;&amp;quot;
        }
    }
}</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token comment">// 转成 JSON</span>
<span class="token keyword">const</span> parsedData <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>storedData<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 将数据渲染到页面</span>
<span class="token function">render</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>span<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>parsedData<span class="token punctuation">}</span> <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>span<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码中， 运行后会报以下错误，提示不是有效的 ReactChild。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">Uncaught</span> <span class="token punctuation">(</span><span class="token keyword">in</span> promise<span class="token punctuation">)</span> Error<span class="token operator">:</span> Objects are not valid <span class="token keyword">as</span> a React <span class="token function">child</span> <span class="token punctuation">(</span>found<span class="token operator">:</span> object <span class="token keyword">with</span> keys <span class="token punctuation">{</span>ref<span class="token punctuation">,</span> type<span class="token punctuation">,</span> props<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span> If you meant to render a collection <span class="token keyword">of</span> children<span class="token punctuation">,</span> use an array instead<span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>那究竟是哪里出问题了？我们看一下 ReactElement 的源码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> symbolFor <span class="token operator">=</span> Symbol<span class="token punctuation">.</span>for<span class="token punctuation">;</span>
<span class="token constant">REACT_ELEMENT_TYPE</span> <span class="token operator">=</span> <span class="token function">symbolFor</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>react<span class="token punctuation">.</span>element<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">ReactElement</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> key<span class="token punctuation">,</span> ref<span class="token punctuation">,</span> self<span class="token punctuation">,</span> source<span class="token punctuation">,</span> owner<span class="token punctuation">,</span> props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">// 这个 tag 唯一标识了此为 ReactElement</span>
    $$<span class="token keyword">typeof</span><span class="token operator">:</span> <span class="token constant">REACT_ELEMENT_TYPE</span><span class="token punctuation">,</span>
    <span class="token comment">// 元素的内置属性</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> type<span class="token punctuation">,</span>
    <span class="token literal-property property">key</span><span class="token operator">:</span> key<span class="token punctuation">,</span>
    <span class="token literal-property property">ref</span><span class="token operator">:</span> ref<span class="token punctuation">,</span>
    <span class="token literal-property property">props</span><span class="token operator">:</span> props<span class="token punctuation">,</span>
    <span class="token comment">// 记录创建此元素的组件</span>
    <span class="token literal-property property">_owner</span><span class="token operator">:</span> owner<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token operator">...</span>
  <span class="token keyword">return</span> element<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意到其中有个属性是 <code>$$typeof</code>，它是用来标记此对象是一个 <code>ReactElement</code>，React 在进行渲染前会通过此属性进行校验，校验不通过将会抛出上面的错误。React 利用这个属性来防止通过构造特殊的 Children 来进行的 XSS 攻击，原因是 <code>$$typeof</code> 是个 Symbol 类型，进行 JSON 转换后会 Symbol 值会丢失，无法在前后端进行传输。如果用户提交了特殊的 Children，也无法进行渲染，利用此特性，可以防止存储型的 XSS 攻击。</p><h2 id="在-react-中可引起漏洞的一些写法" tabindex="-1"><a class="header-anchor" href="#在-react-中可引起漏洞的一些写法" aria-hidden="true">#</a> 在 React 中可引起漏洞的一些写法</h2><h3 id="使用-dangerouslysetinnerhtml" tabindex="-1"><a class="header-anchor" href="#使用-dangerouslysetinnerhtml" aria-hidden="true">#</a> 使用 dangerouslySetInnerHTML</h3><p><code>dangerouslySetInnerHTML</code> 是 React 为浏览器 DOM 提供 <code>innerHTML</code> 的替换方案。通常来讲，使用代码直接设置 HTML 存在风险，因为很容易使用户暴露在 XSS 攻击下，因为当使用 <code>dangerouslySetInnerHTML</code> 时，React 将不会对输入进行任何处理并直接渲染到 HTML 中，如果攻击者在 dangerouslySetInnerHTML 传入了恶意代码，那么浏览器将会运行恶意代码。看下源码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getNonChildrenInnerMarkup</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> innerHTML <span class="token operator">=</span> props<span class="token punctuation">.</span>dangerouslySetInnerHTML<span class="token punctuation">;</span> <span class="token comment">// 有dangerouslySetInnerHTML属性，会不经转义就渲染__html的内容</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>innerHTML <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>innerHTML<span class="token punctuation">.</span>__html <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> innerHTML<span class="token punctuation">.</span>__html<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> content <span class="token operator">=</span> props<span class="token punctuation">.</span>children<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> content <span class="token operator">===</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>string<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> content <span class="token operator">===</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>number<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">escapeTextForBrowser</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,37),d=n("code",null,"dangerouslySetInnerHTML",-1),m={href:"https://jsxss.com/zh/index.html",target:"_blank",rel:"noopener noreferrer"},v=t(`<h3 id="通过用户提供的对象来创建-react-组件" tabindex="-1"><a class="header-anchor" href="#通过用户提供的对象来创建-react-组件" aria-hidden="true">#</a> 通过用户提供的对象来创建 React 组件</h3><p>举个例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 用户的输入</span>
<span class="token keyword">const</span> userProvidePropsString <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">{&amp;quot;dangerouslySetInnerHTML&amp;quot;:{&amp;quot;__html&amp;quot;:&amp;quot;&amp;lt;img onerror=&amp;#39;alert(\\&amp;quot;xss\\&amp;quot;);&amp;#39; src=&amp;#39;empty.png&amp;#39; /&amp;gt;&amp;quot;}}&amp;quot;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token comment">// 经过 JSON 转换</span>
<span class="token keyword">const</span> userProvideProps <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>userProvidePropsString<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// userProvideProps = {</span>
<span class="token comment">//   dangerouslySetInnerHTML: {</span>
<span class="token comment">//     &amp;quot;__html&amp;quot;: \`&amp;lt;img onerror=&amp;#39;alert(&amp;quot;xss&amp;quot;);&amp;#39; src=&amp;#39;empty.png&amp;#39; /&amp;gt;\`</span>
<span class="token comment">//      }</span>
<span class="token comment">// };</span>
<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token comment">// 出于某种原因解析用户提供的 JSON 并将对象作为 props 传递</span>
    <span class="token keyword">return</span> <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>div <span class="token punctuation">{</span><span class="token operator">...</span>userProvideProps<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码将用户提供的数据进行 JSON 转换后直接当做 <code>div</code> 的属性，当用户构造了类似例子中的特殊字符串时，页面就会被注入恶意代码，所以要注意平时在开发中不要直接使用用户的输入作为属性。</p><h3 id="使用用户输入的值来渲染-a-标签的-href-属性-或类似-img-标签的-src-属性等" tabindex="-1"><a class="header-anchor" href="#使用用户输入的值来渲染-a-标签的-href-属性-或类似-img-标签的-src-属性等" aria-hidden="true">#</a> 使用用户输入的值来渲染 a 标签的 href 属性，或类似 img 标签的 src 属性等</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> userWebsite <span class="token operator">=</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>javascript<span class="token operator">:</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>xss<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>a href<span class="token operator">=</span><span class="token punctuation">{</span>userWebsite<span class="token punctuation">}</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>a<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果没有对该 URL 进行过滤以防止通过 <code>javascript:</code> 或 <code>data:</code> 来执行 JavaScript，则攻击者可以构造 XSS 攻击，此处会有潜在的安全问题。 用户提供的 URL 需要在前端或者服务端在入库之前进行验证并过滤。</p><h2 id="服务端如何防止-xss-攻击" tabindex="-1"><a class="header-anchor" href="#服务端如何防止-xss-攻击" aria-hidden="true">#</a> 服务端如何防止 XSS 攻击</h2><p>服务端作为最后一道防线，也需要做一些措施以防止 XSS 攻击，一般涉及以下几方面：</p>`,9),b=n("li",null,"在接收到用户输入时，需要对输入进行尽可能严格的过滤，过滤或移除特殊的 HTML 标签、JS 事件的关键字等。",-1),h=n("li",null,"在输出时对数据进行转义，根据输出语境 (html/javascript/css/url)，进行对应的转义",-1),y=n("li",null,"对关键 Cookie 设置 http-only 属性，JS 脚本就不能访问到 http-only 的 Cookie 了",-1),g={href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP",target:"_blank",rel:"noopener noreferrer"},S=n("h2",{id:"总结",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#总结","aria-hidden":"true"},"#"),a(" 总结")],-1),f=n("p",null,"出现 XSS 漏洞本质上是输入输出验证不充分，React 在设计上已经很安全了，但是一些反模式的写法还是会引起安全漏洞。Vue 也是类似，Vue 做的安全措施主要也是转义，HTML 的内容和动态绑定的属性都会进行转义。无论使用 React 或 Vue 等前端框架，都不能百分百的防止 XSS 攻击，所以服务端必须对前端参数做一些验证，包括但不限于特殊字符转义、标签、属性白名单过滤等。一旦出现安全问题一般都是挺严重的，不管是敏感数据被窃取或者用户资金被盗，损失往往无法挽回。我们平时开发中需要保持安全意识，保持代码的可靠性和安全性。",-1),_=n("h2",{id:"小游戏",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#小游戏","aria-hidden":"true"},"#"),a(" 小游戏")],-1),x={href:"https://xss-game.appspot.com/",target:"_blank",rel:"noopener noreferrer"},q={href:"https://juejin.cn/post/6872136699405664263",target:"_blank",rel:"noopener noreferrer"},w={href:"https://juejin.cn/post/6844904182822993927",target:"_blank",rel:"noopener noreferrer"},j=n("h2",{id:"招贤纳士",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#招贤纳士","aria-hidden":"true"},"#"),a(" 招贤纳士")],-1),T=n("p",null,"政采云前端团队（ZooTeam），一个年轻富有激情和创造力的前端团队，隶属于政采云产品研发部，Base 在风景如画的杭州。团队现有 50 余个前端小伙伴，平均年龄 27 岁，近 3 成是全栈工程师，妥妥的青年风暴团。成员构成既有来自于阿里、网易的“老”兵，也有浙大、中科大、杭电等校的应届新人。团队在日常的业务对接之外，还在物料体系、工程平台、搭建平台、性能体验、云端应用、数据分析及可视化等方向进行技术探索和实战，推动并落地了一系列的内部技术产品，持续探索前端技术体系的新边界。",-1),R=n("p",null,[a("如果你想改变一直被事折腾，希望开始能折腾事；如果你想改变一直被告诫需要多些想法，却无从破局；如果你想改变你有能力去做成那个结果，却不需要你；如果你想改变你想做成的事需要一个团队去支撑，但没你带人的位置；如果你想改变既定的节奏，将会是“5 年工作时间 3 年工作经验”；如果你想改变本来悟性不错，但总是有那一层窗户纸的模糊… 如果你相信相信的力量，相信平凡人能成就非凡事，相信能遇到更好的自己。如果你希望参与到随着业务腾飞的过程，亲手推动一个有着深入的业务理解、完善的技术体系、技术创造价值、影响力外溢的前端团队的成长历程，我觉得我们该聊聊。任何时间，等着你写点什么，发给 "),n("code",null,"ZooTeam@cai-inc.com")],-1),X=n("p",null,[n("img",{src:"//p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/181c8679020f48439d5a37b6a89f8476~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1);function L(M,H){const s=l("ExternalLinkIcon");return o(),c("div",null,[i,n("p",null,[a("> 这是第 70 篇不掺水的原创，想获取更多原创好文，请搜索公众号关注我们吧~ 本文首发于政采云前端博客："),n("a",u,[a("浅谈 React 中的 XSS 攻击"),p(s)])]),k,n("p",null,[a("所以平时开发时最好避免使用 "),d,a("，如果不得不使用的话，前端或服务端必须对输入进行相关验证，例如对特殊输入进行过滤、转义等处理。前端这边处理的话，推荐使用"),n("a",m,[a("白名单过滤"),p(s)]),a("，通过白名单控制允许的 HTML 标签及各标签的属性。")]),v,n("ul",null,[b,h,y,n("li",null,[a("利用 "),n("a",g,[a("CSP"),p(s)]),a(" 来抵御或者削弱 XSS 攻击，一个 CSP 兼容的浏览器将会仅执行从白名单域获取到的脚本文件，忽略所有的其他脚本 (包括内联脚本和 HTML 的事件处理属性)")])]),S,f,_,n("p",null,[a("看完文章可以尝试下 XSS 的"),n("a",x,[a("小游戏"),p(s)]),a("，自己动手实践模拟 XSS 攻击，可以对 XSS 有更进一步的认识。")]),n("p",null,[n("a",q,[a("我的前端职业进阶之路!"),p(s)])]),n("p",null,[n("a",w,[a("一份值得收藏的 Git 异常处理清单"),p(s)])]),j,T,R,X])}const C=e(r,[["render",L],["__file","浅谈 React 中的 XSS 攻击.html.vue"]]);export{C as default};
