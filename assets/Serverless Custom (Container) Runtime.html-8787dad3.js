import{_ as p,z as o,A as i,Y as n,C as s,U as e,a6 as t,Q as l}from"./framework-cb9358d9.js";const c={},r={href:"https://juejin.cn/post/6978685539985653767",target:"_blank",rel:"noopener noreferrer"},u=n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d4eb6a01e6564840817b127265b07edd~tplv-k3u1fbpfcp-zoom-1.image",alt:""},null,-1),d={href:"https://zoo.team/article/serverlesscustom",target:"_blank",rel:"noopener noreferrer"},m=n("p",null,[n("img",{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d6a3993b411047628f072a647483f755~tplv-k3u1fbpfcp-watermark.image",alt:"雪霁.png"})],-1),k=n("h3",{id:"背景",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#背景","aria-hidden":"true"},"#"),s(" 背景")],-1),v=n("strong",null,"Serverless = FaaS + BaaS",-1),b=n("strong",null,"函数",-1),h=n("strong",null,"FaaS",-1),g={href:"https://juejin.cn/post/6892728697082609672",target:"_blank",rel:"noopener noreferrer"},f=t('<p>对于云厂商的 FaaS 平台，虽然他们支持多种编程语言及版本的标准运行环境，但毕竟还是<strong>有限</strong>的。所以，为了满足用户更多个性化开发语言及版本的函数实现需求，他们提供了 <strong>Custom Runtime 服务</strong>，即<strong>可定制化运行环境</strong>，支持用户用任何编程语言编写的函数。</p><p>以阿里云函数计算 FC 为例，这是它所支持的开发语言列表：</p><table><thead><tr><th>支持语言</th><th>运行环境</th></tr></thead><tbody><tr><td>Node.js</td><td>Node.js 6.10（runtime=nodejs6）、&lt;br /&gt;Node.js 8.9.0（runtime=nodejs8）、&lt;br /&gt;Node.js 10.15.3（runtime=nodejs10）&lt;br /&gt;Node.js 12.16.1（runtime=nodejs12）</td></tr><tr><td>Python</td><td>Python 2.7（runtime = python2.7）&lt;br /&gt;Python 3.6（runtime = python3）</td></tr><tr><td>PHP</td><td>PHP 7.2.7（Runtime=php7.2）</td></tr><tr><td>Java</td><td>Java OpenJDK 1.8.0（runtime=java8）</td></tr><tr><td>C#</td><td>.NET Core 2.1（runtime=dotnetcore 2.1）</td></tr><tr><td>Go</td><td>Go Custom Runtime</td></tr><tr><td>Ruby</td><td>Ruby Custom Runtime</td></tr><tr><td>PowerShell</td><td>PowerShell Custom Runtime</td></tr><tr><td>TypeScript</td><td>TypeScript Custom Runtime</td></tr><tr><td>F#</td><td>F# Custom Runtime</td></tr><tr><td>C++</td><td>C++ Custom Runtime</td></tr><tr><td>Lua</td><td>Lua Custom Runtime</td></tr><tr><td>Dart</td><td>Dart Custom Runtime</td></tr><tr><td>其他语言</td><td>Custom Runtime</td></tr></tbody></table><p>可以看出，对于我们前端工程师，如果想使用阿里云 FC 平台，并不能随心所欲的使用 Node.js 和 TypeScript 。因为 Node.js，只支持表格中的四种版本，而 TypeScript ，FC 平台自身完全不支持。所以要想使用 Node.js 的其它版本和 TypeScript，就需要自定义运行时。</p><p>那么什么是 Custom Runtime 呢？</p><h3 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h3><p>运行时（ Runtime ）指函数代码在运行时所依赖的环境，&lt;u&gt;包括任何库、代码包、框架或平台&lt;/u&gt;。Custom Runtime 就是完全由<strong>用户自定义函数的运行环</strong>境。</p><p>FaaS 平台通过开放实现自定义函数运行时，支持根据需求使用<strong>任意开发语言的任意版本</strong>来编写函数。</p><h3 id="作用" tabindex="-1"><a class="header-anchor" href="#作用" aria-hidden="true">#</a> 作用</h3><p>阿里云官方文档中说到，基于 Custom Runtime 我们可以实现这两件事：</p><ul><li>定制个性化语言（例如 Go、Lua、Ruby ）和各种语言的小版本（例如 Python 3.7、Node.js 14）的执行环境，打造属于您的运行环境。</li><li><strong>一键迁移</strong>现有的 Web 应用或基于传统开发的 Web 项目到函数计算平台，不用做任何改造。</li></ul><h2 id="实现-custom-runtime" tabindex="-1"><a class="header-anchor" href="#实现-custom-runtime" aria-hidden="true">#</a> 实现 Custom Runtime</h2><p>本文将以阿里云 FC 为例，实现一个 Custom Runtime。其它平台比如腾讯云 SCF 等，原理和过程也都大致相同。</p><h3 id="工作原理" tabindex="-1"><a class="header-anchor" href="#工作原理" aria-hidden="true">#</a> 工作原理</h3><p>Custom Runtime 本质上是一个 <strong>HTTP Server</strong>，代码里面包含一个名为 <strong>bootstrap 的启动文件</strong>，之后<strong>这个 HTTP Server 接管了函数计算平台的所有请求</strong>，包括事件调用或者 HTTP 函数调用等。</p><p>如今 <code>Typescript</code> 在 Node 中的应用已经越来越广泛，所以笔者将实现一个可以运行 TS 代码的 TypeScript 运行时。</p><h3 id="操作步骤" tabindex="-1"><a class="header-anchor" href="#操作步骤" aria-hidden="true">#</a> 操作步骤</h3><h4 id="准备工作" tabindex="-1"><a class="header-anchor" href="#准备工作" aria-hidden="true">#</a> 准备工作</h4>',18),y={href:"https://help.aliyun.com/document_detail/64204.html",target:"_blank",rel:"noopener noreferrer"},_=n("strong",null,"开发、构建、部署",-1),T=t(`<p>安装配置过程如下：</p><p>（1）安装：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>// 安装命令
$ <span class="token function">npm</span> <span class="token function">install</span> @alicloud/fun <span class="token parameter variable">-g</span>

// 执行 fun <span class="token parameter variable">--version</span> 检查安装是否成功
$ fun <span class="token parameter variable">--version</span>

<span class="token number">3.6</span>.21
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),C=n("code",null,"fun config",-1),S={href:"https://help.aliyun.com/document_detail/146702.html#section-h9e-864-bom",target:"_blank",rel:"noopener noreferrer"},j=t(`<p>配置完成后，先在本地创建一个 TypeScript 项目 custom-runtime-typescript，并安装相关依赖。</p><div class="language-$ line-numbers-mode" data-ext="$"><pre class="language-$"><code>npm i typescript ts-node @types/node
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来，开始 Custom Runtime 的开发流程，一步一步打造属于自己的自定义运行环境。</p><h4 id="_1-搭建一个具有监听端口的-http-server" tabindex="-1"><a class="header-anchor" href="#_1-搭建一个具有监听端口的-http-server" aria-hidden="true">#</a> 1.搭建一个具有监听端口的 HTTP Server</h4><ul><li>需要注意的是，这个服务一定要监听<code>0.0.0.0:CAPort</code>或<code>*:CAPort</code>端口，默认是 9000。如果使用<code>127.0.0.1:CAPort</code>端口，会导致请求超时</li></ul><p>用 TS 编写一个 HTTP Server 文件 server.ts 如下：</p><p>注意：在开发函数具体的逻辑之前，一般会确认开发的函数是事件函数还是 HTTP 函数</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> http from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>http<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>

<span class="token comment">// 创建一个 HTTP Server</span>
<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token operator">:</span> http<span class="token punctuation">.</span>IncomingMessage<span class="token punctuation">,</span> res<span class="token operator">:</span> http<span class="token punctuation">.</span>ServerResponse<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> rid <span class="token operator">=</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>x<span class="token operator">-</span>fc<span class="token operator">-</span>request<span class="token operator">-</span>id<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">FC Invoke Start RequestId: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>rid<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token keyword">var</span> rawData <span class="token operator">=</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">;</span>
  req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>data<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>chunk<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    rawData <span class="token operator">+=</span> chunk<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>end<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 处理业务逻辑 ……</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rawData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>rawData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">FC Invoke End RequestId: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>rid<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

server<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// never timeout</span>
server<span class="token punctuation">.</span>keepAliveTimeout <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// kee palive, never timeout</span>

<span class="token comment">// 启动 HTTP 服务并监听 0.0.0.0:9000 端口</span>
server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">9000</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>FunctionCompute typescript runtime inited<span class="token punctuation">.</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编写完成后，可以先在本地测试该服务是否启动成功，通过安装在项目中的 ts-node 命令来运行上述代码：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 启动 HTTP 服务</span>

$ ./node_modules/.bin/ts-node server.ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动后，在另一个终端中使用 curl 命令测试：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token number">0.0</span>.0.0:9000 <span class="token parameter variable">-X</span> POST <span class="token parameter variable">-d</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>hello world<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span> <span class="token parameter variable">-H</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>x-fc-request-id:123<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span> 

hello world
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>若服务已正常启动，说明它可以在接收 HTTP 请求后处理业务逻辑，然后将处理结果再以 HTTP 响应的形式返回给 FaaS 平台。</p><h4 id="_2-创建一个启动目标-server-的可执行文件-bootstrap" tabindex="-1"><a class="header-anchor" href="#_2-创建一个启动目标-server-的可执行文件-bootstrap" aria-hidden="true">#</a> 2.创建一个启动目标 Server 的可执行文件 bootstrap</h4><p>函数计算冷启动 Custom Runtime 时，会默认调用 bootstrap 文件启动自定义的 HTTP Server。然后这个 HTTP Server 接管了函数计算系统的所有请求。</p><ul><li>bootstrap 是运行时入口引导程序文件，它会告诉 FaaS 如何启动你的自定义运行时。Custom Runtime 加载函数时会固定检索 bootstrap 同名文件，并执行该程序来启动 Custom Runtime 运行时。</li><li>bootstrap 需具备 777 或 755 可执行权限</li><li>如果是 shell 脚本，一定要添加<code>#!/bin/bash</code></li></ul><p>创建 bootstrap 文件如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
./node_modules/.bin/ts-node server.ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-编写资源配置文件-template-yaml" tabindex="-1"><a class="header-anchor" href="#_3-编写资源配置文件-template-yaml" aria-hidden="true">#</a> 3.编写资源配置文件 template.yaml</h4><p>在当前目录下编写一份用于部署到函数计算的资源配置文件 template.yaml：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">ROSTemplateFormatVersion</span><span class="token punctuation">:</span> &amp;<span class="token comment">#39;2015-09-01&amp;#39;</span>
<span class="token key atrule">Transform</span><span class="token punctuation">:</span> &amp;<span class="token comment">#39;Aliyun::Serverless-2018-04-03&amp;#39;</span>
<span class="token key atrule">Resources</span><span class="token punctuation">:</span>
  <span class="token key atrule">custom-runtime</span><span class="token punctuation">:</span> <span class="token comment"># 服务名称</span>
    <span class="token key atrule">Type</span><span class="token punctuation">:</span> &amp;<span class="token comment">#39;Aliyun::Serverless::Service&amp;#39; </span>
    <span class="token key atrule">Properties</span><span class="token punctuation">:</span>
      <span class="token key atrule">Description</span><span class="token punctuation">:</span> &amp;<span class="token comment">#39;helloworld&amp;#39;</span>
    <span class="token key atrule">custom-runtime-ts</span><span class="token punctuation">:</span> <span class="token comment"># 函数名称</span>
      <span class="token key atrule">Type</span><span class="token punctuation">:</span> &amp;<span class="token comment">#39;Aliyun::Serverless::Function&amp;#39; </span>
      <span class="token key atrule">Properties</span><span class="token punctuation">:</span>
        <span class="token key atrule">Handler</span><span class="token punctuation">:</span> index.handler <span class="token comment"># Handler 在此时没有实质意义，填写任意的一个满足函数计算 Handler 字符集约束的字符串即可， 例如 index.handler</span>
        <span class="token key atrule">Runtime</span><span class="token punctuation">:</span> custom <span class="token comment"># custom 代表自定义运行时</span>
        <span class="token key atrule">MemorySize</span><span class="token punctuation">:</span> <span class="token number">512</span>
        <span class="token key atrule">CodeUri</span><span class="token punctuation">:</span> &amp;<span class="token comment">#39;./&amp;#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-部署、调用测试、完成" tabindex="-1"><a class="header-anchor" href="#_4-部署、调用测试、完成" aria-hidden="true">#</a> 4.部署、调用测试、完成</h4><p>（1）使用<code>fun deploy -y </code> 命令将我们的自定义运行时和业务逻辑代码所有资源部署到阿里云。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/55cc6d9b8bdb4a7cad3d8b9ae90ec662~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20210505220309647"></p><p>（2）使用命令调用部署函数，验证</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ fun invoke <span class="token parameter variable">-e</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>hello,my custom runtime<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/12d18e40cd0f4959b49b370eda7cacd4~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20210505220520916"></p><p>看到成功输出，就代表我们的 custom runtime 大功告成了！它可以直接运行我们写的 TS 代码了。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/14f8efab7cce43b4bab755921370b457~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20210505223345696"></p><h2 id="实现-custom-container-runtime" tabindex="-1"><a class="header-anchor" href="#实现-custom-container-runtime" aria-hidden="true">#</a> 实现 Custom Container Runtime</h2><p>TS 的运行环境问题可以用 Custom Runtime 解决，但是 Node 某些版本平台不支持的问题，就不能用同样的办法了。因为 Node 是全局安装的，依赖系统环境。</p><p>FC 平台已经为我们想好了此类问题的解决办法，为我们提供了 Custom Container Runtime （自定义容器运行环境）的能力。FaaS 平台有这种能力，是因为它的底层实现原理是 <strong>Docker 容器</strong>，所以它通过运用容器技术，<strong>把我们的应用代码和运行环境打包为 Docker 镜像</strong>，保持环境一致性。实现一次构建，到处运行。</p><h4 id="工作原理-1" tabindex="-1"><a class="header-anchor" href="#工作原理-1" aria-hidden="true">#</a> 工作原理</h4>`,33),x={href:"https://help.aliyun.com/document_detail/132044.htm#Task-2259898",target:"_blank",rel:"noopener noreferrer"},R=t(`<ul><li>函数计算系统初始化执行环境实例前会扮演该函数的服务角色，获得临时用户名和密码并<strong>拉取镜像</strong>。</li><li>拉取成功后根据指定的启动命令 Command、参数 Args 及 CAPort 端口（默认 9000 ）启动自定义的 HTTP Server。</li><li>然后这个 HTTP Server 接管了函数计算系统的所有请求，包括来自事件函数调用及 HTTP 函数调用。</li></ul><p>下面我们自定义一个 Node v16.1.0 版本的容器运行环境。</p><h4 id="操作步骤-1" tabindex="-1"><a class="header-anchor" href="#操作步骤-1" aria-hidden="true">#</a> 操作步骤</h4><h5 id="_1-自定义-http-server" tabindex="-1"><a class="header-anchor" href="#_1-自定义-http-server" aria-hidden="true">#</a> 1.自定义 HTTP Server</h5><p>这一步和 Custom Runtime 相同，使用 Node.js Express 自定义一个 Http 服务 server.js，GET 和 POST 方法分别路由至不同的 Handler:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// server.js 文件</span>
<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>use strict<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>express<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Constants</span>
<span class="token keyword">const</span> <span class="token constant">PORT</span> <span class="token operator">=</span> <span class="token number">9000</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">HOST</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>

<span class="token comment">// HTTP 函数调用</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token comment">/*&amp;#39;, (req, res) =&amp;gt; {
  res.send(\`Hello FunctionCompute, http function, runtime is : Node \${process.version}\\n\`);
});

// 事件函数调用
app.post(&amp;#39;/invoke&amp;#39;, (req, res) =&amp;gt; {
  res.send(\`Hello FunctionCompute, event function,runtime is : Node \${process.version}\\n\`);
});

// 启动 HTTP 服务并监听 9000 端口
var server = app.listen(PORT, HOST);
console.log(\`Running on http://\${HOST}:\${PORT}\`);

server.timeout = 0; // never timeout
server.keepAliveTimeout = 0; // keepalive, never timeout

</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动服务，本地测试一下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 启动 HTTP 服务</span>
$ <span class="token function">node</span> server.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 新开一个终端，通过 curl 命令测试</span>
$ <span class="token function">curl</span> http://0.0.0.0:9000
Hello FunctionCompute, http GET, this runtime is <span class="token builtin class-name">:</span> Node v11.5.0     <span class="token comment"># 这是我本地的 Node 版本，后面在自定义容器中会输出 v16.1.0                 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>验证通过。</p><h5 id="_2-构建镜像并上传" tabindex="-1"><a class="header-anchor" href="#_2-构建镜像并上传" aria-hidden="true">#</a> 2.构建镜像并上传</h5><p>同样的，需要先做两个准备工作：</p>`,12),P=n("li",null,[n("p",null,"1）安装启动 Docker")],-1),q={href:"https://cr.console.aliyun.com/",target:"_blank",rel:"noopener noreferrer"},w=n("p",null,"接下来，先编写 Dockerfile，再构建包含我们 Node 指定版本运行环境和应用代码的镜像，最后上传到自己的镜像仓库。",-1),H={href:"https://nodejs.org/zh-cn/docs/guides/nodejs-docker-webapp/",target:"_blank",rel:"noopener noreferrer"},N=t(`<p>(1) 编写 Dockerfile：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token comment"># 基于基础镜像 node:16.1.0-alpine3.11 构建我们自己的镜像</span>
<span class="token instruction"><span class="token keyword">FROM</span> node:16.1.0-alpine3.11</span>

<span class="token comment"># 设置容器工作目录</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /usr/src/app</span>

<span class="token comment"># 将 package.json 和 package-lock.json 都拷贝到工作目录</span>
<span class="token instruction"><span class="token keyword">COPY</span> package*.json ./</span>

<span class="token comment"># 安装依赖</span>
<span class="token instruction"><span class="token keyword">RUN</span> npm install</span>

<span class="token comment"># 将当前目录下的所有文件拷贝到容器工作目录中</span>
<span class="token instruction"><span class="token keyword">COPY</span> . .</span>

<span class="token comment"># 暴露容器 8080 端口</span>
<span class="token instruction"><span class="token keyword">EXPOSE</span> 8080</span>

<span class="token comment"># 在容器中启动应用程序</span>
<span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [ &amp;quot;node&amp;quot;, &amp;quot;server.js&amp;quot; ]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）安装启动 Docker，登录阿里云镜像服务，构建并上传：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 登录</span>
$ <span class="token function">sudo</span> <span class="token function">docker</span> login <span class="token parameter variable">--username</span><span class="token operator">=</span>xxx registry.cn-hangzhou.aliyuncs.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>登录成功后，先构建 Docker 镜像：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 指定ACR镜像地址：其中 my_serverless 为你自己的容器命名空间；nodejs 为你自己的镜像仓库名称；v16.1.0 为镜像版本号</span>
$ <span class="token builtin class-name">export</span> <span class="token assign-left variable">IMAGE_NAME</span><span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>registry.cnhangzhou.aliyuncs.com/my_serverless/nodejs:v16.1.0<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>
<span class="token comment"># 构建镜像</span>
<span class="token comment"># -t 给镜像取名字打标签，通常 name:tag 或者 name 格式</span>
$ <span class="token function">docker</span> build <span class="token parameter variable">-t</span> <span class="token variable">$IMAGE_NAME</span> <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再启动容器，本地打开浏览器 http://localhost:9000/ 看是否可以正常响应，来验证我们的自定义镜像是否可以运行成功：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 启动容器： 将容器的 9000 端口映射到主机的 9000 端口</span>
$ <span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">9000</span>:9000 <span class="token parameter variable">-d</span> <span class="token variable">$IMAGE_NAME</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6acbfc32153e48f9a7df5e377e43bbd8~tplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;image-20210514150709489&quot; style=&quot;zoom:50%;&quot; /&gt;</p><p>验证通过后，最后上传镜像：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 上传镜像</span>
$ <span class="token function">docker</span> push <span class="token variable">$IMAGE_NAME</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上传成功后，可以在阿里云镜像服务中看到我们的镜像。后面就可以使用它啦！</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9a32a2ed92de4f389269184a14c3d3be~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20210509153919228"></p><h5 id="_3-定义-template-yaml" tabindex="-1"><a class="header-anchor" href="#_3-定义-template-yaml" aria-hidden="true">#</a> 3.定义 template.yaml</h5><p>创建一个 <code>template.yaml</code>文件如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">ROSTemplateFormatVersion</span><span class="token punctuation">:</span> &amp;<span class="token comment">#39;2015-09-01&amp;#39;</span>
<span class="token key atrule">Transform</span><span class="token punctuation">:</span> &amp;<span class="token comment">#39;Aliyun::Serverless-2018-04-03&amp;#39;</span>
<span class="token key atrule">Resources</span><span class="token punctuation">:</span>
  <span class="token key atrule">CustomContainerRuntime</span><span class="token punctuation">:</span> <span class="token comment"># 服务名称</span>
    <span class="token key atrule">Type</span><span class="token punctuation">:</span> &amp;<span class="token comment">#39;Aliyun::Serverless::Service&amp;#39;</span>
    <span class="token key atrule">Properties</span><span class="token punctuation">:</span>
      <span class="token key atrule">Policies</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> AliyunContainerRegistryReadOnlyAccess
      <span class="token key atrule">InternetAccess</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">nodejs-express-http</span><span class="token punctuation">:</span> <span class="token comment"># 函数名称</span>
      <span class="token key atrule">Type</span><span class="token punctuation">:</span> &amp;<span class="token comment">#39;Aliyun::Serverless::Function&amp;#39;</span>
      <span class="token key atrule">Properties</span><span class="token punctuation">:</span>
        <span class="token key atrule">Description</span><span class="token punctuation">:</span> &amp;<span class="token comment">#39;HTTP function powered by nodejs express&amp;#39;</span>
        <span class="token key atrule">Runtime</span><span class="token punctuation">:</span> custom<span class="token punctuation">-</span>container <span class="token comment"># 表示自定义容器</span>
        <span class="token key atrule">Timeout</span><span class="token punctuation">:</span> <span class="token number">60</span>
        <span class="token key atrule">CAPort</span><span class="token punctuation">:</span> <span class="token number">9000</span> <span class="token comment"># 注意！这里Custom Container Runtime使用的监听端口一定要和HTTP Server监听的端口保持一致，否则会出现错误</span>
        <span class="token key atrule">Handler</span><span class="token punctuation">:</span> not<span class="token punctuation">-</span>used
        <span class="token key atrule">MemorySize</span><span class="token punctuation">:</span> <span class="token number">1024</span>
        <span class="token key atrule">CodeUri</span><span class="token punctuation">:</span> ./   <span class="token comment"># Root directory for the function or the Dockerfile path</span>
        <span class="token key atrule">CustomContainerConfig</span><span class="token punctuation">:</span> <span class="token comment"># 容器镜像配置</span>
          <span class="token comment"># Sample image value: registry-vpc.cn-shenzhen.aliyuncs.com/fc-demo/nodejs-express:v0.1  使用同地域的VPC镜像地址加速</span>
          <span class="token key atrule">Image</span><span class="token punctuation">:</span> &amp;<span class="token comment">#39;registry.cn-hangzhou.aliyuncs.com/my_serverless/nodejs:v16.1.0&amp;#39;</span>
          <span class="token key atrule">Command</span><span class="token punctuation">:</span> &amp;<span class="token comment">#39;[ &amp;quot;node&amp;quot;]&amp;#39;</span>
          <span class="token key atrule">Args</span><span class="token punctuation">:</span> &amp;<span class="token comment">#39;[&amp;quot;server.js&amp;quot;]&amp;#39;</span>
      <span class="token key atrule">Events</span><span class="token punctuation">:</span>
        <span class="token key atrule">http-trigger-test</span><span class="token punctuation">:</span>
          <span class="token key atrule">Type</span><span class="token punctuation">:</span> HTTP
          <span class="token key atrule">Properties</span><span class="token punctuation">:</span>
              <span class="token key atrule">AuthType</span><span class="token punctuation">:</span> ANONYMOUS
              <span class="token key atrule">Methods</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>&amp;<span class="token comment">#39;GET&amp;#39;, &amp;#39;POST&amp;#39;, &amp;#39;PUT&amp;#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-部署测试" tabindex="-1"><a class="header-anchor" href="#_4-部署测试" aria-hidden="true">#</a> 4.部署测试</h5><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 使用命令部署到 FC </span>
$ fun deploy <span class="token parameter variable">-y</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/319556a34c8b4ad5bc861a3b432f7ab9~tplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;image-20210509163842880&quot; style=&quot;zoom:50%;&quot; /&gt;</p><p>部署成功后，我们去 FC 平台上进行测试。</p><p>因为我们在<code>template.yaml</code> 中配置的触发器是 http 触发器，所以我们点击“执行”按钮进行调试，发现正常运行,返回结果为 runtime is : Node v16.1.0，说明我们的自定义容器运行环境也成功实现了！</p><p>&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a3553a89ace54a618a85304ca32d5d5b~tplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;image-20210509163945647&quot; style=&quot;zoom:50%;&quot; /&gt;</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>Custom Runtime 为我们打破了 FaaS 平台对语言的限制；Custom Container Runtime 让开发者可以将应用代码和运行环境打包成容器镜像作为函数的交付物，优化开发者体验、提升开发和交付效率。</p><p>自定义（容器）运行时让我们开发者使用 Serverless 的自由度更高，通过它们可以让我们无需代码改造，一键迁移我们的 Web 应用。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,27),A={href:"https://stackoverflow.com/questions/3900549/what-is-runtime",target:"_blank",rel:"noopener noreferrer"},F={href:"https://zhuanlan.zhihu.com/p/137204273",target:"_blank",rel:"noopener noreferrer"},z={href:"https://cloud.tencent.com/document/product/583/47274",target:"_blank",rel:"noopener noreferrer"},$={href:"https://help.aliyun.com/document_detail/64204.html",target:"_blank",rel:"noopener noreferrer"},D={href:"https://developer.aliyun.com/article/772788",target:"_blank",rel:"noopener noreferrer"},E={href:"https://cloud.tencent.com/developer/article/1690709",target:"_blank",rel:"noopener noreferrer"},O=n("h2",{id:"推荐阅读",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#推荐阅读","aria-hidden":"true"},"#"),s(" 推荐阅读")],-1),I={href:"https://zoo.team/article/about-vite",target:"_blank",rel:"noopener noreferrer"},M={href:"https://juejin.cn/post/6974184935804534815",target:"_blank",rel:"noopener noreferrer"},G={href:"https://juejin.cn/post/6976798974757830687",target:"_blank",rel:"noopener noreferrer"},V=n("h2",{id:"开源作品",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#开源作品","aria-hidden":"true"},"#"),s(" 开源作品")],-1),U=n("ul",null,[n("li",null,"政采云前端小报")],-1),B={href:"https://www.zoo.team/openweekly/",target:"_blank",rel:"noopener noreferrer"},L=n("h2",{id:"招贤纳士",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#招贤纳士","aria-hidden":"true"},"#"),s(" 招贤纳士")],-1),Y=n("p",null,"政采云前端团队（ZooTeam），一个年轻富有激情和创造力的前端团队，隶属于政采云产品研发部，Base 在风景如画的杭州。团队现有 40 余个前端小伙伴，平均年龄 27 岁，近 3 成是全栈工程师，妥妥的青年风暴团。成员构成既有来自于阿里、网易的“老”兵，也有浙大、中科大、杭电等校的应届新人。团队在日常的业务对接之外，还在物料体系、工程平台、搭建平台、性能体验、云端应用、数据分析及可视化等方向进行技术探索和实战，推动并落地了一系列的内部技术产品，持续探索前端技术体系的新边界。",-1),K=n("p",null,[s("如果你想改变一直被事折腾，希望开始能折腾事；如果你想改变一直被告诫需要多些想法，却无从破局；如果你想改变你有能力去做成那个结果，却不需要你；如果你想改变你想做成的事需要一个团队去支撑，但没你带人的位置；如果你想改变既定的节奏，将会是“5 年工作时间 3 年工作经验”；如果你想改变本来悟性不错，但总是有那一层窗户纸的模糊… 如果你相信相信的力量，相信平凡人能成就非凡事，相信能遇到更好的自己。如果你希望参与到随着业务腾飞的过程，亲手推动一个有着深入的业务理解、完善的技术体系、技术创造价值、影响力外溢的前端团队的成长历程，我觉得我们该聊聊。任何时间，等着你写点什么，发给 "),n("code",null,"ZooTeam@cai-inc.com")],-1),W=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/98d3aa3d1f8646a8bcda8cfd9e335a4b~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1);function J(X,Z){const a=l("ExternalLinkIcon");return o(),i("div",null,[n("p",null,[s("本文已参与好文召集令活动，点击查看："),n("a",r,[s("后端、大前端双赛道投稿，2万元奖池等你挑战！"),e(a)]),u]),n("p",null,[s("> 这是第 106 篇不掺水的原创，想获取更多原创好文，请搜索公众号关注我们吧~ 本文首发于政采云前端博客："),n("a",d,[s("Serverless Custom (Container) Runtime"),e(a)])]),m,k,n("p",null,[s("我们知道 Serverless 可以理解为 "),v,s(" 。Serverless 应用中，对于服务端业务逻辑代码，开发者是以"),b,s("的形式去实现的，即 "),h,s("（函数即服务）。( Serverless 相关文章可以看下团队"),n("a",g,[s("结合阿里云 FC 谈谈我对 FaaS 的理解"),e(a)]),s(")")]),f,n("p",null,[s("为了更快更好地玩转 Serverless 应用，需要先安装阿里云的一个 "),n("a",y,[s("Fun工具"),e(a)]),s("，它是一个用于支持 Serverless 应用部署的工具，能帮助我们便捷地管理函数计算、API 网关、日志服务等资源。它通过一个资源配置文件（template.yml），协助我们进行"),_,s("操作。")]),T,n("p",null,[s("（2）安装好后，使用"),C,s("命令配置账户信息（"),n("a",S,[s("配置文档"),e(a)]),s("），按照提示依次配置 Account ID、AccessKey ID、AccessKey Secret、Default Region Name。")]),j,n("p",null,[s("Custom Container Runtime 工作原理与"),n("a",x,[s("Custom Runtime"),e(a)]),s(" 基本相同：")]),R,n("ul",null,[P,n("li",null,[n("p",null,[s("2）使用阿里云容器镜像服务"),n("a",q,[s("创建命名空间和镜像仓库"),e(a)]),s("存放我们的自定义镜像")])])]),w,n("p",null,[s("（有需要的同学可以先看下这篇文章"),n("a",H,[s("如何把一个 Node.js web 应用程序给 Docker 化"),e(a)]),s(" ）")]),N,n("p",null,[n("a",A,[s("what-is-runtime"),e(a)])]),n("p",null,[n("a",F,[s("为阿里云 serverless 打造 Deno 运行时"),e(a)])]),n("p",null,[n("a",z,[s("Custom Runtime 说明"),e(a)])]),n("p",null,[n("a",$,[s("fun 工具"),e(a)])]),n("p",null,[n("a",D,[s("函数计算支持容器镜像-加速应用 Serverless 进程"),e(a)])]),n("p",null,[n("a",E,[s("Custom Runtime - 打破云函数语言限制"),e(a)])]),O,n("p",null,[n("a",I,[s("Vite 特性和部分源码解析"),e(a)])]),n("p",null,[n("a",M,[s("我在工作中是如何使用 git 的"),e(a)])]),n("p",null,[n("a",G,[s("15 分钟学会 Immutable"),e(a)])]),V,U,n("p",null,[n("strong",null,[s("开源地址 "),n("a",B,[s("www.zoo.team/openweekly/"),e(a)])]),s(" (小报官网首页有微信交流群)")]),L,Y,K,W])}const nn=p(c,[["render",J],["__file","Serverless Custom (Container) Runtime.html.vue"]]);export{nn as default};
