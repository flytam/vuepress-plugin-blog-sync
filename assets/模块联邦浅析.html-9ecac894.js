import{_ as p,z as o,A as i,Y as n,C as e,U as s,a6 as t,Q as l}from"./framework-cb9358d9.js";const c={},r=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d4eb6a01e6564840817b127265b07edd~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1),u=n("p",null,[n("img",{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/04f087d7f5ea4f31b23f215cadfa3f8e~tplv-k3u1fbpfcp-watermark.image?",alt:"沧澜.png"})],-1),d={href:"https://www.zoo.team/article/webpack-modular",target:"_blank",rel:"noopener noreferrer"},m=t('<h1 id="引言" tabindex="-1"><a class="header-anchor" href="#引言" aria-hidden="true">#</a> 引言</h1><p>作为前端打包工具的重要工具人--webpack，相信大家在项目中并不陌生。 前段时间 webpack5 新出了个特性: 模块联邦。大家可能虽然听说过，但还没在项目中使用，今天就带大家通过一个小实战来熟悉一下它的用法。</p><h1 id="业务场景" tabindex="-1"><a class="header-anchor" href="#业务场景" aria-hidden="true">#</a> 业务场景</h1><p>假设公司有个业务集群，公共业务组件库升级了，希望能够尽可能少得影响业务线，仅仅在基础组件库版本升级即可全业务线升级，那么可以考虑使用模块联邦来实现。</p><p>他和利用 npm 发包来实现的方案的区别在于，npm 发布的组件库从 1.0.1 升级到 1.0.2 的时候，必须要把业务线项目重新构建，打包，发布才能使用到最新的特性，而模块联邦可以实现实时动态更新而无需打包业务线项目。</p><p>大致的原型图如下:</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5d7b6d2306b149eaaf43c2a98925c27c~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>我们看到，project1 的 home 页的 specialItem，project2 的 about 页的 searchItem 组件被用于 project2 的 home 中， project2 的 about 直接用的 project1 的 about 页。</p>',8),k={href:"https://github.com/module-federation/module-federation-examples/tree/master/vue3-cli-demo",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/AshesOfHistory/vue3-cli-module-federation-demo",target:"_blank",rel:"noopener noreferrer"},h=t(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>├── README.md
├── app-exposes
│   ├── babel.config.js
│   ├── src
│   │   ├── App.vue
│   │   ├── assets
│   │   ├── components
│   │   │   ├── SearchItem.vue  ---搜索组件
│   │   │   └── SpecialItem.vue  ---自定义业务组件
│   │   ├── index.ts
│   │   ├── main.ts
│   │   ├── router
│   │   │   └── index.ts
│   │   └── views
│   │       ├── AboutView.vue   ---关于页
│   │       └── HomeView.vue  ---首页
│   ├── tsconfig.json
│   └── vue.config.js
├── app-general
│   ├── babel.config.js
│   ├── src
│   │   ├── router
│   │   │   └── index.ts
│   │   └── views
│   │       └── HomeView.vue
│   ├── tsconfig.json
│   └── vue.config.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>利用脚手架分别创建 app-exposes 与 app-general 的 vue3 项目，此部分大家应该都轻车熟路在此就略过了。嫌麻烦的可以直接用我提供的 demo 样本。</p><p>首先克隆本项目代码地址后，分别在 app-exposes 与 app-general 项目下执行 npm i 安装依赖，然后分别执行 npm run serve 运行代码。 此时能够看到本地起了两个服务，端口号分别为 8083 与 8081，其中 app-exposes 为 8083，app-general 为 8081。</p><p>项目运行示意效果图如下</p><p><img src="https://www.zoo.team/images/upload/upload_ce94dce0c7be0fe6e415694f93bf4b54.jpg" alt=""></p><p>然后我们看看两个项目的配置文件如何配置的。</p><p>app-exposes 的 vue.config.js 配置：</p><p><img src="https://www.zoo.team/images/upload/upload_b9757ab9ca984422663ce66a1b1c47ef.jpg" alt=""></p><p>app-general 的 vue.config.js 配置：</p><p><img src="https://www.zoo.team/images/upload/upload_aa824fd4b3326131dcb65a8a6d11404a.jpg" alt=""></p><p>可以看到，总体上我们用到了 webpack 原生的插件 ModuleFederationPlugin 来实现模块联邦的效果的。</p><p>在首页中，我们异步引用的 app-exposes 提供的 SearchItem 以及 SpecialItem 组件。</p><p><img src="https://www.zoo.team/images/upload/upload_ec73159c7f2a16249728d7b9c85f0957.jpg" alt=""></p><p>在 about 页面的路由配置中，我们直接引入的远程连接的 AboutView 页面。</p><p><img src="https://www.zoo.team/images/upload/upload_ea33419685d45fc6010f531a61f2f253.jpg" alt=""></p>`,15),v=n("strong",null,"联邦模块",-1),g={href:"https://github.com/module-federation/module-federation-examples",target:"_blank",rel:"noopener noreferrer"},f=t(`<h1 id="二-联邦模块插件的结构及其常见的调用方式-module-federation-plugin" tabindex="-1"><a class="header-anchor" href="#二-联邦模块插件的结构及其常见的调用方式-module-federation-plugin" aria-hidden="true">#</a> 二.联邦模块插件的结构及其常见的调用方式（Module Federation Plugin）</h1><p>上面我们大概了解了下模块联邦插件的大致使用方法。不过知其然也要知其所以然，所以我接下来从个人角度简单聊一聊他的实现原理。</p><p>webpack 的整体流程上来说大体分为三个主要阶段</p><ul><li><strong>初始化阶段</strong></li><li><strong>构建阶段</strong></li><li><strong>生成阶段</strong></li></ul><p>在这三大阶段时拥有极其庞大的插件库在各个阶段以及节点中发挥各自的作用，而模块联邦插件就是其中之一。</p><p>模块联邦作为一个 webpack5 时期新出的插件，形态上看通常是一个带有 apply 方法的类。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">ModuleFederationPlugin</span> <span class="token punctuation">{</span>
    <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">compiler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数 compiler 是 webpack 上下文，可以调用 hook 对象注册各种钩子回调。</p><p>如下文中的 compiler.hooks.thisCompilation.tap，表明调用 afterPlugins 这个钩子的 tap 方法，传入插件名称与回调函数，执行我们指定的逻辑，webpack 通过这种方式来构建其庞大繁杂的插件体系。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>class ModuleFederationPlugin {
    apply(compiler) {
        compiler.hooks.afterPlugins.tap(&amp;quot;ModuleFederationPlugin&amp;quot;, () =&amp;gt; {
          ...
        }
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),_={href:"https://github.com/webpack/tapable",target:"_blank",rel:"noopener noreferrer"},w=t(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>const {
    SyncHook,
    SyncBailHook,
    SyncWaterfallHook,
    SyncLoopHook,
    AsyncParallelHook,
    AsyncParallelBailHook,
    AsyncSeriesHook,
    AsyncSeriesBailHook,
    AsyncSeriesWaterfallHook
 } = require(&amp;quot;tapable&amp;quot;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="三-联邦模块的原理分析" tabindex="-1"><a class="header-anchor" href="#三-联邦模块的原理分析" aria-hidden="true">#</a> 三.联邦模块的原理分析</h1>`,2),x=n("strong",null,"Host",-1),y=n("strong",null,"Remote",-1),j={href:"https://github.com/module-federation/module-federation-examples/tree/master/bi-directional",target:"_blank",rel:"noopener noreferrer"},P=t(`<ul><li>作为 Host 需要配置 remote 列表和 shared 模块。</li><li>作为 Remote 需要配置项目名（name），打包方式（library），打包后的文件名（filename），提供的模块（exposes），和 Host 共享的模块（shared）。</li></ul><h2 id="webpack-打包原理" tabindex="-1"><a class="header-anchor" href="#webpack-打包原理" aria-hidden="true">#</a> webpack 打包原理</h2><p><strong>webpack4 对于异步模块加载步骤</strong></p><ul><li>import(chunkId) =&gt; <strong>webpack_require</strong>.e(chunkId) 将相关的请求回调存入 installedChunks。</li><li>发起 JSONP 请求。</li><li>将下载的模块录入 modules。</li><li>执行 chunk 请求回调。</li><li>加载 module。</li><li>执行用户回调。</li></ul><p>联邦模块是基于 webpack 做的优化，所以在深入联邦模块之前我们首先得知道 webpack 是怎么做的打包工作。 webpack 每次打包都会将资源全部包裹在一个<strong>立即执行函数</strong>里面，这样虽然避免了全局环境的污染，但也使得外部不能访问内部模块。 在这个立即执行函数里面，webpack 使用 <strong>webpack_modules</strong> 对象保存所有的模块代码，然后用内部定义的 <strong>webpack_require</strong> 方法从 <strong>webpack_modules</strong> 中加载模块。并且在异步加载和文件拆分两种情况下向全局暴露一个 webpackChunk 数组用于沟通多个 webpack 资源，这个数组通过被 webpack 重写 push 方法，会在其他资源向 webpackChunk 数组中新增内容时同步添加到 <strong>webpack_modules</strong> 中从而实现模块整合。</p><p>联邦模块就是基于这个机制，修改了 <strong>webpack_require</strong> 的部分实现，在 require 的时候从远程加载资源，<strong>缓存到全局对象 window[&quot;webpackChunk&quot;+appName]</strong> 中，然后合并到 <strong>webpack_modules</strong> 中。</p><h2 id="modulefederationplugin-的原理" tabindex="-1"><a class="header-anchor" href="#modulefederationplugin-的原理" aria-hidden="true">#</a> ModuleFederationPlugin 的原理</h2><p>源码中 ModuleFederationPlugin 主流程 主要做了三件事：</p><ul><li>通过参数是否配置 shared 来判断是否使用共享依赖 SharePlugin 模块。</li><li>通过参数是否配置 exposes 来判断是否使用公开 ContainerPlugin 模块。</li><li>通过参数是否配置 remotes 来判断是否使用 ContainerReferencePlugin 引用模块。</li></ul><p>下面是项目源码，部分代码以及判断条件已省略。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 源码目录 lib/container/ModuleFederationPlugin</span>
<span class="token keyword">class</span> <span class="token class-name">ModuleFederationPlugin</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
	<span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">compiler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>library <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> <span class="token operator">...</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			compiler<span class="token punctuation">.</span>options<span class="token punctuation">.</span>output<span class="token punctuation">.</span>enabledLibraryTypes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>library<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>afterPlugins<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>ModuleFederationPlugin<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>exposes <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> <span class="token operator">...</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">new</span> <span class="token class-name">ContainerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
					<span class="token operator">...</span>
				<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>compiler<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>remotes <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> <span class="token operator">...</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">new</span> <span class="token class-name">ContainerReferencePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
					remoteType<span class="token punctuation">,</span>
					<span class="token literal-property property">remotes</span><span class="token operator">:</span> options<span class="token punctuation">.</span>remotes
				<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>compiler<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>shared<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">new</span> <span class="token class-name">SharePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
					<span class="token literal-property property">shared</span><span class="token operator">:</span> options<span class="token punctuation">.</span>shared<span class="token punctuation">,</span>
					<span class="token literal-property property">shareScope</span><span class="token operator">:</span> options<span class="token punctuation">.</span>shareScope
				<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>compiler<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> ModuleFederationPlugin<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>webpack5 模块联邦对异步模块加载的处理</strong></p><ul><li>下载并执行 remoteEntry.js，挂载入口点对象到 window.app-exposes，他有两个函数属性，init 和 get。init 方法用于初始化作用域对象 initScope，get 方法用于下载 moduleMap 中导出的远程模块。</li><li>加载 app-exposes 到本地模块。</li><li>创建 app-exposes.init 的执行环境，收集依赖到共享作用域对象 shareScope。</li><li>执行 app-exposes.init，初始化 initScope。</li><li>用户 import 远程模块时调用 app-exposes.get(moduleName) 通过 Jsonp 懒加载远程模块，然后缓存在全局对象 window[&#39;webpackChunk&#39; + appName]。</li><li>通过 webpack_require 读取缓存中的模块，执行用户回调。</li></ul><h1 id="四-使用场景" tabindex="-1"><a class="header-anchor" href="#四-使用场景" aria-hidden="true">#</a> 四.使用场景</h1><p>目前模块联邦已经在微前端领域发挥了巨大的作用，也起到 webpack 能够越来越强大。</p><p>利用模块联邦强大的跨应用级模块共享能力，我们可以搭建一个非业务的中台搭建系统，实现 app 级别的低代码搭建平台，这与市场上常见页面级低代码搭建不同，能够实现系统级能力复用的同时降低维护成本。后续比如说 sso 单点登录，页面跳转，埋点，异常捕获等都可以考虑抽象封装成系统内置的方法到里面。</p><p><strong>总结</strong> 通过这篇文章，我们收获了</p><ul><li>模块联邦的基础概念。</li><li>模块联邦常用的配置项。</li><li>通过简易配置实现雏形项目开发。</li><li>模块联邦的基本原理。</li></ul><h1 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h1>`,19),S={href:"https://webpack.docschina.org/concepts/module-federation/",target:"_blank",rel:"noopener noreferrer"},H={href:"https://segmentfault.com/a/1190000024449390",target:"_blank",rel:"noopener noreferrer"},M={href:"https://zhuanlan.zhihu.com/p/141390589",target:"_blank",rel:"noopener noreferrer"},z={href:"https://blog.csdn.net/yingyangxing/article/details/109653116",target:"_blank",rel:"noopener noreferrer"},F={href:"https://developer.aliyun.com/article/755252",target:"_blank",rel:"noopener noreferrer"},q={href:"https://juejin.cn/post/6961678963680739359",target:"_blank",rel:"noopener noreferrer"},C={href:"https://xie.infoq.cn/article/ddca4caa394241447fa0aa3c0",target:"_blank",rel:"noopener noreferrer"},I={href:"https://juejin.cn/post/6844903987129352206",target:"_blank",rel:"noopener noreferrer"},A=n("h2",{id:"推荐阅读",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#推荐阅读","aria-hidden":"true"},"#"),e(" 推荐阅读")],-1),W={href:"https://juejin.cn/post/7098854314365419533",target:"_blank",rel:"noopener noreferrer"},N=n("p",null,'[如何基于 WebComponents 封装 UI 组件库](https://juejin.cn/post/7096265630466670606 "# 如何基于 WebComponents 封装 UI 组件库")',-1),V={href:"https://juejin.cn/post/7091068088975622175",target:"_blank",rel:"noopener noreferrer"},B={href:"https://juejin.cn/post/7085873582588297224",target:"_blank",rel:"noopener noreferrer"},R={href:"https://juejin.cn/post/7078078998357475358",target:"_blank",rel:"noopener noreferrer"},E=n("h2",{id:"开源作品",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#开源作品","aria-hidden":"true"},"#"),e(" 开源作品")],-1),T=n("ul",null,[n("li",null,"政采云前端小报")],-1),L={href:"https://www.zoo.team/openweekly/",target:"_blank",rel:"noopener noreferrer"},U=n("ul",null,[n("li",null,"商品选择 sku 插件")],-1),J={href:"https://github.com/zcy-inc/skuPathFinder-back",target:"_blank",rel:"noopener noreferrer"},O=n("h2",{id:"招贤纳士",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#招贤纳士","aria-hidden":"true"},"#"),e(" 招贤纳士")],-1),Z=n("p",null,"政采云前端团队（ZooTeam），一个年轻富有激情和创造力的前端团队，隶属于政采云产品研发部，Base 在风景如画的杭州。团队现有 60 余个前端小伙伴，平均年龄 27 岁，近 4 成是全栈工程师，妥妥的青年风暴团。成员构成既有来自于阿里、网易的“老”兵，也有浙大、中科大、杭电等校的应届新人。团队在日常的业务对接之外，还在物料体系、工程平台、搭建平台、性能体验、云端应用、数据分析及可视化等方向进行技术探索和实战，推动并落地了一系列的内部技术产品，持续探索前端技术体系的新边界。",-1),D=n("p",null,[e("如果你想改变一直被事折腾，希望开始能折腾事；如果你想改变一直被告诫需要多些想法，却无从破局；如果你想改变你有能力去做成那个结果，却不需要你；如果你想改变你想做成的事需要一个团队去支撑，但没你带人的位置；如果你想改变既定的节奏，将会是“5 年工作时间 3 年工作经验”；如果你想改变本来悟性不错，但总是有那一层窗户纸的模糊… 如果你相信相信的力量，相信平凡人能成就非凡事，相信能遇到更好的自己。如果你希望参与到随着业务腾飞的过程，亲手推动一个有着深入的业务理解、完善的技术体系、技术创造价值、影响力外溢的前端团队的成长历程，我觉得我们该聊聊。任何时间，等着你写点什么，发给 "),n("code",null,"ZooTeam@cai-inc.com")],-1),Q=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/98d3aa3d1f8646a8bcda8cfd9e335a4b~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1);function Y(G,K){const a=l("ExternalLinkIcon");return o(),i("div",null,[r,u,n("p",null,[e("> 这是第 144 篇不掺水的原创，想获取更多原创好文，请搜索公众号关注我们吧~ 本文首发于政采云前端博客："),n("a",d,[e("模块联邦浅析"),s(a)])]),m,n("p",null,[e("总体上的源代码来自于模块联邦的"),n("a",k,[e("示例代码"),s(a)]),e("，稍作改动。")]),n("p",null,[e("以下只列出改动的关键部分目录结构，冗余文件已省略。"),n("a",b,[e("戳我"),s(a)]),e("查看本项目代码示例地址。")]),h,n("p",null,[e("如果想查看更多关于"),v,e("的案例，可以访问"),n("a",g,[e("官方仓库"),s(a)]),e("。")]),f,n("p",null,[e("钩子的核心逻辑定义在 "),n("a",_,[e("Tapable"),s(a)]),e(" 仓库，内部定义了如下类型的钩子。")]),w,n("p",null,[e("联邦模块有两个主要概念："),x,e("（消费其他 Remote）和 "),y,e("（被 Host 消费）。 每个项目可以是 Host 也可以是 Remote，也可以两个都是。可以通过 webpack 配置来区分，可以参考"),n("a",j,[e("例子"),s(a)]),e("。")]),P,n("ul",null,[n("li",null,[n("a",S,[e("webpack 5 官方文档"),s(a)])]),n("li",null,[n("a",H,[e("Webpack5 跨应用代码共享 - Module Federation"),s(a)])]),n("li",null,[n("a",M,[e("尝试 webpack5 Module Federation"),s(a)])]),n("li",null,[n("a",z,[e("探索 webpack5 新特性 Module federation 引发的 javascript 共享模块变革"),s(a)])]),n("li",null,[n("a",F,[e("三大应用场景调研，Webpack 新功能 Module Federation 深入解析"),s(a)])]),n("li",null,[n("a",q,[e("利用联邦模块实现跨应用的代码共享"),s(a)])]),n("li",null,[n("a",C,[e("[万字总结] 一文吃透 Webpack 核心原理"),s(a)])]),n("li",null,[n("a",I,[e("Webpack 源码解读：理清编译主流程"),s(a)])])]),A,n("p",null,[n("a",W,[e("性能优化——图片压缩、加载和格式选择"),s(a)])]),N,n("p",null,[n("a",V,[e("Web Worker"),s(a)])]),n("p",null,[n("a",B,[e("如何落地一个智能机器人"),s(a)])]),n("p",null,[n("a",R,[e("一名练习时长 2 年零 8 个月的前端练习生自述"),s(a)])]),E,T,n("p",null,[n("strong",null,[e("开源地址 "),n("a",L,[e("www.zoo.team/openweekly/"),s(a)])]),e(" (小报官网首页有微信交流群)")]),U,n("p",null,[n("strong",null,[e("开源地址 "),n("a",J,[e("https://github.com/zcy-inc/skuPathFinder-back/"),s(a)])])]),O,Z,D,Q])}const $=p(c,[["render",Y],["__file","模块联邦浅析.html.vue"]]);export{$ as default};
