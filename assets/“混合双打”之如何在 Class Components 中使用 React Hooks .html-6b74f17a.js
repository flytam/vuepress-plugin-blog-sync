import{_ as o,z as e,A as c,Y as n,C as s,U as p,a6 as t,Q as l}from"./framework-cb9358d9.js";const i={},u=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a11a341907ba400aa7f8dff32b1e92d0~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1),r={href:"https://zoo.team/article/react-hooks-in-class-component",target:"_blank",rel:"noopener noreferrer"},k=n("p",null,[n("img",{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bad0d32faefa4f95836abd7eb9515dbe~tplv-k3u1fbpfcp-watermark.image",alt:""})],-1),d=n("h2",{id:"前情提要",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#前情提要","aria-hidden":"true"},"#"),s(" 前情提要")],-1),m={href:"https://www.zoo.team/article/react-hooks",target:"_blank",rel:"noopener noreferrer"},v=t(`<p>本文不会再介绍上文中已提到的部分钩子的基础使用，而是主要着眼解决一些实际开发中的场景。</p><h2 id="现状" tabindex="-1"><a class="header-anchor" href="#现状" aria-hidden="true">#</a> 现状</h2><p>Class Component 内部复杂的生命周期函数使得我们组件内部的 <code>componentDidMount</code> 越来越复杂和臃肿，独立组件动辄上千行代码；组件嵌套层级越来越深，组件之间的状态复用也变得非常困难。</p><p>Hook 无疑是可选的，他不会对现有项目造成任何冲击和破坏，社区对于它的优势也有过很多讨论；不过目前官方也没有计划移除 Class，而是推荐渐进式的去使用 Hook，在一些新增的组件中优先选用 Hook。那么我们想要在原有以 Class Component 为主的项目中开始使用 Hook，与原有的 Class Component 必然会产生交互，是不是需要将这些 Class Component 重写为 Hook 呢？</p><p>将部分复杂的 Class Component 逐步重写为 Hook 应该排在项目迭代的中长期计划中，如果想要在一个迭代中进行大量改造，带来的巨大成本和副作用也是无法估量的。</p><p>那么短期内我们就绕不开 Hook 与 Class 组件的混合使用。</p><h2 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案" aria-hidden="true">#</a> 解决方案</h2><p>先简单介绍一下两种组件的基本写法：</p><p>Class Components：类组件的写法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">ShowHook</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>h1<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>Hello Hook<span class="token operator">!</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>h1<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
	<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Function Components：Hook 组件的写法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">ShowHook</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>h1<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>Hello Hook<span class="token operator">!</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>h1<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
	<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>混合使用就难以避免的需要进行通信和参数传递，下面我用一个简单的处理模块显示隐藏的功能组件 <code>ShowHook</code> 作为一个例子，介绍三种是比较常见混合使用的方式，先来看一下效果：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b289d83f609a4490ae876f309ed80db9~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><h3 id="_1-render-props" tabindex="-1"><a class="header-anchor" href="#_1-render-props" aria-hidden="true">#</a> 1.Render props</h3><p>Render props 中来自父组件的 props children 是一个 <code>Function</code>，我们可以将子组件的内部变量通过函数传递至父组件，达到通信的目的。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 子组件 SayHello.js</span>
<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>react<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>visible<span class="token punctuation">,</span> changeVisible<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">const</span> jsx <span class="token operator">=</span> visible <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> <span class="token punctuation">(</span>
    <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>h1 onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token function">changeVisible</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> Hello Hook<span class="token operator">!</span> <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>h1<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">children</span><span class="token punctuation">(</span><span class="token punctuation">{</span> changeVisible<span class="token punctuation">,</span> jsx <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> sayHello<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>父组件获取到 <code>changeVisible</code> 方法之后就能方便的控制 <code>visible</code> 的状态。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 父组件 ShowHook.js</span>
<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component<span class="token punctuation">,</span> Fragment <span class="token punctuation">}</span> from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>react<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> SayHello from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>components<span class="token operator">/</span>SayHello<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">ShowHook</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>SayHello<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
        <span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">{</span> changeVisible<span class="token punctuation">,</span> jsx <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token punctuation">(</span>
            <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
              <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token function">changeVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
                showChild
              <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>button<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
              <span class="token punctuation">{</span>jsx<span class="token punctuation">}</span>
            <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">}</span>
      <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>SayHello<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>props.children</code> 常用的类型是字符串、对象甚至数组；但其实我们也可以传入一个函数，只要最终能返回出DOM 树即可；Render props 是将 Render 部分抽离出来作为函数传入子组件；它主要的作用是将 state 部分抽成组件，实现 state 的复用。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 封装子组件</span>
<span class="token keyword">function</span> <span class="token function">Mouse</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>position<span class="token punctuation">,</span> setPosition<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> handleMouseMove <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
    <span class="token function">setPosition</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> e<span class="token punctuation">.</span>clientX<span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> e<span class="token punctuation">.</span>clientY <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>div onMouseMove<span class="token operator">=</span><span class="token punctuation">{</span>handleMouseMove<span class="token punctuation">}</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
        <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">}</span>
    <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>div<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 使用场景 1：图片位置跟随鼠标</span>
<span class="token keyword">class</span> <span class="token class-name">Cat1</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>Mouse<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
        <span class="token punctuation">{</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> 
          <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>img src<span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">/</span>cat<span class="token punctuation">.</span>jpg<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span> 
            style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">position</span><span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>absolute<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token literal-property property">left</span><span class="token operator">:</span> position<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token literal-property property">top</span><span class="token operator">:</span> position<span class="token punctuation">.</span>y <span class="token punctuation">}</span><span class="token punctuation">}</span> 
          <span class="token operator">/</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>Mouse<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 使用场景 2：页面展示鼠标坐标</span>
<span class="token keyword">class</span> <span class="token class-name">Cat2</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>Mouse<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
        <span class="token punctuation">{</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> 
          <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>h1<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>x<span class="token operator">:</span> <span class="token punctuation">{</span>position<span class="token punctuation">.</span>x<span class="token punctuation">}</span> y<span class="token operator">:</span> <span class="token punctuation">{</span>position<span class="token punctuation">.</span>y<span class="token punctuation">}</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>h1<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>Mouse<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面使用了 React 官方文档中的例子进行改写，具体效果如下： 场景 1：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f6798428a09a47c8aca8c746a975cdde~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>场景 2：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cafeca7b9c6b4aff9535bff44072a061~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><h3 id="_2-使用-hoc" tabindex="-1"><a class="header-anchor" href="#_2-使用-hoc" aria-hidden="true">#</a> 2.使用 HOC</h3><p>HOC (Higher-Order Components) 是另一种提高代码复用率的常见技巧，它接收一个组件作为参数，最终返回出一个新的组件。</p><p>下面的方法使得 <code>button</code> 控制任意组件显示隐藏的功能被封装为高阶组件，得以复用，并且 <code>setVisible</code> 方法也能被传递到 <code>Class Component</code> 中。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 高阶组件 SayHello.js</span>
<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> Fragment <span class="token punctuation">}</span> from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>react<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> sayHello <span class="token operator">=</span> <span class="token punctuation">(</span>Component<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">[</span>visible<span class="token punctuation">,</span> setVisible<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>Fragment<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
          showChild
        <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>button<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
        <span class="token punctuation">{</span>visible <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>Component changeVisible<span class="token operator">=</span><span class="token punctuation">{</span>setVisible<span class="token punctuation">}</span> visible<span class="token operator">=</span><span class="token punctuation">{</span>visible<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">}</span>
      <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>Fragment<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> sayHello<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在外部 Class Component 中我们可以定制受内部显示/隐藏控制的组件，并且使用高阶组件中向外传递的 props 。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ShowHook.js</span>
<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>react<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> SayHello from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>components<span class="token operator">/</span>SayHello<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">ShowHook</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> changeVisible <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>h1 onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token function">changeVisible</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> Hello Hook<span class="token operator">!</span> <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>h1<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">SayHello</span><span class="token punctuation">(</span>ShowHook<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>HOC 在实际使用中是将一些副作用函数、公用方法作为组件抽取出来，从而提升复用率；我们可以把父组件的 <code>render</code> 部分改为一个弹窗，或任意内容使得子组件得到复用，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 复用高阶组件 SayHello</span>
<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>react<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> SayHello from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>components<span class="token operator">/</span>SayHello<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Modal <span class="token punctuation">}</span> from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>antd<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">ShowModal</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> changeVisible<span class="token punctuation">,</span> visible <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>Modal
          title<span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>Basic Modal<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>
          visible<span class="token operator">=</span><span class="token punctuation">{</span>visible<span class="token punctuation">}</span>
        onOk<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token function">changeVisible</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
          onCancel<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token function">changeVisible</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
      <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
          <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>p<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>Some contents<span class="token operator">...</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>p<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
          <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>p<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>Some contents<span class="token operator">...</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>p<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
          <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>p<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>Some contents<span class="token operator">...</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>p<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
      <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>Modal<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">SayHello</span><span class="token punctuation">(</span>ShowHook<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就可以轻松的控制弹窗的显示隐藏；实际效果如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/76c919c0bc3146a389355209ad6dda8f~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><h3 id="_3-useimperativehandle-refs-转发-react-forwardref" tabindex="-1"><a class="header-anchor" href="#_3-useimperativehandle-refs-转发-react-forwardref" aria-hidden="true">#</a> 3.useImperativeHandle &amp; Refs 转发 (React.forwardRef)</h3>`,36),b={href:"https://zh-hans.reactjs.org/docs/refs-and-the-dom.html",target:"_blank",rel:"noopener noreferrer"},h=t(`<p>它可以将子组件的方法暴露给父组件使用。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 父组件 ShowHook.js</span>
<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>react<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> SayHello from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token operator">/</span>SayHello<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">ShowHook</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
  showChild <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//可以看到 changeVisible 方法被挂载到了 this.child 下</span>
    <span class="token comment">// {changeVisible: f()}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>child<span class="token punctuation">.</span><span class="token function">changeVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 将子组件暴露出来的对象挂载到 child</span>
  onRef <span class="token operator">=</span> <span class="token punctuation">(</span>ref<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>child <span class="token operator">=</span> ref<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>React<span class="token punctuation">.</span>Fragment<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
          <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>showChild<span class="token punctuation">}</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>showChild<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>butotn<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>SayHello
          ref<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>onRef<span class="token punctuation">}</span>
        <span class="token operator">/</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
      <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>React<span class="token punctuation">.</span>Fragment<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 子组件 SayHello.js</span>
<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useImperativeHandle<span class="token punctuation">,</span> forwardRef <span class="token punctuation">}</span> from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>react<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">SayHello</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> ref</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>visible<span class="token punctuation">,</span> changeVisible<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment">// 暴露的子组件方法，给父组件调用</span>
  <span class="token function">useImperativeHandle</span><span class="token punctuation">(</span>ref<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      changeVisible<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> visible <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> <span class="token punctuation">(</span>
    <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>h1 onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token function">changeVisible</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> Hello Hook<span class="token operator">!</span> <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>h1<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">forwardRef</span><span class="token punctuation">(</span>SayHello<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面例子中封装了一个子组件，任意一个使用了该子组件的地方都可以控制它的状态。</p><h2 id="结束语" tabindex="-1"><a class="header-anchor" href="#结束语" aria-hidden="true">#</a> 结束语</h2><p>目前 Hooks 尚不具备完整的 Class Component 的功能，一些不常用的生命周期函数尚不支持，例如：<code>getSnapshotBeforeUpdate</code>, <code>getDerivedStateFromError</code> 以及 <code>componentDidCatch</code>，但官方已将他们 排入计划内，相信不久之后就会得到支持；未来 Hooks 可能将成为 React Components 的首选，在现阶段就让我们愉快的混合使用吧。</p><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,6),f={href:"https://infinum.com/the-capsized-eight/how-to-use-react-hooks-in-class-components",target:"_blank",rel:"noopener noreferrer"},g={href:"https://juejin.cn/post/6844903624691154952",target:"_blank",rel:"noopener noreferrer"},y={href:"https://reactjs.org/docs/hooks-faq.html",target:"_blank",rel:"noopener noreferrer"},w=n("h2",{id:"推荐阅读",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#推荐阅读","aria-hidden":"true"},"#"),s(" 推荐阅读")],-1),_={href:"https://juejin.cn/post/6887580440803311630",target:"_blank",rel:"noopener noreferrer"},H={href:"https://juejin.cn/post/6892728697082609672",target:"_blank",rel:"noopener noreferrer"},C=n("h2",{id:"招贤纳士",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#招贤纳士","aria-hidden":"true"},"#"),s(" 招贤纳士")],-1),j=n("p",null,"政采云前端团队（ZooTeam），一个年轻富有激情和创造力的前端团队，隶属于政采云产品研发部，Base 在风景如画的杭州。团队现有 40 余个前端小伙伴，平均年龄 27 岁，近 3 成是全栈工程师，妥妥的青年风暴团。成员构成既有来自于阿里、网易的“老”兵，也有浙大、中科大、杭电等校的应届新人。团队在日常的业务对接之外，还在物料体系、工程平台、搭建平台、性能体验、云端应用、数据分析及可视化等方向进行技术探索和实战，推动并落地了一系列的内部技术产品，持续探索前端技术体系的新边界。",-1),x=n("p",null,[s("如果你想改变一直被事折腾，希望开始能折腾事；如果你想改变一直被告诫需要多些想法，却无从破局；如果你想改变你有能力去做成那个结果，却不需要你；如果你想改变你想做成的事需要一个团队去支撑，但没你带人的位置；如果你想改变既定的节奏，将会是“5 年工作时间 3 年工作经验”；如果你想改变本来悟性不错，但总是有那一层窗户纸的模糊… 如果你相信相信的力量，相信平凡人能成就非凡事，相信能遇到更好的自己。如果你希望参与到随着业务腾飞的过程，亲手推动一个有着深入的业务理解、完善的技术体系、技术创造价值、影响力外溢的前端团队的成长历程，我觉得我们该聊聊。任何时间，等着你写点什么，发给 "),n("code",null,"ZooTeam@cai-inc.com")],-1),S=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9731edcd18814d519e02a5d02bbac340~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1);function R(V,M){const a=l("ExternalLinkIcon");return e(),c("div",null,[u,n("p",null,[s("> 这是第 78 篇不掺水的原创，想获取更多原创好文，请搜索公众号关注我们吧~ 本文首发于政采云前端博客："),n("a",r,[s("“混合双打”之如何在 Class Components 中使用 React Hooks "),p(a)])]),k,d,n("p",null,[s("React 在 v16.8.0 版本中推出了 Hook，作为纯函数组件的增强，给函数组件带来了状态、上下文等等；之前一篇关于 React Hooks 的文章介绍了如何使用一些官方钩子和如何自建钩子，如果想要了解这些内容的同学可以点击"),n("a",m,[s("这里"),p(a)]),s("。")]),v,n("p",null,[s("Ref 转发是一项将 "),n("a",b,[s("Ref"),p(a)]),s(" 自动地通过组件传递到其一子组件的技巧。对于大多数应用中的组件来说，这通常不是必需的，但其对某些组件，尤其是可重用的组件库是很有用的。")]),h,n("p",null,[n("a",f,[s("How to Use React Hooks in Class Components"),p(a)])]),n("p",null,[n("a",g,[s("React拾遗：Render Props及其使用场景"),p(a)])]),n("p",null,[n("a",y,[s("Hooks FAQ"),p(a)])]),w,n("p",null,[n("a",_,[s("如何从 0 到 1 搭建性能检测系统"),p(a)])]),n("p",null,[n("a",H,[s("结合阿里云 FC 谈谈我对 FaaS 的理解"),p(a)])]),C,j,x,S])}const z=o(i,[["render",R],["__file","“混合双打”之如何在 Class Components 中使用 React Hooks .html.vue"]]);export{z as default};
