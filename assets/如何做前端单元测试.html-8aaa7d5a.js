import{_ as e,z as o,A as c,Y as n,C as s,U as t,a6 as p,Q as i}from"./framework-cb9358d9.js";const l={},u=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d4eb6a01e6564840817b127265b07edd~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1),r=n("p",null,[n("img",{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4113fdf670474f9ba9fe759014c25163~tplv-k3u1fbpfcp-watermark.image?",alt:"莫疾.png"})],-1),k={href:"https://zoo.team/article/unit-testing",target:"_blank",rel:"noopener noreferrer"},d=p('<h1 id="如何做前端单元测试" tabindex="-1"><a class="header-anchor" href="#如何做前端单元测试" aria-hidden="true">#</a> 如何做前端单元测试</h1><p>对于现在的前端工程，一个标准完整的项目，通常情况单元测试是非常必要的。但很多时候我们只是完成了项目而忽略了项目测试。我认为其中一个很大的原因是很多人对单元测试认知不够，因此我写了这边文章，一方面期望通过这篇文章让你对单元测试有一个初步认识。另一个方面希望通过代码示例，让你掌握写单元测试实践能力。</p><h2 id="前端为什么需要单元测试" tabindex="-1"><a class="header-anchor" href="#前端为什么需要单元测试" aria-hidden="true">#</a> 前端为什么需要单元测试？</h2><ol><li><p>必要性：JavaScript 缺少类型检查，编译期间无法定位到错误，单元测试可以帮助你测试多种异常情况。</p></li><li><p>正确性：测试可以验证代码的正确性，在上线前做到心里有底。</p></li><li><p>自动化：通过 console 虽然可以打印出内部信息，但是这是一次性的事情，下次测试还需要从头来过，效率不能得到保证。通过编写测试用例，可以做到一次编写，多次运行。</p></li><li><p>保证重构：互联网行业产品迭代速度很快，迭代后必然存在代码重构的过程，那怎么才能保证重构后代码的质量呢？有测试用例做后盾，就可以大胆的进行重构。</p></li></ol><h2 id="现状" tabindex="-1"><a class="header-anchor" href="#现状" aria-hidden="true">#</a> <strong>现状</strong></h2><p>下面是一份抽样调查片段，抽样依据如下：</p>',6),m={href:"https://www.wjx.cn/vm/Ombu9q1.aspx",target:"_blank",rel:"noopener noreferrer"},v=n("li",null,[n("p",null,"数据收集日期：2021.09.21—2021.10.08")],-1),b=n("li",null,[n("p",null,"目标群体：所有开发人员")],-1),y=n("li",null,[n("p",null,"组织规模：不到 50 人，50 到 100人， 100人以上")],-1),g=n("p",null,[n("strong",null,"你执行过 JavaScript 单元测试吗？")],-1),h=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5a611bf561fe4832bd970174dba19570~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1),f=n("p",null,"调查中的另一个有趣的见解是，在大型组织中单元测试更受欢迎。其中一个原因可能是，由于大型组织需要处理大规模的产品，以及频繁的功能迭代吧。这种持续的迭代方式，迫使他们进行自动化测试的投入。更具体地说，单元测试有助于增强产品的整体质量。",-1),x=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ec510ca934674d2cbf5122c1be624f3c~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1),j=n("p",null,"另外，报告显示超 80% 人认为单元测试可以有效的提高质量，超 60% 人使用过 Jest 去编写前端单元测试，超 40% 的人认为单元测试覆盖率是重要的且覆盖率应该大于 80%。",-1),w=n("h2",{id:"常见单元测试工具",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#常见单元测试工具","aria-hidden":"true"},"#"),s(" 常见单元测试工具")],-1),_={href:"https://mochajs.cn/",target:"_blank",rel:"noopener noreferrer"},q={href:"https://www.jestjs.cn/",target:"_blank",rel:"noopener noreferrer"},I={href:"https://www.npmtrends.com/jest-vs-mocha",target:"_blank",rel:"noopener noreferrer"},E=p(`<p><strong>Github stars &amp; issues</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2503db5d23b94b7abe491f2a2d9100d0~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p><strong>npm 下载量</strong></p><p>Jest的下载量较大，一部分原因是因为 create-react-app 脚手架默认内置了Jest, 而大部分 react 项目都是用它生成的。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/743401dde89f427d816e73f7451b4364~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>从 github starts &amp; issues 以及 npm 下载量角度来看，Jest 的关注度更高，社区也更活跃</p><h4 id="框架对比" tabindex="-1"><a class="header-anchor" href="#框架对比" aria-hidden="true">#</a> 框架对比</h4><table><thead><tr><th>框架</th><th>断言</th><th>异步</th><th>代码覆盖率</th></tr></thead><tbody><tr><td>Mocha</td><td>不支持（需要其他库支持）</td><td>友好</td><td>不支持（需要其他库支持）</td></tr><tr><td>Jest</td><td>默认支持</td><td>友好</td><td>支持</td></tr></tbody></table><ul><li>Mocha 生态好，但是需要较多的配置来实现高扩展性</li><li>Jest 开箱即用</li></ul><p><strong>比如对 sum 函数写用例</strong></p><p><code>./sum.js</code></p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> sum<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Mocha + Chai 方式</strong></p><p>Mocha 需要引入 chai 或则其他断言库去断言, 如果你需要查看覆盖率报告你还需要安装 nyc 或者其他覆盖率工具</p><p><code>./test/sum.test.js</code></p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> expect<span class="token punctuation">,</span> assert <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token entity" title="&#39;">&amp;#39;</span>chai<span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> sum <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>sum<span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token entity" title="&#39;">&amp;#39;</span>sum<span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token entity" title="&#39;">&amp;#39;</span>adds <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span> to equal <span class="token number">3</span><span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span> <span class="token punctuation">{</span>
    <span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Jest 方式</strong></p><p>Jest 默认支持断言，同时默认支持覆盖率测试</p><p><code>./test/sum.test.js</code></p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> sum <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">.</span><span class="token operator">/</span>sum<span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token entity" title="&#39;">&amp;#39;</span>sum <span class="token keyword">function</span> test<span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span> <span class="token punctuation">{</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token entity" title="&#39;">&amp;#39;</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">3</span><span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span> <span class="token punctuation">{</span>
    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token comment">// 这里 test 和 it 没有明显区别，it 是指: it should xxx, test 是指 test xxx</span>
  <span class="token function">test</span><span class="token punctuation">(</span><span class="token entity" title="&#39;">&amp;#39;</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">3</span><span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span> <span class="token punctuation">{</span>
    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可见无论是受欢迎度和写法上，Jest 都有很大的优势，因此推荐你使用开箱即用的 Jest</p><h2 id="如何开始" tabindex="-1"><a class="header-anchor" href="#如何开始" aria-hidden="true">#</a> 如何开始？</h2><h3 id="_1-安装依赖" tabindex="-1"><a class="header-anchor" href="#_1-安装依赖" aria-hidden="true">#</a> 1.安装依赖</h3><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>npm install <span class="token operator">--</span>save<span class="token operator">-</span>dev jest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-简单的例子" tabindex="-1"><a class="header-anchor" href="#_2-简单的例子" aria-hidden="true">#</a> 2.简单的例子</h3><p>首先，创建一个 sum.js 文件</p><p><code>./sum.js</code></p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> sum<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建一个名为 sum.test.js 的文件，这个文件包含了实际测试内容：</p><p><code>./test/sum.test.js</code></p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> sum <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>sum<span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token entity" title="&#39;">&amp;#39;</span>adds <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span> to equal <span class="token number">3</span><span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span> <span class="token punctuation">{</span>
  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将下面的配置部分添加到你的 package.json 里面</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token punctuation">{</span>
  <span class="token entity named-entity" title="&quot;">&amp;quot;</span>scripts<span class="token entity named-entity" title="&quot;">&amp;quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token entity named-entity" title="&quot;">&amp;quot;</span>test<span class="token entity named-entity" title="&quot;">&amp;quot;</span><span class="token operator">:</span> <span class="token entity named-entity" title="&quot;">&amp;quot;</span>jest<span class="token entity named-entity" title="&quot;">&amp;quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行 npm run test ，jest 将打印下面这个消息</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7b7d53cbd1934021af12d8fbfb96d7d9~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><h3 id="_3-不支持部分-es6-语法" tabindex="-1"><a class="header-anchor" href="#_3-不支持部分-es6-语法" aria-hidden="true">#</a> 3.不支持部分 ES6 语法</h3><p>nodejs 采用的是 CommonJS 的模块化规范，使用 require 引入模块；而 import 是 ES6 的模块化规范关键字。想要使用 import，必须引入 babel 转义支持，通过 babel 进行编译，使其变成 node 的模块化代码</p><p>如以下文件改写成 ES6 写法后，运行 npm run test将会报错</p><p><code>./sum.js</code></p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>./test/sum.test.js</code></p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> sum <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>sum<span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token entity" title="&#39;">&amp;#39;</span>adds <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span> to equal <span class="token number">3</span><span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span> <span class="token punctuation">{</span>
  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>报错</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/141e956853454069b92038cc1893bc3a~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>为了能使用这些新特性，我们就需要使用 babel 把 ES6 转成 ES5 语法</p><h4 id="解决办法" tabindex="-1"><a class="header-anchor" href="#解决办法" aria-hidden="true">#</a> 解决办法</h4><p>安装依赖</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>npm install <span class="token operator">--</span>save<span class="token operator">-</span>dev @babel<span class="token operator">/</span>core @babel<span class="token operator">/</span>preset<span class="token operator">-</span>env
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>根目录加入.babelrc</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token punctuation">{</span>   <span class="token entity named-entity" title="&quot;">&amp;quot;</span>presets<span class="token entity named-entity" title="&quot;">&amp;quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token entity named-entity" title="&quot;">&amp;quot;</span>@babel<span class="token operator">/</span>preset<span class="token operator">-</span>env<span class="token entity named-entity" title="&quot;">&amp;quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>再次运行 npm run test ，问题解决</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/62ca1c6788164683bee1536fbef433fa~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><h4 id="原理" tabindex="-1"><a class="header-anchor" href="#原理" aria-hidden="true">#</a> 原理</h4><p>jest 运行时内部先执行(jest-babel), 检测是否安装 babel-core, 然后取 .babelrc 中的配置, 运行测试之前结合 babel 先把测试用例代码转换一遍然后再进行测试</p><h3 id="_4-测试-ts-文件" tabindex="-1"><a class="header-anchor" href="#_4-测试-ts-文件" aria-hidden="true">#</a> 4.测试 ts 文件</h3><p>jest 需要借助 .babelrc 去解析 TypeScript 文件再进行测试</p><p><strong>安装依赖</strong></p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>npm install <span class="token operator">--</span>save<span class="token operator">-</span>dev @babel<span class="token operator">/</span>preset<span class="token operator">-</span>typescript
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>**改写 **.babelrc</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token punctuation">{</span>   <span class="token entity named-entity" title="&quot;">&amp;quot;</span>presets<span class="token entity named-entity" title="&quot;">&amp;quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token entity named-entity" title="&quot;">&amp;quot;</span>@babel<span class="token operator">/</span>preset<span class="token operator">-</span>env<span class="token entity named-entity" title="&quot;">&amp;quot;</span><span class="token punctuation">,</span> <span class="token entity named-entity" title="&quot;">&amp;quot;</span>@babel<span class="token operator">/</span>preset<span class="token operator">-</span>typescript<span class="token entity named-entity" title="&quot;">&amp;quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>为了解决编辑器对 jest 断言方法的类型报错，如 test、expect 的报错，你还需要安装</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>npm install <span class="token operator">--</span>save<span class="token operator">-</span>dev @types<span class="token operator">/</span>jest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>./get.ts</code></p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">/**
 * 访问嵌套对象，避免代码中出现类似 user &amp;amp;&amp;amp; user.personalInfo ? user.personalInfo.name : null 的代码
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token keyword">get</span><span class="token entity named-entity" title="&lt;">&amp;lt;</span><span class="token constant">T</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span><span class="token punctuation">(</span>object<span class="token operator">:</span> any<span class="token punctuation">,</span> <span class="token literal-property property">path</span><span class="token operator">:</span> Array<span class="token entity named-entity" title="&lt;">&amp;lt;</span>number <span class="token operator">|</span> string<span class="token entity named-entity" title="&gt;">&amp;gt;</span><span class="token punctuation">,</span> defaultValue<span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span> obj <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> object<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> result <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> result <span class="token operator">:</span> defaultValue<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>./test/get.test.ts</code></p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> get <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token keyword">get</span><span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token entity" title="&#39;">&amp;#39;</span>测试嵌套对象存在的可枚举属性 line1<span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span> <span class="token punctuation">{</span>
  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">101</span><span class="token punctuation">,</span>
    <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token entity" title="&#39;">&amp;#39;</span>jack@dev<span class="token punctuation">.</span>com<span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">personalInfo</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token entity" title="&#39;">&amp;#39;</span>Jack<span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">address</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">line1</span><span class="token operator">:</span> <span class="token entity" title="&#39;">&amp;#39;</span>westwish st<span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">line2</span><span class="token operator">:</span> <span class="token entity" title="&#39;">&amp;#39;</span>washmasher<span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token entity" title="&#39;">&amp;#39;</span>wallas<span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token entity" title="&#39;">&amp;#39;</span><span class="token constant">WX</span><span class="token entity" title="&#39;">&amp;#39;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token entity" title="&#39;">&amp;#39;</span>personalInfo<span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">,</span> <span class="token entity" title="&#39;">&amp;#39;</span>address<span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">,</span> <span class="token entity" title="&#39;">&amp;#39;</span>line1<span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token entity" title="&#39;">&amp;#39;</span>westwish st<span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行 npm run test</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1ed0fbf19aa74ffb90a64b1c8d35868a~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><h3 id="_5-持续监听" tabindex="-1"><a class="header-anchor" href="#_5-持续监听" aria-hidden="true">#</a> 5.持续监听</h3><p>为了提高效率，可以通过加启动参数的方式让 jest 持续监听文件的修改，而不需要每次修改完再重新执行测试用例</p><p>改写 package.json</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token entity named-entity" title="&quot;">&amp;quot;</span>scripts<span class="token entity named-entity" title="&quot;">&amp;quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>     <span class="token entity named-entity" title="&quot;">&amp;quot;</span>test<span class="token entity named-entity" title="&quot;">&amp;quot;</span><span class="token operator">:</span> <span class="token entity named-entity" title="&quot;">&amp;quot;</span>jest <span class="token operator">--</span>watchAll<span class="token entity named-entity" title="&quot;">&amp;quot;</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>效果</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4b98692cb1ea4819b68528195bb8fe64~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><h3 id="_5-生成测试覆盖率报告" tabindex="-1"><a class="header-anchor" href="#_5-生成测试覆盖率报告" aria-hidden="true">#</a> 5.生成测试覆盖率报告</h3><h4 id="什么是单元测试覆盖率" tabindex="-1"><a class="header-anchor" href="#什么是单元测试覆盖率" aria-hidden="true">#</a> 什么是单元测试覆盖率？</h4><p>单元测试覆盖率是一种软件测试的度量指标，指在所有功能代码中，完成了单元测试的代码所占的比例。有很多自动化测试框架工具可以提供这一统计数据，其中最基础的计算方式为：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>单元测试覆盖率 <span class="token operator">=</span> 被测代码行数 <span class="token operator">/</span> 参测代码总行数 <span class="token operator">*</span> <span class="token number">100</span><span class="token operator">%</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="如何生成" tabindex="-1"><a class="header-anchor" href="#如何生成" aria-hidden="true">#</a> 如何生成？</h4><p>加入<code> jest.config.js</code> 文件</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// 是否显示覆盖率报告</span>
  <span class="token literal-property property">collectCoverage</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token comment">// 告诉 jest 哪些文件需要经过单元测试测试</span>
  <span class="token literal-property property">collectCoverageFrom</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token entity" title="&#39;">&amp;#39;</span>get<span class="token punctuation">.</span>ts<span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">,</span> <span class="token entity" title="&#39;">&amp;#39;</span>sum<span class="token punctuation">.</span>ts<span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">,</span> <span class="token entity" title="&#39;">&amp;#39;</span>src<span class="token operator">/</span>utils<span class="token comment">/**/</span><span class="token operator">*</span><span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>再次运行效果</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/87c77b541e88407ab0e83604604ade54~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p><strong>参数解读</strong></p><table><thead><tr><th>参数名</th><th>含义</th><th>说明</th></tr></thead><tbody><tr><td>% stmts</td><td>语句覆盖率</td><td>是不是每个语句都执行了？</td></tr><tr><td>% Branch</td><td>分支覆盖率</td><td>是不是每个 if 代码块都执行了？</td></tr><tr><td>% Funcs</td><td>函数覆盖率</td><td>是不是每个函数都调用了？</td></tr><tr><td>% Lines</td><td>行覆盖率</td><td>是不是每一行都执行了？</td></tr></tbody></table><p><strong>设置单元测试覆盖率阀值</strong></p><p>个人认为既然在项目中集成了单元测试，那么非常有必要关注单元测试的质量，而覆盖率则一定程度上客观的反映了单测的质量，同时我们还可以通过设置单元测试阀值的方式提示用户是否达到了预期质量。</p><p><code>jest.config.js</code> 文件</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">collectCoverage</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 是否显示覆盖率报告</span>
  <span class="token literal-property property">collectCoverageFrom</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token entity" title="&#39;">&amp;#39;</span>get<span class="token punctuation">.</span>ts<span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">,</span> <span class="token entity" title="&#39;">&amp;#39;</span>sum<span class="token punctuation">.</span>ts<span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">,</span> <span class="token entity" title="&#39;">&amp;#39;</span>src<span class="token operator">/</span>utils<span class="token comment">/**/</span><span class="token operator">*</span><span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 告诉 jest 哪些文件需要经过单元测试测试</span>
  <span class="token literal-property property">coverageThreshold</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">global</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">statements</span><span class="token operator">:</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token comment">// 保证每个语句都执行了</span>
      <span class="token literal-property property">functions</span><span class="token operator">:</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token comment">// 保证每个函数都调用了</span>
      <span class="token literal-property property">branches</span><span class="token operator">:</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token comment">// 保证每个 if 等分支代码都执行了</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述阀值要求我们的测试用例足够充分，如果我们的用例没有足够充分，则下面的报错将会帮助你去完善</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9e84a847c0f84068989c930eafd7bfe0~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><h3 id="_6-如何编写单元测试" tabindex="-1"><a class="header-anchor" href="#_6-如何编写单元测试" aria-hidden="true">#</a> 6.如何编写单元测试</h3><p>下面我们以 fetchEnv 方法作为案例，编写一套完整的单元测试用例供读者参考</p><h4 id="编写-fetchenv-方法" tabindex="-1"><a class="header-anchor" href="#编写-fetchenv-方法" aria-hidden="true">#</a> 编写 fetchEnv 方法</h4><p><code>./src/utils/fetchEnv.ts</code> 文件</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">/**
 * 环境参数枚举
 */</span>
 <span class="token keyword">enum</span> IEnvEnum <span class="token punctuation">{</span>
  <span class="token constant">DEV</span> <span class="token operator">=</span> <span class="token entity" title="&#39;">&amp;#39;</span>dev<span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">,</span> <span class="token comment">// 开发</span>
  <span class="token constant">TEST</span> <span class="token operator">=</span> <span class="token entity" title="&#39;">&amp;#39;</span>test<span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">,</span> <span class="token comment">// 测试</span>
  <span class="token constant">PRE</span> <span class="token operator">=</span> <span class="token entity" title="&#39;">&amp;#39;</span>pre<span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">,</span> <span class="token comment">// 预发</span>
  <span class="token constant">PROD</span> <span class="token operator">=</span> <span class="token entity" title="&#39;">&amp;#39;</span>prod<span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">,</span> <span class="token comment">// 生产</span>
<span class="token punctuation">}</span>

<span class="token comment">/**
 * 根据链接获取当前环境参数
 * @param {string?} url 资源链接
 * @returns {IEnvEnum} 环境参数
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">fetchEnv</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">url</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span><span class="token operator">:</span> IEnvEnum <span class="token punctuation">{</span>
  <span class="token keyword">const</span> envs <span class="token operator">=</span> <span class="token punctuation">[</span>IEnvEnum<span class="token punctuation">.</span><span class="token constant">DEV</span><span class="token punctuation">,</span> IEnvEnum<span class="token punctuation">.</span><span class="token constant">TEST</span><span class="token punctuation">,</span> IEnvEnum<span class="token punctuation">.</span><span class="token constant">PRE</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> envs<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span> url<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> IEnvEnum<span class="token punctuation">.</span><span class="token constant">PROD</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="编写对应的单元测试" tabindex="-1"><a class="header-anchor" href="#编写对应的单元测试" aria-hidden="true">#</a> 编写对应的单元测试</h4><p><code>./test/fetchEnv.test.ts</code> 文件</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> fetchEnv <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>src<span class="token operator">/</span>utils<span class="token operator">/</span>fetchEnv<span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">;</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token entity" title="&#39;">&amp;#39;</span>fetchEnv<span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span> <span class="token punctuation">{</span>
  <span class="token function">it</span> <span class="token punctuation">(</span><span class="token entity" title="&#39;">&amp;#39;</span>判断是否 dev 环境<span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span> <span class="token punctuation">{</span>
    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">fetchEnv</span><span class="token punctuation">(</span><span class="token entity" title="&#39;">&amp;#39;</span><span class="token literal-property property">https</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>imooc<span class="token punctuation">.</span>dev<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token entity" title="&#39;">&amp;#39;</span>dev<span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">it</span> <span class="token punctuation">(</span><span class="token entity" title="&#39;">&amp;#39;</span>判断是否 test 环境<span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span> <span class="token punctuation">{</span>
    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">fetchEnv</span><span class="token punctuation">(</span><span class="token entity" title="&#39;">&amp;#39;</span><span class="token literal-property property">https</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>imooc<span class="token punctuation">.</span>test<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token entity" title="&#39;">&amp;#39;</span>test<span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">it</span> <span class="token punctuation">(</span><span class="token entity" title="&#39;">&amp;#39;</span>判断是否 pre 环境<span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span> <span class="token punctuation">{</span>
    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">fetchEnv</span><span class="token punctuation">(</span><span class="token entity" title="&#39;">&amp;#39;</span><span class="token literal-property property">https</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>imooc<span class="token punctuation">.</span>pre<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token entity" title="&#39;">&amp;#39;</span>pre<span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">it</span> <span class="token punctuation">(</span><span class="token entity" title="&#39;">&amp;#39;</span>判断是否 prod 环境<span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span> <span class="token punctuation">{</span>
    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">fetchEnv</span><span class="token punctuation">(</span><span class="token entity" title="&#39;">&amp;#39;</span><span class="token literal-property property">https</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>imooc<span class="token punctuation">.</span>prod<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token entity" title="&#39;">&amp;#39;</span>prod<span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">it</span> <span class="token punctuation">(</span><span class="token entity" title="&#39;">&amp;#39;</span>判断是否 prod 环境<span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span> <span class="token punctuation">{</span>
    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">fetchEnv</span><span class="token punctuation">(</span><span class="token entity" title="&#39;">&amp;#39;</span><span class="token literal-property property">https</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>imooc<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token entity" title="&#39;">&amp;#39;</span>prod<span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="执行结果" tabindex="-1"><a class="header-anchor" href="#执行结果" aria-hidden="true">#</a> 执行结果</h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/730a1ccd69ce461bafd4a5581356d43c~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><h3 id="_7-常用断言方法" tabindex="-1"><a class="header-anchor" href="#_7-常用断言方法" aria-hidden="true">#</a> 7.常用断言方法</h3>`,102),B={href:"https://www.jestjs.cn/docs/expect",target:"_blank",rel:"noopener noreferrer"},A=p(`<p><strong>.not 修饰符允许你测试结果不等于某个值的情况</strong></p><p><code>./test/sum.test.js</code></p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> sum <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">.</span><span class="token operator">/</span>sum<span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token entity" title="&#39;">&amp;#39;</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> 不等于 <span class="token number">5</span><span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span> <span class="token punctuation">{</span>
  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>.toEqual 匹配器会递归的检查对象所有属性和属性值是否相等，常用来检测引用类型</strong></p><p><code>./src/utils/userInfo.js</code></p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">export</span> <span class="token keyword">const</span> getUserInfo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token entity" title="&#39;">&amp;#39;</span>moji<span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">24</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>./test/userInfo.test.js</code></p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> getUserInfo <span class="token punctuation">}</span>  <span class="token keyword">from</span> <span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>src<span class="token operator">/</span>userInfo<span class="token punctuation">.</span>js<span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token entity" title="&#39;">&amp;#39;</span><span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>返回的对象深度相等<span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span> <span class="token punctuation">{</span>
  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token entity" title="&#39;">&amp;#39;</span><span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>返回的对象内存地址不同<span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span> <span class="token punctuation">{</span>
  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>.toHaveLength 可以很方便的用来测试字符串和数组类型的长度是否满足预期</strong></p><p><code>./src/utils/getIntArray.js</code></p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">export</span> <span class="token keyword">const</span> getIntArray <span class="token operator">=</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token entity" title="&#39;">&amp;#39;</span><span class="token entity named-entity" title="&quot;">&amp;quot;</span>getIntArray<span class="token entity named-entity" title="&quot;">&amp;quot;</span>只接受整数类型的参数<span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>./test/getIntArray.test.js</code></p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token punctuation">.</span><span class="token operator">/</span>test<span class="token operator">/</span>getIntArray<span class="token punctuation">.</span>test<span class="token punctuation">.</span>js
<span class="token keyword">import</span> <span class="token punctuation">{</span> getIntArray <span class="token punctuation">}</span>  <span class="token keyword">from</span> <span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>src<span class="token operator">/</span>utils<span class="token operator">/</span>getIntArray<span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token entity" title="&#39;">&amp;#39;</span><span class="token function">getIntArray</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>返回的数组长度应该为<span class="token number">3</span><span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span> <span class="token punctuation">{</span>
  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">getIntArray</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveLength</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>.toThorw 能够让我们测试被测试方法是否按照预期抛出异常</strong></p><p>但是需要注意的是：我们必须使用一个函数将被测试的函数做一个包装，正如下面 getIntArrayWrapFn 所做的那样，否则会因为函数抛出错误导致该断言失败。</p><p><code>./test/getIntArray.test.js</code></p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> getIntArray <span class="token punctuation">}</span>  <span class="token keyword">from</span> <span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>src<span class="token operator">/</span>utils<span class="token operator">/</span>getIntArray<span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token entity" title="&#39;">&amp;#39;</span><span class="token function">getIntArray</span><span class="token punctuation">(</span><span class="token number">3.3</span><span class="token punctuation">)</span>应该抛出错误<span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token function">getIntArrayWrapFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">getIntArray</span><span class="token punctuation">(</span><span class="token number">3.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token function">expect</span><span class="token punctuation">(</span>getIntArrayWrapFn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toThrow</span><span class="token punctuation">(</span><span class="token entity" title="&#39;">&amp;#39;</span><span class="token entity named-entity" title="&quot;">&amp;quot;</span>getIntArray<span class="token entity named-entity" title="&quot;">&amp;quot;</span>只接受整数类型的参数<span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>.toMatch 传入一个正则表达式，它允许我们来进行字符串类型的正则匹配</strong></p><p><code>./test/userInfo.test.js</code></p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> getUserInfo <span class="token punctuation">}</span>  <span class="token keyword">from</span> <span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>src<span class="token operator">/</span>utils<span class="token operator">/</span>userInfo<span class="token punctuation">.</span>js<span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token entity named-entity" title="&quot;">&amp;quot;</span><span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name 应该包含<span class="token entity" title="&#39;">&amp;#39;</span>mo<span class="token entity" title="&#39;">&amp;#39;</span><span class="token entity named-entity" title="&quot;">&amp;quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span> <span class="token punctuation">{</span>
  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMatch</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">mo</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>测试异步函数</strong></p><p><code>./servers/fetchUser.js</code></p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">/** 
 * 获取用户信息
*/</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> fetchUser <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resole<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span> <span class="token punctuation">{</span>
      <span class="token function">resole</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token entity" title="&#39;">&amp;#39;</span>moji<span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">24</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>./test/fetchUser.test.js</code></p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> fetchUser <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>src<span class="token operator">/</span>fetchUser<span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token entity" title="&#39;">&amp;#39;</span><span class="token function">fetchUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 可以请求到一个用户名字为 moji<span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span>  <span class="token keyword">await</span> <span class="token function">fetchUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">expect</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token entity" title="&#39;">&amp;#39;</span>moji<span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里你可能看到这样一条报错</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/db2f1cf16fe845e0b80021f12ba66fb1~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>这是因为<code>@babel/preset-env </code>不支持 async await 导致的，这时候就需要对 babel 配置进行增强，可以安装 <code>@babel/plugin-transform-runtime</code> 这个插件解决</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>npm install <span class="token operator">--</span>save<span class="token operator">-</span>dev @babel<span class="token operator">/</span>plugin<span class="token operator">-</span>transform<span class="token operator">-</span>runtime
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>同时改写 .babelrc</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token punctuation">{</span>
  <span class="token entity named-entity" title="&quot;">&amp;quot;</span>presets<span class="token entity named-entity" title="&quot;">&amp;quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token entity named-entity" title="&quot;">&amp;quot;</span>@babel<span class="token operator">/</span>preset<span class="token operator">-</span>env<span class="token entity named-entity" title="&quot;">&amp;quot;</span><span class="token punctuation">,</span> <span class="token entity named-entity" title="&quot;">&amp;quot;</span>@babel<span class="token operator">/</span>preset<span class="token operator">-</span>typescript<span class="token entity named-entity" title="&quot;">&amp;quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token entity named-entity" title="&quot;">&amp;quot;</span>plugins<span class="token entity named-entity" title="&quot;">&amp;quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token entity named-entity" title="&quot;">&amp;quot;</span>@babel<span class="token operator">/</span>plugin<span class="token operator">-</span>transform<span class="token operator">-</span>runtime<span class="token entity named-entity" title="&quot;">&amp;quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次运行就不会出现报错了</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9b5ddd1a51bd40c0b10dc99bc33eb382~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p><strong>.toContain 匹配对象中是否包含</strong></p><p><code>./test/toContain.test.js</code></p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token entity" title="&#39;">&amp;#39;</span>liam<span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">,</span> <span class="token entity" title="&#39;">&amp;#39;</span>jim<span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">,</span> <span class="token entity" title="&#39;">&amp;#39;</span>bart<span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token entity" title="&#39;">&amp;#39;</span>匹配对象是否包含<span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span> <span class="token punctuation">{</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span><span class="token entity" title="&#39;">&amp;#39;</span>jim<span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>检查一些特殊的值（null，undefined 和 boolean）</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>toBeNull 仅匹配 <span class="token keyword">null</span>
toBeUndefined 仅匹配 <span class="token keyword">undefined</span>
toBeDefined 与…相反 toBeUndefined
toBeTruthy 匹配 <span class="token keyword">if</span> 语句视为 <span class="token boolean">true</span> 的任何内容
toBeFalsy 匹配 <span class="token keyword">if</span> 语句视为 <span class="token boolean">false</span> 的任何内容

检查数字类型（number）
toBeGreaterThan 大于
toBeGreaterThanOrEqual 至少（大于等于）
toBeLessThan 小于
toBeLessThanOrEqual 最多（小于等于）
toBeCloseTo 用来匹配浮点数（带小数点的相等）

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>以上就是文章全部内容，相信你阅读完这篇文章后，已经掌握了前端单元测试的基本知识，甚至可以按照文章教学步骤，现在就可以在你的项目中接入单元测试。同时在阅读过程中如果你有任何问题，或者有更好见解，更好的框架推荐，欢迎你在评论区留言！</p><p>也许在你阅读这篇文章之前，你本身就已掌握前端单元测试技能了，甚至已经是这个领域的大牛了，那么首先我感到非常荣幸，同时也诚恳的邀请你在评论区提出宝贵意见，我在这里提前说声谢谢！</p><p>最后感谢你在百忙之中抽出时间阅读这篇文章，送人玫瑰，手有余香，如果你觉得文章对你有所帮助，希望可以帮我点个赞！</p><h2 id="参考文献" tabindex="-1"><a class="header-anchor" href="#参考文献" aria-hidden="true">#</a> 参考文献</h2>`,43),z={href:"https://juejin.cn/post/6844903624301084680",target:"_blank",rel:"noopener noreferrer"},T={href:"https://www.jestjs.cn/docs/getting-started",target:"_blank",rel:"noopener noreferrer"},U=n("h2",{id:"推荐阅读",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#推荐阅读","aria-hidden":"true"},"#"),s(" 推荐阅读")],-1),J=n("ul",null,[n("li",null,'[sketch插件开发指南](https://juejin.cn/post/7033911797279096845 "sketch插件开发指南")'),n("li",null,'[在 Vue 中为什么不推荐用 index 做 key](https://juejin.cn/post/7026119446162997261 "在 Vue 中为什么不推荐用 index 做 key")'),n("li",null,'[浅析Web录屏技术方案与实现](https://juejin.cn/post/7028723258019020836 "浅析Web录屏技术方案与实现")')],-1),C=n("h2",{id:"开源作品",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#开源作品","aria-hidden":"true"},"#"),s(" 开源作品")],-1),S=n("ul",null,[n("li",null,"政采云前端小报")],-1),V={href:"https://www.zoo.team/openweekly/",target:"_blank",rel:"noopener noreferrer"},F=n("ul",null,[n("li",null,"商品选择 sku 插件")],-1),M={href:"https://github.com/zcy-inc/skuPathFinder-back",target:"_blank",rel:"noopener noreferrer"},P=n("h2",{id:"招贤纳士",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#招贤纳士","aria-hidden":"true"},"#"),s(" 招贤纳士")],-1),L=n("p",null,"政采云前端团队（ZooTeam），一个年轻富有激情和创造力的前端团队，隶属于政采云产品研发部，Base 在风景如画的杭州。团队现有 60 余个前端小伙伴，平均年龄 27 岁，近 4 成是全栈工程师，妥妥的青年风暴团。成员构成既有来自于阿里、网易的“老”兵，也有浙大、中科大、杭电等校的应届新人。团队在日常的业务对接之外，还在物料体系、工程平台、搭建平台、性能体验、云端应用、数据分析及可视化等方向进行技术探索和实战，推动并落地了一系列的内部技术产品，持续探索前端技术体系的新边界。",-1),N=n("p",null,[s("如果你想改变一直被事折腾，希望开始能折腾事；如果你想改变一直被告诫需要多些想法，却无从破局；如果你想改变你有能力去做成那个结果，却不需要你；如果你想改变你想做成的事需要一个团队去支撑，但没你带人的位置；如果你想改变既定的节奏，将会是“5 年工作时间 3 年工作经验”；如果你想改变本来悟性不错，但总是有那一层窗户纸的模糊… 如果你相信相信的力量，相信平凡人能成就非凡事，相信能遇到更好的自己。如果你希望参与到随着业务腾飞的过程，亲手推动一个有着深入的业务理解、完善的技术体系、技术创造价值、影响力外溢的前端团队的成长历程，我觉得我们该聊聊。任何时间，等着你写点什么，发给 "),n("code",null,"ZooTeam@cai-inc.com")],-1),W=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/98d3aa3d1f8646a8bcda8cfd9e335a4b~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1);function D(O,R){const a=i("ExternalLinkIcon");return o(),c("div",null,[u,r,n("p",null,[s("> 这是第 125 篇不掺水的原创，想获取更多原创好文，请搜索公众号关注我们吧~ 本文首发于政采云前端博客："),n("a",k,[s("如何做前端单元测试"),t(a)])]),d,n("ul",null,[n("li",null,[n("p",null,[s("向 200 名相关者发出在线问卷调查，其中 70 人回答了问卷中的问题，前端人数占 81.16%，如果你有兴趣的话，也可以帮我填一下"),n("a",m,[s("调查问卷"),t(a)])])]),v,b,y]),g,h,f,x,j,w,n("p",null,[s("目前用的最多的前端单元测试框架主要有 "),n("a",_,[s("Mocha"),t(a)]),s("、"),n("a",q,[s("Jest"),t(a)]),s("，但我推荐你使用 Jest, 因为 Jest 和 Mocha 相比，无论从 github starts & issues 量，npm下载量相比，都有明显优势。")]),n("p",null,[s("github stars 以及 npm 下载量的实时数据，参见："),n("a",I,[s("jest vs mocha"),t(a)]),s(" 截图日期为 2021.11.25")]),E,n("p",null,[s("关于断言方法有很多，这里仅摘出常用方法，如果你想了解更多，你可以去 "),n("a",B,[s("Jest 官网 API"),t(a)]),s("部分查看")]),A,n("p",null,[n("a",z,[s("浅谈前端单元测试"),t(a)])]),n("p",null,[n("a",T,[s("Jest 官方文档"),t(a)])]),U,J,C,S,n("p",null,[n("strong",null,[s("开源地址 "),n("a",V,[s("www.zoo.team/openweekly/"),t(a)])]),s(" (小报官网首页有微信交流群)")]),F,n("p",null,[n("strong",null,[s("开源地址 "),n("a",M,[s("https://github.com/zcy-inc/skuPathFinder-back/"),t(a)])])]),P,L,N,W])}const H=e(l,[["render",D],["__file","如何做前端单元测试.html.vue"]]);export{H as default};
