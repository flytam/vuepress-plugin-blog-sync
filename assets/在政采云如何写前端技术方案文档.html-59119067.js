import{_ as n,z as r,A as c,Y as e,C as t,U as p,a6 as a,Q as s}from"./framework-cb9358d9.js";const d={},i=e("p",null,[e("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d4eb6a01e6564840817b127265b07edd~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1),l=e("p",null,[e("img",{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/049ed55db26e442c8521f2f8e77b78ea~tplv-k3u1fbpfcp-watermark.image?",alt:"牧羊.png"})],-1),h={href:"https://zoo.team/article/web-docsify",target:"_blank",rel:"noopener noreferrer"},u=a('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>百度百科对计算机软件的的定义为：“计算机软件( Software，也称软件)是指计算机系统中的程序及其文档，程序是计算任务的处理对象和处理规则的描述；文档是为了便于了解程序所需的阐明性资料。程序必须装入机器内部才能工作，文档一般是给人看的，不一定装入机器”。</p><p>可以看到概念里提到了&quot;文档&quot;，说明写文档是软件开发过程必不可少的一个环节，如果文档没有写好，那么软件也不能算是优秀的软件。</p><p>可对于一般软件开发人员来讲，写代码要比写文字容易得多。很多时候我们都能看到类似的事情，项目做完了，设计文档还没有；当别人问起，某个功能当时为什么这么设计，一时语塞；项目代码里没有注释，时间长了，自己都忘记当时代码为什么要这么写；当接手别人的项目的时候，要排查个问题只能一行行读代码，唯一的文档就是随脚手架自动生成的 <code>README.md</code>。以上这些都是我们平时开发中可能会遇到的问题，为什么会这样？其实就是因为平时没有写文档的习惯，文字没有得以保留，只靠记忆，时间长了确实记不住。</p><p>下文就想和大家一起探讨一下，前端为什么写技术方案，怎么写前端技术方案。</p><h2 id="写技术方案目的" tabindex="-1"><a class="header-anchor" href="#写技术方案目的" aria-hidden="true">#</a> 写技术方案目的</h2><p>在讲为什么要写前端方案文档前，先讲一个我的好朋友小明的故事。</p><p>小明也是一个前端，在接到需求的时候，他会大致看一下需求文档，感觉没有什么太大的问题，然后就看看交互、视觉稿上有哪些页面，接下来就开始迫不及待地写代码了。</p><p>新建一个文件、写模板、写样式、写交互逻辑，一气呵成。新模块的需求是小明最喜欢的，因为不用去理解其它功能的逻辑，可工作中还是少不了维护历史代码。小明很聪明，他发现有个功能加个参数传过去做个逻辑判断就能实现，于是他也就这么做了。</p><p>开发完后，小明觉得很满意，因为很快就实现了需求，代码在脑中的逻辑比较清晰，里面也许有些地方写的不太妥当，但是也无妨吧。虽然不是<strong>全局最优</strong>的，但可以说是<strong>局部最优</strong>的。</p><p>版本提测之后，QA 开始针对各种边界问题和极端场景给小明提 bug。譬如输入框输入 <code>emoji</code> 表情后提交接口报错、按钮连续点击触发了多次请求、买家角色页面展示正常但是供应商角色展示错误……</p><p>在改 bug 的过程中小明渐渐带上了痛苦面具，代码逻辑被改的支离破碎，不得不为代码打各种补丁，方法的参数加了一个又一个，逻辑里的条件判断加了又加。到这个时候小明的开发积极性已经被消磨的差不多了，开始对 QA 提出的 bug 表示质疑，他会用“原来就是这么设计的呀”、“这个问题不在这次的需求范围内”等等这样的说辞来避免对代码的更改。</p><p>过了一段时间，小明又接到一个需求，需要对上次开发的模块增加一些功能。翻开代码的时候，小明整个人都崩溃了。以前代码的逻辑自己早就忘记了，面对自己已经看不懂的代码，开始对自己进行灵魂拷问“这个方法有什么用？这个方法怎么有这么多参数？为什么逻辑这么复杂？”，“代码在不同页面之间跳来跳去，还有长得几乎一模一样的代码，他们的逻辑到底是什么样的？”，“为什么会有这么多标识位，这么多魔法数字，他们都是干嘛的？”。注释什么的是不存在的，即使存在，也不明白在讲些什么。</p><p>刚接手项目的时候小明还不断吐槽之前开发的人不写文档、不写注释，没过多久小明也成了别人口中的那个&quot;他&quot;。</p><p>以上故事根据真实事件改编。</p><p>我觉得写技术方案文档是能解决小明的一部分问题的，“谋定而后动，三思而后行”，都是在说这个道理。当然写文档也不是万能。对比一下后端，会发现他们在写代码之前都会做方案设计，好像难道后端的开发时间很充裕或者说前端的技术方案不值一提吗？肯定不是。方案设计是软件工程里的一个最佳实践，通常做技术方案的过程中会体现出软件整体的架构，当对核心流程梳理完成之后，最后基本都能落实到代码上。也就是说好的技术方案能体现出最后代码的逻辑，通过看方案就能知道代码怎么写。这样就防止了在写代码过程中边写边改，最后导致代码结构混乱的问题。</p><h2 id="怎么写技术方案" tabindex="-1"><a class="header-anchor" href="#怎么写技术方案" aria-hidden="true">#</a> 怎么写技术方案</h2><p>如果我们按照后端那一套方法论和模板来做前端方案设计，发现根本写不出来什么内容，这时候我们要重新审视方案设计的套路，来发现前后端的不同。</p><p>业务模型可能前后端都是一致的，毕竟我们是解决同一个业务问题。但其中也有稍许差别，前端有些数据不是从后端获取的，或者说不一定非要从后端获取，这点我们需要在做设计的时候考虑进去。譬如同一个 H5 页面在微信公众号内和钉钉内需要展示不同的主题色。</p><p>前后端对于核心流程的定义也不同，对于后端来说核心流程是数据的产生、流转、消费，但是提到流程，在前端来说更多的是页面的流转、组件的交互、用户的操作。同样一件事情，在前后端来看完全是两个东西，比如保存一项数据，后端需要关注的可能是如何校验、如何存储、如何索引、如何关联。但前端要关注的却是校验接口的出入参、校验结果的展现形式如何、是跳转还是覆盖或者弹窗、不同屏幕和设备下如何适配。</p><p>后端更注重逻辑架构与部署图，因为后端需要为服务化，服务间边界的定义要非常清晰、具体。前端与微服务对应的，应该就是组件了，但是组件覆盖的范围太广，从一个按钮到一个页面都可以称之为组件，甚至现在比较火热的微前端中的一个子应用也可以成为一个组件，所以前端的组件需要被划分成页面、模块、控件等不同封装层次的单元。在这个划分的过程中，逻辑架构自然体现出来了。同时前后端解决的问题不同，导致关注点也不同，前端需要关注页面的还原，比如页面的元素应该如何抽象，样式应该如何复用，这个是后端不用考虑的。</p><p>接口可不仅仅是 <code>http</code> 请求，任何与其它模块交互逻辑都应该明确其入参和出参。后端需要关注暴露出去的 <code>dubbo</code> 或者 <code>http</code> 接口，因为这体现了系统间交互的逻辑。而对于前端来说对应的也应该明确独立模块或者页面之间的交互逻辑，所以也就需要明确这些&quot;接口&quot;。</p><p>关于实施方案，前后端的关注点也有稍许不同，后端更关心系统之间的集成，旧数据的兼容。而前端应该关心的是桌面设备和移动设备的区别，或者微信、支付宝等不同渠道的集成。</p><p>对比之后前端技术方案的脉络渐渐清晰起来。结合上面的方法论，下面就实际案例讲解一下。</p><h2 id="技术方案的案例" tabindex="-1"><a class="header-anchor" href="#技术方案的案例" aria-hidden="true">#</a> 技术方案的案例</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/303634109a8b4bd6bb2a781968214d13~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>在政采云产研团队的研发流程中，前端方案设计是在需求和交互评审之后、测试评审和正式开发之前，属于<strong>需求阶段</strong>和<strong>开发阶段</strong>的中间节点。此时需求的功能和用户交互场景基本已经确定，前后端技术方案之间互相补充描述清楚需求的可行性、整体架构和具体实现。同时在测试分析之前，也是帮助 QA 梳理测试重点和用例场景。</p><p><strong>第一章，概述一</strong>。般会简单描述项目的背景和价值，做一件事情的意义或者说动机是很重要的，一般从需求文档里进行概括即可。然后解释后面文档中需要用到的一些专有名词，达成大家对一些名词的共识是很重要的。</p><p><strong>第二章，相关文档</strong>。收集版本开发的相关文档，这样开发的时候只要通过这一个前端技术方案文档，就能找到所有的文档，有时候我也会把这些网页整理到一个浏览器书签文件夹里。</p><p><strong>第三章，任务拆解</strong>。主要描述开发任务归属、预计工时，还有里程碑。</p><p>估时是按照页面维度，拆分页面内主要功能，进行时间估算，时间估算按照静态 demo 和 JS 交互来分别评估会准一些。之后得出时间乘以一个 1.3 的系数（因为每周还会有不同的会议、沟通也会占用时间）。</p><p>时间评估的时候，像下图一样，本地花点时间列一下 —— 这样的好处是一便于统计和比对，看有无遗漏；二评估出的时间，给到业务方、PM 等，会对我们有职业化上的认可——会认为这样的评估粒度，时间是准确的你这个人是靠谱的；另外，细粒度的维度，也便于业务方寻找需求最长路径，看需求或者走迭代也方便做出判断。</p><p><img src="https://www.zoo.team/images/upload/upload_914ba2a38cd20b129d4ae90cfd54e0da.png" alt=""></p><p>**第四章，总体设计。**列举开发规范，还有逻辑架构。一图胜千言，有关时序的逻辑强烈建议用图来代替。流程图、时序图、状态图，让你的技术方案文档<s>逼格满满</s>清晰明了。</p><p><img src="https://www.zoo.team/images/upload/upload_72f7ac56153b20f2e2d0da6b7b8766e9.png" alt=""></p><p>下图为页面跳转逻辑图，如果交互有缺失的话，前端技术方案里可以进行补位</p><p><img src="https://www.zoo.team/images/upload/upload_af91dcf9805c009dd45c4f4a4dfff45e.png" alt=""></p><p>**第五章，详细设计。**这一章就是整篇技术方案的重点了，包括功能说明、流程说明、模块详细设计、外部依赖等四个小节。</p><p>最完美的状态，就是如下图所示，这一部分写完了，代码也跃然于纸上了。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9377f03c65424ff389a24bf3d7751470~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>也可以适量地贴一些代码，可以很好地在技术分析的时候阐述清楚改动点</p><p><img src="https://www.zoo.team/images/upload/upload_3ea42e79d3d9d2f89e7839591f045ef3.png" alt=""></p><p>下图为下单流程卡券选择时序图。复杂的时序逻辑已经不是文字能说的清的了，时序图让交互更清晰</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a2f4e7dc67694c6592ecde67281d306a~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>下图为前端组件入参设计的案例，开源组件库写的都不错，可以直接参考。</p><p><img src="https://www.zoo.team/images/upload/upload_092dcd451ee29e2683302c99634aa010.png" alt=""></p><p>最后三章可以写一写<strong>术分析</strong> <strong>Checklist、测试数据、遗留问题</strong></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fab93e4f32eb452995b3c2effaa8b5be~tplv-k3u1fbpfcp-watermark.image?" alt="7C48C9D3-1AFE-466E-B51B-2E08BD791303.png"></p>',48),f={href:"https://zcy-gov-open-doc.oss-cn-north-2-gov-1.aliyuncs.com/1072PT/999900/1000118622/202112/6d63e0d5-8d4f-417d-9046-c6c3abb18b0b",target:"_blank",rel:"noopener noreferrer"},g=e("p",null,"最后的最后推荐两个好用的画图工具：",-1),b={href:"https://plantuml.com/zh",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.draw.io",target:"_blank",rel:"noopener noreferrer"},_={href:"https://www.processon.com",target:"_blank",rel:"noopener noreferrer"},k=a('<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>首先得承认一个事实，写文档和写作一样是一件<strong>很费时费力</strong>的事情，为了画一个流程图、为了斟酌一个词语，可能就会纠结好久。其次文档是需要<strong>持续更新</strong>的，不是技术评审开完就封版了，视觉评审、测试分析评审、后续迭代都有可能影响技术方案，需要实时跟进。如果能把产品各个版本的技术方案文档进行整合，甚至能得到整个产品技术方案的全貌。</p><p>欲速则不达，很多人觉得技术方案是在延长开发周期，其实在政采云的落地过程中发现，技术方案设计的越详细，对质量提升，和维护成本降低效果明显，拉开很长周期来看，是加快了迭代周期</p><p>李开复老师在《浪潮之巅》的<strong>序言中</strong>说到：“我认识很多顶尖的工程师，但具备强大叙事能力的优秀工程师，我认识的可以说是凤毛麟角”。表达是软件开发工程师重要的软实力之一，作为软件工程的最佳实践，方案设计在前端开发过程中还是十分必要的，那么为什么前端领域长时间不注重这个事情呢，我觉得有以下原因：</p><ul><li>方案设计依赖技术能力，而前端技术栈变化太快，今天的设计套路放在明天可能就失效了；</li><li>前端业务变化太快，经过半年的迭代之后，可能第一版的方案就反应不出现有代码逻辑了；</li><li>前端的业务流程、交互流程比后端复杂太多，而且可复用性差，需要花费大量时间去思考和整理，而且对抽象能力有比较高的要求；</li><li>前端开发效率高，不会有历史包袱，有时候直接重写的效率反而更高；</li><li>后端上在语言和 <code>IDE</code> 对重构的支持远比前端好太多；</li><li>后端比较成熟了，比如常见的 <code>mvc</code> 分层都几乎是约定了，前端要不要 <code>model</code> 层，要不要 <code>service</code> 层都是要讨论的，要不要 <code>redux</code>，<code>redux</code> 存什么数据，每个人的理解不一样的；</li><li>前端人员的抽象思维和工程化能力总体还是比后端弱的； 但是这些原因其实都不是我们不做方案设计的理由，方案设计是个<strong>结构化思维</strong>的过程，他不光是能让项目更好执行，也能提升开发者本身的架构能力和宏观意识。我们要把自己做的东西展示出来，不光展示给同行看，可能还要展示给其他岗位上的工作人员看，甚至展示给用户看。如果我们只是会写程序，不会在文档中恰当且优雅地描述自己的想法，那么就真正的成为“码农”了。</li></ul><p>所以，同学们在平时开发的时候多想一想如何做设计吧。</p><h2 id="后续预告" tabindex="-1"><a class="header-anchor" href="#后续预告" aria-hidden="true">#</a> 后续预告</h2><p>技术方案有一部分功能实现是和后端一起制定的，每个人制定的前后端技术方案是否合理是不统一的，有没有更好的最佳实践呢？经过长期的实践和总结，政采云制定了前后端技术方案约定，示例如下，尽请期待。</p><p><img src="https://www.zoo.team/images/upload/upload_6ed031e0b872b08cba017958ade5e04b.png" alt=""></p><h2 id="推荐阅读" tabindex="-1"><a class="header-anchor" href="#推荐阅读" aria-hidden="true">#</a> 推荐阅读</h2><ul><li>[sketch插件开发指南](https://juejin.cn/post/7033911797279096845 &quot;sketch插件开发指南&quot;)</li><li>[在 Vue 中为什么不推荐用 index 做 key](https://juejin.cn/post/7026119446162997261 &quot;在 Vue 中为什么不推荐用 index 做 key&quot;)</li><li>[浅析Web录屏技术方案与实现](https://juejin.cn/post/7028723258019020836 &quot;浅析Web录屏技术方案与实现&quot;)</li></ul><h2 id="开源作品" tabindex="-1"><a class="header-anchor" href="#开源作品" aria-hidden="true">#</a> 开源作品</h2><ul><li>政采云前端小报</li></ul>',13),w={href:"https://www.zoo.team/openweekly/",target:"_blank",rel:"noopener noreferrer"},j=e("ul",null,[e("li",null,"商品选择 sku 插件")],-1),x={href:"https://github.com/zcy-inc/skuPathFinder-back",target:"_blank",rel:"noopener noreferrer"},z=e("h2",{id:"招贤纳士",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#招贤纳士","aria-hidden":"true"},"#"),t(" 招贤纳士")],-1),y=e("p",null,"政采云前端团队（ZooTeam），一个年轻富有激情和创造力的前端团队，隶属于政采云产品研发部，Base 在风景如画的杭州。团队现有 60 余个前端小伙伴，平均年龄 27 岁，近 4 成是全栈工程师，妥妥的青年风暴团。成员构成既有来自于阿里、网易的“老”兵，也有浙大、中科大、杭电等校的应届新人。团队在日常的业务对接之外，还在物料体系、工程平台、搭建平台、性能体验、云端应用、数据分析及可视化等方向进行技术探索和实战，推动并落地了一系列的内部技术产品，持续探索前端技术体系的新边界。",-1),v=e("p",null,[t("如果你想改变一直被事折腾，希望开始能折腾事；如果你想改变一直被告诫需要多些想法，却无从破局；如果你想改变你有能力去做成那个结果，却不需要你；如果你想改变你想做成的事需要一个团队去支撑，但没你带人的位置；如果你想改变既定的节奏，将会是“5 年工作时间 3 年工作经验”；如果你想改变本来悟性不错，但总是有那一层窗户纸的模糊… 如果你相信相信的力量，相信平凡人能成就非凡事，相信能遇到更好的自己。如果你希望参与到随着业务腾飞的过程，亲手推动一个有着深入的业务理解、完善的技术体系、技术创造价值、影响力外溢的前端团队的成长历程，我觉得我们该聊聊。任何时间，等着你写点什么，发给 "),e("code",null,"ZooTeam@cai-inc.com")],-1),q=e("p",null,[e("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/98d3aa3d1f8646a8bcda8cfd9e335a4b~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1);function E(B,A){const o=s("ExternalLinkIcon");return r(),c("div",null,[i,l,e("p",null,[t("> 这是第 126 篇不掺水的原创，想获取更多原创好文，请搜索公众号关注我们吧~ 本文首发于政采云前端博客："),e("a",h,[t("在政采云如何写前端技术方案文档"),p(o)])]),u,e("p",null,[t("最后附上政采云前端团队的前端技术方案模板，"),e("a",f,[t("戳这里"),p(o)]),t("。当然大家也可以根据自己的情况进行内容的增删。")]),g,e("ul",null,[e("li",null,[e("a",b,[t("plantuml"),p(o)]),t("：使用简单的文字描述画 UML 图")]),e("li",null,[e("a",m,[t("drawio"),p(o)]),t("：在线图标绘制网站 上面两个工具都有对应的 vscode 扩展。("),e("a",_,[t("processon"),p(o)]),t(" 也挺好用的，可惜免费版只能存 9 个图表)")])]),k,e("p",null,[e("strong",null,[t("开源地址 "),e("a",w,[t("www.zoo.team/openweekly/"),p(o)])]),t(" (小报官网首页有微信交流群)")]),j,e("p",null,[e("strong",null,[t("开源地址 "),e("a",x,[t("https://github.com/zcy-inc/skuPathFinder-back/"),p(o)])])]),z,y,v,q])}const C=n(d,[["render",E],["__file","在政采云如何写前端技术方案文档.html.vue"]]);export{C as default};
