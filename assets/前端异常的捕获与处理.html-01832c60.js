import{_ as p,z as e,A as o,Y as n,C as a,U as t,a6 as c,Q as l}from"./framework-cb9358d9.js";const i={},u=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9399a2cd262743e3bfc3814f22de0b00~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1),r={href:"https://zoo.team/article/catch-error",target:"_blank",rel:"noopener noreferrer"},k=c(`<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/90c7044064dc41b88dd33d531c94581a~tplv-k3u1fbpfcp-watermark.image" alt=""></p><p>按键无法点击、元素不展示、页面白屏，这些都是我们前端不想看到的场景。在计算机程序运行的过程中，也总是会出现各种各样的异常。下面就让我们聊一聊有哪些异常以及怎么处理它们。</p><h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p>什么是异常，异常就是预料之外的事件，往往影响了程序的正确运行。例如下面几种场景：</p><ul><li><p>页面元素异常（例如按钮无法点击、元素不展示）</p></li><li><p>页面卡顿</p></li><li><p>页面白屏</p></li></ul><p>这些情况都是极其影响用户体验的。对于前端来说，异常虽然不会导致计算机宕机，但是往往会导致用户的操作被阻塞。虽然异常不可完全杜绝，但是我们有充分的理由去理解异常、学习处理异常。</p><p>异常处理在程序设计中的重要性是毋庸置疑的。任何有影响力的 Web 应用程序都需要一套完善的异常处理机制，但实际上，通常只有服务端团队会在异常处理机制上投入较大精力。虽然客户端应用程序的异常处理也同样重要，但真正受到重视，还是最近几年的事。作为新世纪的杰出前端开发人员，我们必须理解有哪些异常，当发生异常时我们有哪些手段和工具可以利用。</p><h2 id="二、异常分类" tabindex="-1"><a class="header-anchor" href="#二、异常分类" aria-hidden="true">#</a> 二、异常分类</h2><p>从根本上来说，异常就是一个数据结构，它存了异常发生时相关信息，譬如错误码、错误信息等。其中 message 属性是唯一一个能够保证所有浏览器都支持的属性，除此之外，IE、Firefox、Safari、Chrome 以及 Opera 都为事件对象添加了其它相关信息。譬如 IE 添加了与 message 属性完全相同的 description 属性，还添加了保存这内部错误数量的 number 属性。Firefox 添加了 fileName、lineNumber 和 stack（包含堆栈属性）。所以，在考虑浏览器兼容性时，最好还是只使用 message 属性。</p><p>执行 JS 期间可能会发生的错误有很多类型。每种错误都有对应的错误类型，而当错误发生的时候就会抛出响应的错误对象。ECMA-262 中定义了下列 7 种错误类型：</p><ul><li>Error：错误的基类，其他错误都继承自该类型</li><li>EvalError：Eval 函数执行异常</li><li>RangeError：数组越界</li><li>ReferenceError：尝试引用一个未被定义的变量时，将会抛出此异常</li><li>SyntaxError：语法解析不合理</li><li>TypeError：类型错误，用来表示值的类型非预期类型时发生的错误</li><li>URIError：以一种错误的方式使用全局 URI 处理函数而产生的错误</li></ul><h2 id="三、异常处理" tabindex="-1"><a class="header-anchor" href="#三、异常处理" aria-hidden="true">#</a> 三、异常处理</h2><p>ECMA-262 第 3 版中引入了 try-catch 语句，作为 JavaScript 中处理异常的一种标准方式，基本的语法如下所示。这和 Java 中的 try-catch 语句是全完相同的。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token comment">// 可能会导致错误的代码</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 在错误发生时怎么处理</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果 try 块中的任何代码发生了错误，就会立即退出代码执行过程，然后执行 catch 块。此时 catch 块会接收到一个包含错误信息的对象，这个对象中包含的信息因浏览器而异，但共同的是有一个保存着错误信息的 message 属性。</p><p>finally 子句在 try-catch 语句中是可选的，但是 finally 子句一经使用，其代码无论如何都会执行。换句话说，try 语句块中代码全部正常执行，finally 子句会执行；如果因为出错执行了 catch 语句，finally 子句照样会执行。只要代码中包含 finally 子句，则无论 try 或 catch 语句中包含什么代码——甚至是 return 语句，都不会阻止 finally 子句执行。来看下面函数的执行结果：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> testFinally <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>出去玩<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>看电视<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>做作业<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>睡觉<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>表面上调用这个函数会返回 &quot;出去玩&quot;，因为返回 &quot;出去玩&quot; 的语句位于 try 语句块中，而执行此语句又不会出错。实际上返回 &quot;做作业&quot;，因为最后还有 finally 子句，结果就会导致 try 块里的 return 语句被忽略，也就是说调用的结果只能返回 &quot;做作业&quot;。如果把 finally 语句拿掉，这个函数将返回 &quot;出去玩&quot;。因此，在使用 finally 子句之前，一定要非常清楚你想让代码怎么样。（思考一下如果 catch 块和 finally 块都抛出异常，catch 块的异常是否能抛出）</p><p>但令人遗憾的是 ，try-catch 无法处理异步代码和一些其他场景。接下来让我具体分析几种异常场景及其处理方案。</p><h2 id="四、异常分析" tabindex="-1"><a class="header-anchor" href="#四、异常分析" aria-hidden="true">#</a> 四、异常分析</h2><h3 id="_1-js-代码错误" tabindex="-1"><a class="header-anchor" href="#_1-js-代码错误" aria-hidden="true">#</a> 1. JS 代码错误</h3><p>下面为我司内部错误监控平台一次日常报错的调用堆栈截图：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/acc5777078dc44e3946198dbd6716fd9~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>错误还是比较明显的，this 指向导致的问题。onOk 使用普通函数时，函数内执行语句的 this 上下文为 Antd.Modal 组件的实例，而 Antd.Modal 组件不存在 changeFilterType 这个方法。将 onOK 方法像 onCancel 方法一样改成箭头函数，将 this 指向父组件即可。</p><p><strong>TypeError</strong> 类型在 JavaScript 中会经常遇到，在变量中保存着意外类型时，或者在访问不存在的方法时，都会导致这种错误。错误的原因虽然多种多样，但归根结底还是由于在执行特定类型的操作时，变量的类型并不符合要求所致。再看几个例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> xiaoming <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>小明<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xiaoming<span class="token punctuation">.</span><span class="token function">dance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 抛出 TypeError</span>
xiaoming<span class="token punctuation">.</span>girlfriend<span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment">// 抛出 TypeError</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码错误一般在开发和测试阶段就能发现。用 try-catch 也能捕获到：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 代码</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
  xiaoming<span class="token punctuation">.</span>girlfriend<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xiaoming<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>没有女朋友<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 运行结果</span>
<span class="token comment">// 小明没有女朋友 TypeError: Cannot read property &amp;#39;name&amp;#39; of undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-js-语法错误" tabindex="-1"><a class="header-anchor" href="#_2-js-语法错误" aria-hidden="true">#</a> 2. JS 语法错误</h3><p>我们修改一下代码，我们把英文分号改成中文分号:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  xiaoming<span class="token punctuation">.</span>girlfriend<span class="token punctuation">.</span>name；<span class="token comment">// 结尾是中文分号</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xiaoming<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>没有女朋友<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 运行结果</span>
<span class="token comment">// Uncaught SyntaxError: Invalid or unexpected token</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>**SyntaxError **语法错误我们无法通过 try-catch 捕获到，不过语法错误在我们开发阶段就可以看到，应该不会顺利上到线上环境。</p><p>不过凡事总有例外，线上还是能收到一些语法错误的告警，但多半是 JSON 解析出错和浏览器兼容性导致。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a7397613cfef4cdeba99b442d101f465~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>再看几个例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span>xiaoming<span class="token punctuation">}</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// Uncaught SyntaxError: Unexpected token n in JSON at position 1</span>
<span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">{</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>name<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">:</span>xiaoming<span class="token punctuation">}</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Uncaught SyntaxError: Unexpected token x in JSON at position 8</span>
<span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">{</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>name<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">:</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>xiaoming<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 正常</span>
<span class="token keyword">var</span> <span class="token function">testFunc</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>             <span class="token comment">// 在 IE 下会抛出 SyntaxError，因为 IE 不支持箭头函数，需要通过Babel等工具事先转译下</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 JSON.parse 解析时出现异常就是一个很好的使用 try-catch 的场景：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>remoteData<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// remoteData 为服务端返回的数据</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>服务端数据格式返回异常，无法解析<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> remoteData<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>并不是捕获到错误就结束了，捕获到错误后，我们需要思考当错误发生时：</p><ul><li><p>错误是否是致命的，会不会导致其它连带错误</p></li><li><p>后续的代码逻辑还能不能继续执行，用户还能不能继续操作</p></li><li><p>是不是需要将错误信息反馈给用户，提示用户如何处理该错误</p></li><li><p>是不是需要将错误上报服务端</p></li></ul><p>对应上面的问题这里就会有很多解决方案了，譬如：</p><ol><li>如果是服务器未知异常导致，可以阻塞用户操作，弹窗提示用户&quot;服务器异常，请稍后重试&quot;。并提供给用户一个刷新的按钮；</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>remoteData<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Modal<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>服务器异常，请稍后重试<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>如果是数据异常导致，可阻塞用户操作，弹窗提示用户&quot;服务器异常，请联系客服处理~&quot;，同时将错误信息上报异常服务器，开发人员通过异常堆栈和用户埋点定位问题原因；</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>remoteData<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Modal<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>服务器异常，请联系客服处理<span class="token operator">~</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token constant">JSON</span>数据解析出现异常<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>如果数据解析出错属于预料之中的情况，也有替代的默认值，那么当解析出错时直接使用默认值也可以；</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>remoteData<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>服务端数据格式返回异常，使用本地缓存数据<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> erorr<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> localData<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>任何错误处理策略中最重要的一个部分，就是确定错误是否致命。</p><h3 id="_3-异步错误" tabindex="-1"><a class="header-anchor" href="#_3-异步错误" aria-hidden="true">#</a> 3. 异步错误</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
    <span class="token keyword">undefined</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>捕获到异常：<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
Uncaught TypeError<span class="token operator">:</span> Cannot read property <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>map<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span> <span class="token keyword">of</span> <span class="token keyword">undefined</span>
  at <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>anonymous<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token operator">:</span><span class="token number">3</span><span class="token operator">:</span><span class="token number">15</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>并没有捕获到异常，<code>try-catch</code> 对语法和异步错误却无能为力，捕获不到，这是需要我们特别注意的地方。</p><h2 id="五、异常捕获" tabindex="-1"><a class="header-anchor" href="#五、异常捕获" aria-hidden="true">#</a> 五、异常捕获</h2><h3 id="_5-1-window-onerror" tabindex="-1"><a class="header-anchor" href="#_5-1-window-onerror" aria-hidden="true">#</a> 5.1 window.onerror</h3><p>当 <code>JS</code> 运行时错误发生时，<code>window</code> 会触发一个 <code>ErrorEvent</code> 接口的 <code>error</code> 事件，并执行<code>window.onerror()</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span>  <span class="token parameter">message</span>    错误信息
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span>  <span class="token parameter">source</span>     出错文件
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Number<span class="token punctuation">}</span></span>  <span class="token parameter">lineno</span>     行号
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Number<span class="token punctuation">}</span></span>  <span class="token parameter">colno</span>      列号
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Object<span class="token punctuation">}</span></span>  <span class="token parameter">error</span>      Error对象（对象）
 */</span>
window<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">message<span class="token punctuation">,</span> source<span class="token punctuation">,</span> lineno<span class="token punctuation">,</span> colno<span class="token punctuation">,</span> error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>捕获到异常：<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> message<span class="token punctuation">,</span> source<span class="token punctuation">,</span> lineno<span class="token punctuation">,</span> colno<span class="token punctuation">,</span> error <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同步错误可以捕获到，但是，请注意 <code>window.error</code> 无法捕获静态资源异常和 JS 代码错误。</p><h3 id="_5-2-静态资源加载异常" tabindex="-1"><a class="header-anchor" href="#_5-2-静态资源加载异常" aria-hidden="true">#</a> 5.2 静态资源加载异常</h3><p><strong>方法一：onerror 来捕获</strong></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token entity named-entity" title="&lt;">&amp;lt;</span>script<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
  function errorHandler(error) {
    console.log(<span class="token entity named-entity" title="&quot;">&amp;quot;</span>捕获到静态资源加载异常<span class="token entity named-entity" title="&quot;">&amp;quot;</span>, error);
  }
<span class="token entity named-entity" title="&lt;">&amp;lt;</span>/script<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
<span class="token entity named-entity" title="&lt;">&amp;lt;</span>script src=<span class="token entity named-entity" title="&quot;">&amp;quot;</span>http://cdn.xxx.com/js/test.js<span class="token entity named-entity" title="&quot;">&amp;quot;</span> onerror=<span class="token entity named-entity" title="&quot;">&amp;quot;</span>errorHandler(this)<span class="token entity named-entity" title="&quot;">&amp;quot;</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span><span class="token entity named-entity" title="&lt;">&amp;lt;</span>/script<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
<span class="token entity named-entity" title="&lt;">&amp;lt;</span>link rel=<span class="token entity named-entity" title="&quot;">&amp;quot;</span>stylesheet<span class="token entity named-entity" title="&quot;">&amp;quot;</span> href=<span class="token entity named-entity" title="&quot;">&amp;quot;</span>http://cdn.xxx.com/styles/test.css<span class="token entity named-entity" title="&quot;">&amp;quot;</span> onerror=<span class="token entity named-entity" title="&quot;">&amp;quot;</span>errorHandler(this)<span class="token entity named-entity" title="&quot;">&amp;quot;</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样可以拿到静态资源的错误，但缺点很明显，代码的侵入性太强了，每一个静态资源标签都要加上 onerror 方法。</p><p><strong>方法二：addEventListener(&quot;error&quot;)</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>html lang<span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>zh<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
 
<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>head<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>meta charset<span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token constant">UTF</span><span class="token operator">-</span><span class="token number">8</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>meta name<span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>viewport<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span> content<span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>width<span class="token operator">=</span>device<span class="token operator">-</span>width<span class="token punctuation">,</span> initial<span class="token operator">-</span>scale<span class="token operator">=</span><span class="token number">1.0</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>title<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>error<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>title<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>script<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>error<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>捕获到异常：<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
  <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>script<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>head<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
 
<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>body<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>img src<span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>itemcdn<span class="token punctuation">.</span>zcycdn<span class="token punctuation">.</span>com<span class="token operator">/</span>15af41ec<span class="token operator">-</span>e6cb<span class="token operator">-</span><span class="token number">4478</span><span class="token operator">-</span>8fad<span class="token operator">-</span>1a47402f0f25<span class="token punctuation">.</span>png<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>body<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
 
<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>html<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于网络请求异常不会事件冒泡，因此必须在捕获阶段将其捕捉到才行，但是这种方式虽然可以捕捉到网络请求的异常，但是无法判断 HTTP 的状态是 404 还是其他比如 500 等等，所以还需要配合服务端日志才进行排查分析才可以。</p><h3 id="_5-3-promise-异常" tabindex="-1"><a class="header-anchor" href="#_5-3-promise-异常" aria-hidden="true">#</a> 5.3 Promise 异常</h3><p>Promise 中的异常不能被 try-catch 和 window.onerror 捕获，这时候我们就需要监听 unhandledrejection 来帮我们捕获这部分错误。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>unhandledrejection<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>捕获到 promise 错误了<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>错误的原因是<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>Promise 对象是<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>promise<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>promise error<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
  <span class="token function">reject</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>promise error<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>promise error<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-4-react-异常" tabindex="-1"><a class="header-anchor" href="#_5-4-react-异常" aria-hidden="true">#</a> 5.4 React 异常</h3><p>React 处理异常的方式不同。虽然 try-catch 适用于许多非普通 JavaScript 应用程序，但它只适用于命令式代码。因为 React 组件是声明性的，所以 try-catch 不是一个可靠的选项。为了弥补这一点，React 实现了所谓的错误边界。错误边界是 React 组件，它“捕获子组件树中的任何地方的 JavaScript 错误”，同时还记录错误并显示回退用户界面。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">ErrorBoundary</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">hasError</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">componentDidCatch</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> info</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 展示出错的UI</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">hasError</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 将错误信息上报到日志服务器</span>
    <span class="token function">logErrorToMyService</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>hasError<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 可以展示自定义的错误样式</span>
      <span class="token keyword">return</span> <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>h1<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>Something went wrong<span class="token punctuation">.</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>h1<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是需要注意的是， error boundaries 并不会捕捉下面这些错误：</p><ul><li><p>事件处理器</p></li><li><p>异步代码</p></li><li><p>服务端的渲染代码</p></li><li><p>在 error boundaries 区域内的错误</p></li></ul><p>我们可以这样使用 ErrorBoundary：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token entity named-entity" title="&lt;">&amp;lt;</span>ErrorBoundary<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
  <span class="token entity named-entity" title="&lt;">&amp;lt;</span>MyWidget /<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
<span class="token entity named-entity" title="&lt;">&amp;lt;</span>/ErrorBoundary
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-5-vue-异常" tabindex="-1"><a class="header-anchor" href="#_5-5-vue-异常" aria-hidden="true">#</a> 5.5 Vue 异常</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>errorHandler <span class="token operator">=</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> info<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>通过vue errorHandler捕获的错误<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-6-请求异常" tabindex="-1"><a class="header-anchor" href="#_5-6-请求异常" aria-hidden="true">#</a> 5.6 请求异常</h3><p>以最常用的 HTTP 请求库 axios 为例，模拟接口响应 401 的情况：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 请求</span>
axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">/</span>api<span class="token operator">/</span>test<span class="token operator">/</span><span class="token number">401</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span>
<span class="token comment">// 结果</span>
<span class="token function">Uncaught</span> <span class="token punctuation">(</span><span class="token keyword">in</span> promise<span class="token punctuation">)</span> Error<span class="token operator">:</span> Request failed <span class="token keyword">with</span> status code <span class="token number">401</span>
at <span class="token function">createError</span> <span class="token punctuation">(</span>axios<span class="token punctuation">.</span>js<span class="token operator">:</span><span class="token number">1207</span><span class="token punctuation">)</span>
at <span class="token function">settle</span> <span class="token punctuation">(</span>axios<span class="token punctuation">.</span>js<span class="token operator">:</span><span class="token number">1177</span><span class="token punctuation">)</span>
at XMLHttpRequest<span class="token punctuation">.</span><span class="token function">handleLoad</span> <span class="token punctuation">(</span>axios<span class="token punctuation">.</span>js<span class="token operator">:</span><span class="token number">1037</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出来 axios 的异常可以当做 Promise 异常来处理：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 请求</span>
axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">3000</span><span class="token operator">/</span>api<span class="token operator">/</span>uitest<span class="token operator">/</span>sentry<span class="token operator">/</span><span class="token number">401</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>接口请求成功<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>e <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>接口请求出错<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 结果</span>
接口请求出错 Error<span class="token operator">:</span> Request failed <span class="token keyword">with</span> status code <span class="token number">401</span>
at <span class="token function">createError</span> <span class="token punctuation">(</span>createError<span class="token punctuation">.</span>js<span class="token operator">:</span><span class="token number">17</span><span class="token punctuation">)</span>
at <span class="token function">settle</span> <span class="token punctuation">(</span>settle<span class="token punctuation">.</span>js<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">)</span>
at XMLHttpRequest<span class="token punctuation">.</span><span class="token function">handleLoad</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>js<span class="token operator">:</span><span class="token number">62</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一般接口 401 就代表用户未登录，就需要跳转到登录页，让用户进行重新登录，但如果每个请求方法都需要写一遍跳转登录页的逻辑就很麻烦了，这时候就会考虑使用 axios 的拦截器来做统一梳理，同理能统一处理的异常也可以在放在拦截器里处理。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Add a response interceptor</span>
axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>
  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Any status codes that falls outside the range of 2xx cause this function to trigger</span>
    <span class="token comment">// Do something with response error</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">401</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">goLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 跳转登录页</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">502</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">alert</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>message <span class="token operator">||</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>系统升级中，请稍后重试<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-7-总结" tabindex="-1"><a class="header-anchor" href="#_5-7-总结" aria-hidden="true">#</a> 5.7 总结</h3><p>异常一共七大类，处理时需分清是致命错误还是非致命错误。</p><ul><li><p>可疑区域增加 <code>try-catch</code></p></li><li><p>全局监控 <code>JS</code> 异常 <code>window.onerror</code></p></li><li><p>全局监控静态资源异常 <code>window.addEventListener</code></p></li><li><p>捕获没有 <code>catch</code> 的 <code>Promise</code> 异常用 <code>unhandledrejection</code></p></li><li><p><code>Vue errorHandler</code> 和 <code>React componentDidCatch</code></p></li><li><p><code>Axios</code> 请求统一异常处理用拦截器 <code>interceptors</code></p></li><li><p>使用日志监控服务收集用户错误信息</p></li></ul><h2 id="六、异常上报" tabindex="-1"><a class="header-anchor" href="#六、异常上报" aria-hidden="true">#</a> 六、异常上报</h2><p>即使我们前端开发完成后，会有一系列的 Web 应用的上线前的验证，如自测、QA 测试、code review 等，以确保应用能在生产上没有事故。</p><p>但是事与愿违，很多时候我们都会接到客户反馈的一些线上问题，这些问题有时候可能是你自己代码的问题。这样的问题一般能够在测试环境重现，我们很快的能定位到问题关键位置。但是，很多时候有一些问题，我们在测试中并未发现，可是在线上却有部分人出现了，问题确确实实存在的，这个时候我们测试环境又不能重现，还有一些偶现的生产的偶现问题，这些问题都很难定位到问题的原因，让我们前端工程师头疼不已。</p><p>而我们不可能每次都远程给用户解决问题，或者让用户按 F12 打开浏览器控制台把错误信息截图给我们吧。这时候，我们不得不借助一些工具来解决这一系列令人头疼的问题。</p><p>前端错误监控日志系统就应用而生。当前端代码在生产运行中出现错误的时候，第一时间传递给监控系统，从而第一时间定位并且解决问题。</p><p>有很多成熟的方案可供选择： ARMS、fundebug、BadJS、Sentry。政采云当前使用的是 Sentry 的开源版本，并结合业务进行一些改造：</p><ul><li>与构建系统结合，构建项目时自动生成 Sentry 项目，注入 Sentry 脚本</li><li>客服端注入 Sentry 客户端脚本后，按项目、页面等不同粒度配置告警事件的过滤规则</li><li>对接钉钉消息系统，将告警消息推送到订阅群</li><li>过滤接口错误和优化 Promise 错误上报信息</li></ul><p>后续也可以单开一篇介绍介绍，如何结合开源的错误监控系统，搭建具有公司特色的监控体系。</p><h2 id="推荐阅读" tabindex="-1"><a class="header-anchor" href="#推荐阅读" aria-hidden="true">#</a> 推荐阅读</h2>`,94),d={href:"https://juejin.cn/post/6924829595006926856",target:"_blank",rel:"noopener noreferrer"},m={href:"https://juejin.cn/post/6922225108094287880",target:"_blank",rel:"noopener noreferrer"},v=n("h2",{id:"招贤纳士",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#招贤纳士","aria-hidden":"true"},"#"),a(" 招贤纳士")],-1),b=n("p",null,"政采云前端团队（ZooTeam），一个年轻富有激情和创造力的前端团队，隶属于政采云产品研发部，Base 在风景如画的杭州。团队现有 40 余个前端小伙伴，平均年龄 27 岁，近 3 成是全栈工程师，妥妥的青年风暴团。成员构成既有来自于阿里、网易的“老”兵，也有浙大、中科大、杭电等校的应届新人。团队在日常的业务对接之外，还在物料体系、工程平台、搭建平台、性能体验、云端应用、数据分析及可视化等方向进行技术探索和实战，推动并落地了一系列的内部技术产品，持续探索前端技术体系的新边界。",-1),h=n("p",null,[a("如果你想改变一直被事折腾，希望开始能折腾事；如果你想改变一直被告诫需要多些想法，却无从破局；如果你想改变你有能力去做成那个结果，却不需要你；如果你想改变你想做成的事需要一个团队去支撑，但没你带人的位置；如果你想改变既定的节奏，将会是“5 年工作时间 3 年工作经验”；如果你想改变本来悟性不错，但总是有那一层窗户纸的模糊… 如果你相信相信的力量，相信平凡人能成就非凡事，相信能遇到更好的自己。如果你希望参与到随着业务腾飞的过程，亲手推动一个有着深入的业务理解、完善的技术体系、技术创造价值、影响力外溢的前端团队的成长历程，我觉得我们该聊聊。任何时间，等着你写点什么，发给 "),n("code",null,"ZooTeam@cai-inc.com")],-1),g=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/59889f426ff445dd9c2670d72d13daf5~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1);function y(f,q){const s=l("ExternalLinkIcon");return e(),o("div",null,[u,n("p",null,[a("> 这是第 89 篇不掺水的原创，想获取更多原创好文，请搜索公众号关注我们吧~ 本文首发于政采云前端博客："),n("a",r,[a("前端异常的捕获与处理"),t(s)])]),k,n("p",null,[n("a",d,[a("动态表单之表单组件的插件式加载方案"),t(s)])]),n("p",null,[n("a",m,[a("编写高质量可维护的代码：优雅命名"),t(s)])]),v,b,h,g])}const x=p(i,[["render",y],["__file","前端异常的捕获与处理.html.vue"]]);export{x as default};
