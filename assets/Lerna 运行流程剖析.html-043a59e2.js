import{_ as o,z as e,A as c,Y as n,C as s,U as p,a6 as t,Q as l}from"./framework-cb9358d9.js";const i={},u=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d4eb6a01e6564840817b127265b07edd~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1),r=n("p",null,[n("img",{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2cb253193982466c9be80b87af10e5bb~tplv-k3u1fbpfcp-watermark.image?",alt:"遇见.png"})],-1),k={href:"https://www.zoo.team/article/lerna-js",target:"_blank",rel:"noopener noreferrer"},d=t('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>随着前端组件、包库等工程体系发展，业务组件和工具库关系越来越复杂，非常容易遇到仓库多，库之间互相依赖。导致维护极其困难，发包过程非常繁琐，极大程度的限制了前端同学的开发效率。</p><p>此刻，出现了一种新的项目管理方式—— Monorepo。一个仓库管理多个项目。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8090e5d602a449f0b2915c714ce6a83c~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p><strong>MultiRepo</strong> 是目前常用的项目管理方式。但有些场景是不适用的，存在问题。</p><ul><li>多业务组件、互相依赖、无法复用</li><li>发包流程复杂、版本管理痛苦 此刻就有了 <strong>lerna.js</strong></li></ul><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>&gt;Lerna (lerna) is a tool that optimizes the workflow around managing multi-package repositories with git and npm.</p><p>Lerna 是一个优化基于 git + npm 的多 package 的项目管理工具。</p><h3 id="有哪些项目正在使用-ta" tabindex="-1"><a class="header-anchor" href="#有哪些项目正在使用-ta" aria-hidden="true">#</a> 有哪些项目正在使用 Ta ？</h3>',10),m={href:"https://github.com/vuejs/vue-cli",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/babel/babel",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/ElemeFE/mint-ui",target:"_blank",rel:"noopener noreferrer"},h=n("p",null,"......",-1),g=t('<h2 id="知识点" tabindex="-1"><a class="header-anchor" href="#知识点" aria-hidden="true">#</a> 知识点</h2><p>通过阅读本文，你将会学会下图内容：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7c863f5ea48e4ed392b744026e56982e~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><h2 id="使用与实践" tabindex="-1"><a class="header-anchor" href="#使用与实践" aria-hidden="true">#</a> 使用与实践</h2><h3 id="基本指令" tabindex="-1"><a class="header-anchor" href="#基本指令" aria-hidden="true">#</a> 基本指令</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/015200e02ad34efc8f843e8765ae2488~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p>',6),f={href:"https://lerna.js.org/",target:"_blank",rel:"noopener noreferrer"},w=t(`<p>下图是结构目录等。</p><p><img src="https://www.zoo.team/images/upload/upload_3011504daa8e2022a2fd333f2b5b4d5a.png" alt=""></p><h3 id="与工作区使用" tabindex="-1"><a class="header-anchor" href="#与工作区使用" aria-hidden="true">#</a> 与工作区使用</h3><p><img src="https://www.zoo.team/images/upload/upload_84440f02f90fafffb2af03963ea82c9b.png" alt=""></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// package.json 添加</span>
<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>workspaces<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">:</span><span class="token punctuation">[</span>
	<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>packages<span class="token comment">/*&amp;quot;
]
// lerna.json 添加
 &amp;quot;useWorkspaces&amp;quot;:true,
 &amp;quot;npmClient&amp;quot;: &amp;quot;yarn&amp;quot;,
 // 配置好后 所有依赖就会安装在最外层的 node_modules 中 且支持软链接方式
 // npm 7.x 之后 同样支持 工作区域
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>学习的过程中少不了查看实现过程和运行流程。 接下来我们分析一下 Lerna 中的一些代码，希望从中你能学到许多。</p><h2 id="原理剖析" tabindex="-1"><a class="header-anchor" href="#原理剖析" aria-hidden="true">#</a> 原理剖析</h2>`,7),y={href:"https://github.com/lerna/lerna",target:"_blank",rel:"noopener noreferrer"},_=t(`<p>观察一下目录</p><p><img src="https://www.zoo.team/images/upload/upload_a7b6773dbd750753bf29db51d14348e8.png" alt=""></p><h3 id="指令的初始化流程" tabindex="-1"><a class="header-anchor" href="#指令的初始化流程" aria-hidden="true">#</a> 指令的初始化流程</h3><p>脚手架入口文件位于 <strong>/core/lerna/cli.js</strong></p><p>&gt;<strong>core/lerna/cli.js 入口</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token hashbang comment">#!/usr/bin/env node</span>

<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>use strict<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">;</span>

<span class="token comment">/* eslint-disable import/no-dynamic-require, global-require */</span>
<span class="token keyword">const</span> importLocal <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token keyword">import</span><span class="token operator">-</span>local<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 判断是否处于本地包文件 下文会介绍</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">importLocal</span><span class="token punctuation">(</span>__filename<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">require</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>npmlog<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>cli<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>using local version <span class="token keyword">of</span> lerna<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
<span class="token comment">// 进入真实的入入口执行代码</span>
  <span class="token function">require</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [node, lerna, 指令]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如图一和代码入口的文件仅执行了一条判断语句 ，其目的是为了当项目的局部环境和全局环境都存在 lerna 时优先使用局部环境下的 lerna 代码</p><ul><li>import-local 一个判断是否本地包的方法库</li><li>require(&quot;.&quot;) 是导入当前目录下的 index.js 并传入指令执行代码 ( process.argv -&gt; [node, lerna, 指令] )</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0e0afa24ab0e40bf9c1fbfdab5733384~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>&gt;<strong>core/lerna/index.js 初始化</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/** 省略相同代码 */</span>

<span class="token comment">// 导入 @lerna/cli 文件 </span>
<span class="token keyword">const</span> cli <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>@lerna<span class="token operator">/</span>cli<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ..... 省略相同指令导入</span>
<span class="token comment">// 导入publish 指令文件</span>
<span class="token keyword">const</span> publishCmd <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>@lerna<span class="token operator">/</span>publish<span class="token operator">/</span>command<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> pkg <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token keyword">package</span><span class="token punctuation">.</span>json<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> main<span class="token punctuation">;</span>

<span class="token comment">// 最终导出方法</span>
<span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token parameter">argv</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">lernaVersion</span><span class="token operator">:</span> pkg<span class="token punctuation">.</span>version<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token function">cli</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// ..... 省略 </span>
    <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span>publishCmd<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>argv<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 解析注入 指令 &amp;amp; 参数(版本号) </span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>来到这个代码中，如图二和代码实际上做了这几件事</p><ul><li>初始化导入包 (&quot;@lerna/cli&quot;)—— cli 实例</li><li>导入所需要的指令文件</li><li>通过 cli 实例的 command 方法注册指令</li><li>parse(argv, context) 是执行<strong>解析注入</strong>指令 和 参数(版本号) 将 <strong>Cli | 指令 | 入参</strong> 进行模块划分，无论在业务中还是开源库中，都是一种优秀的划分方式</li></ul><p>&gt;<strong>core/cli/index.js 全局指令初始化</strong></p><p><img src="https://www.zoo.team/images/upload/upload_e3b63ad927aba389a42e8806ecc2c4a3.png" alt=""></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> dedent <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>dedent<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 去除空行</span>
<span class="token keyword">const</span> log <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>npmlog<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> yargs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>yargs<span class="token operator">/</span>yargs<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> globalOptions <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>@lerna<span class="token operator">/</span>global<span class="token operator">-</span>options<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> lernaCLI<span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">lernaCLI</span><span class="token punctuation">(</span><span class="token parameter">argv<span class="token punctuation">,</span> cwd</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> cli <span class="token operator">=</span> <span class="token function">yargs</span><span class="token punctuation">(</span>argv<span class="token punctuation">,</span> cwd<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token function">globalOptions</span><span class="token punctuation">(</span>cli<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">usage</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>Usage<span class="token operator">:</span> $0 <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>command<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">demandCommand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token constant">A</span> command is required<span class="token punctuation">.</span> Pass <span class="token operator">--</span>help to see all available commands and options<span class="token punctuation">.</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token comment">// 期望命令个数</span>
    <span class="token punctuation">.</span><span class="token function">recommendCommands</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 推荐命令</span>
    <span class="token punctuation">.</span><span class="token function">strict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 严格模式</span>
    <span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
     <span class="token comment">// ... 省略</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">alias</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>h<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>help<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token comment">// 别名</span>
    <span class="token punctuation">.</span><span class="token function">alias</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>v<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>version<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>cli<span class="token punctuation">.</span><span class="token function">terminalWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 宽高 </span>
	  <span class="token punctuation">.</span><span class="token function">epilogue</span><span class="token punctuation">(</span>dedent<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
      When a command fails, all logs are written to lerna-debug.log in the current working directory.
      For more information, find our manual at https://github.com/lerna/lerna
    </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 结尾</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看图三全局指令初始化，我们会发现全局指令接受实例的传入，也支持指令的注册。显然这也导出了改 cli 实例（单一实例）</p><ul><li>指令的注册使用了 yargs 包进行管理（yargs 不是本文重点，不赘述）</li><li>返回实例，全局指令注册 return 实例</li><li>Config 是基本的配置分组等</li><li>导出实例给 **core/lerna/index.js **调用 我们回到 <strong>core/lerna/index.js</strong> 文件，使用了 <strong>command</strong> 方法注册指令传入了导入的指令文件。</li></ul><p>&gt;<strong>commands/ 业务指令的注册</strong></p><p><img src="https://www.zoo.team/images/upload/upload_df83b291eddf68e97dac27ab9a8d1e06.png" alt=""></p><p>可以看到图 4 中 commands 文件包中有着所有 lerna 指令的注册文件，每个文件夹带着 command.js 和 index.js</p><p>在 **core/lerna/index.js **导入的都是该目录中的 <strong>command.js</strong> (同入口逻辑在 handler 中执行了该目录下的 index.js )</p><p>**command.js 包括 yargs 的 <strong>command</strong>、**aliases、describe、builder (执行前的参数操作)、handler (指令执行逻辑)</p><p>以 list 指令举例</p><ul><li>执行指令的逻辑的方法在 <strong>index.js</strong></li><li>继承 Command 做 指令的初始化</li><li>父类中会在 constructor 执行 initialize 和 execute 方法</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> Command <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>@lerna<span class="token operator">/</span>command<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> listable <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>@lerna<span class="token operator">/</span>listable<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> output <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>@lerna<span class="token operator">/</span>output<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> getFilteredPackages <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>@lerna<span class="token operator">/</span>filter<span class="token operator">-</span>options<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> factory<span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token parameter">argv</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ListCommand</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ListCommand</span> <span class="token keyword">extends</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>
  <span class="token keyword">get</span> <span class="token function">requiresGit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> chain <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    chain <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token function">getFilteredPackages</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>packageGraph<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>execOpts<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    chain <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>filteredPackages<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> listable<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>filteredPackages<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> chain<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// piping to \`wc -l\` should not yield 1 when no packages matched</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>result<span class="token punctuation">.</span>text<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">output</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>result<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>
      <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>found<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span>
      <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">%</span>d <span class="token operator">%</span>s<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>result<span class="token punctuation">.</span>count<span class="token punctuation">,</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>result<span class="token punctuation">.</span>count <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token keyword">package</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span> <span class="token operator">:</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>packages<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>ListCommand <span class="token operator">=</span> ListCommand<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>&gt;<strong>core/command/index.js 所有指令的 Command Class</strong></p><p><img src="https://www.zoo.team/images/upload/upload_1eab0295944cfa58fe4699a0a2432717.png" alt=""></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> Project <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>@lerna<span class="token operator">/</span>project<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 省略大部分容错 和 log</span>
<span class="token keyword">class</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">_argv</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> argv <span class="token operator">=</span> <span class="token function">cloneDeep</span><span class="token punctuation">(</span>_argv<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// &amp;quot;FooCommand&amp;quot; =&amp;gt; &amp;quot;foo&amp;quot;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">Command$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// composed commands are called from other commands, like publish -&amp;gt; version</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>composed <span class="token operator">=</span> <span class="token keyword">typeof</span> argv<span class="token punctuation">.</span>composed <span class="token operator">===</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>string<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span> <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> argv<span class="token punctuation">.</span>composed <span class="token operator">!==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>

    <span class="token comment">// launch the command</span>
    <span class="token keyword">let</span> runner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
      <span class="token comment">// run everything inside a Promise chain</span>
      <span class="token comment">// 异步链</span>
      <span class="token keyword">let</span> chain <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      chain <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>project <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Project</span><span class="token punctuation">(</span>argv<span class="token punctuation">.</span>cwd<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 配置、环境初始化等</span>
      chain <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">configureEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      chain <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">configureOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      chain <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">configureProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      chain <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">configureLogging</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      chain <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">runValidations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      chain <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">runPreparations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 最终执行逻辑</span>
      chain <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">runCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      chain<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>
        <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
          <span class="token function">warnIfHanging</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

          <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">.</span>pkg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// Cleanly log specific package error details</span>
            <span class="token function">logPackageError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">.</span>name <span class="token operator">!==</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>ValidationError<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// npmlog does some funny stuff to the stack by default,</span>
            <span class="token comment">// so pass it directly to avoid duplication.</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token function">cleanStack</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>

          <span class="token comment">// ValidationError does not trigger a log dump, nor do external package errors</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">.</span>name <span class="token operator">!==</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>ValidationError<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span> <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> <span class="token operator">!</span>err<span class="token punctuation">.</span>pkg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">writeLogFile</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>project<span class="token punctuation">.</span>rootPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>

          <span class="token function">warnIfHanging</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment">// error code is handled by cli.fail()</span>
          <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// ...省略部分代码</span>
  <span class="token punctuation">}</span>



  <span class="token function">runCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    	<span class="token comment">// 命令初始化</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>proceed<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>proceed <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// 指令执行</span>
          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// early exits set their own exitCode (if non-zero)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
	<span class="token comment">// 子类不存在 时 抛出错误</span>
  <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ValidationError</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> needs to be implemented<span class="token punctuation">.</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ValidationError</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> needs to be implemented<span class="token punctuation">.</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>Command <span class="token operator">=</span> Command<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Class 中最关心的就是 constructor 的逻辑 ，如图 5 和代码。上面写到，每个子指令类会执行 initialize 和 execute 方法。我们整理一下</p><ul><li><p>创建 Promise.resolve() 异步 Chain。</p></li><li><p>对全局配置、参数、环境初始化</p></li><li><p>执行 runCommand 方法</p></li><li><p><strong>runCommand 调用</strong>initialize 和 execute（如果子类没有将会 执行 父类抛出异常） 采用了模板模式，对子指令通逻辑统一模板化。基本的执行流程就是这样。在这个 Class 中，很巧妙的将指令的初始化、指令的执行等逻辑均注册在 Promise 的异步任务中。</p></li><li><p>指令的执行逻辑均晚于 Cli 的同步代码。（不影响 Cli 的代码执行）</p></li><li><p>所有<strong>异常错误</strong>都可以统一捕获 通过上面的学习，我们几乎了解了 lerna 的 一个指令 <strong>输入</strong>-&gt; <strong>解析</strong> -&gt; <strong>注册</strong> -&gt; <strong>执行</strong> -&gt; <strong>输出</strong> 的流程。</p></li></ul><p>转过头我们看下脚手架初始化的第一步的 import-local 到底做了什么？</p><h3 id="脚手架的初始化流程" tabindex="-1"><a class="header-anchor" href="#脚手架的初始化流程" aria-hidden="true">#</a> 脚手架的初始化流程</h3><p>import-local 用于获取 npm 是否包存在本地（当前工作区域），用于判断全局安装的包如果<strong>本地</strong>有安装,优先用<strong>本地</strong>的，在 webpack-cli 中等绝大多数 cli 中都有运用。</p><p><img src="https://www.zoo.team/images/upload/upload_98102a2ae21437bc88a35baff2d51a07.png" alt=""></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>path<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> resolveCwd <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>resolve<span class="token operator">-</span>cwd<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> pkgDir <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>pkg<span class="token operator">-</span>dir<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> filename <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
  <span class="token comment">// &amp;#39;/Users/nvm/versions/node/v14.17.3/lib/node_modules/lerna&amp;#39; 全局文件夹</span>
  <span class="token keyword">const</span> globalDir <span class="token operator">=</span> pkgDir<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">dirname</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> relativePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">relative</span><span class="token punctuation">(</span>globalDir<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &amp;#39;cli.js&amp;#39;</span>
  <span class="token keyword">const</span> pkg <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>globalDir<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token keyword">package</span><span class="token punctuation">.</span>json<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// &amp;#39;/Users/Desktop/person/lerna-demo/node_modules/lerna/cli.js&amp;#39; // 本地文件</span>
  <span class="token keyword">const</span> localFile <span class="token operator">=</span> resolveCwd<span class="token punctuation">.</span><span class="token function">silent</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>name<span class="token punctuation">,</span> relativePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token comment">// &amp;#39;/Users/Desktop/person/lerna-demo/node_modules&amp;#39;  // 本地文件的 node_modules</span>
  <span class="token keyword">const</span> localNodeModules <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>node_modules<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token keyword">const</span> filenameInLocalNodeModules <span class="token operator">=</span> <span class="token operator">!</span>path<span class="token punctuation">.</span><span class="token function">relative</span><span class="token punctuation">(</span>localNodeModules<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span>
    <span class="token comment">// On Windows, if \`localNodeModules\` and \`filename\` are on different partitions, \`path.relative()\` returns the value of \`filename\`, resulting in \`filenameInLocalNodeModules\` incorrectly becoming \`true\`.</span>
    path<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>localNodeModules<span class="token punctuation">)</span><span class="token punctuation">.</span>root <span class="token operator">===</span> path<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">.</span>root<span class="token punctuation">;</span>

  <span class="token comment">// Use \`path.relative()\` to detect local package installation,</span>
  <span class="token comment">// because __filename&amp;#39;s case is inconsistent on Windows</span>
  <span class="token comment">// Can use \`===\` when targeting Node.js 8</span>
  <span class="token comment">// See https://github.com/nodejs/node/issues/6624</span>

  <span class="token comment">// 导入使用本地 包</span>
  <span class="token keyword">return</span> <span class="token operator">!</span>filenameInLocalNodeModules <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> localFile <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> path<span class="token punctuation">.</span><span class="token function">relative</span><span class="token punctuation">(</span>localFile<span class="token punctuation">,</span> filename<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> <span class="token function">require</span><span class="token punctuation">(</span>localFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过最后一行，可以分析出，最核心的是解析出指定的 npm包 存在全局和 npm 的文件夹、路径。 进而判断是 <strong>require()</strong> 本地还是全局。</p><h2 id="问题-对比" tabindex="-1"><a class="header-anchor" href="#问题-对比" aria-hidden="true">#</a> 问题 &amp; 对比</h2><p>对比和查看问题之前，我们要关注一下 <strong>Monorepo 单仓库 多项目管理的模式带来的优势。</strong></p><p>前端工作中你是否会遇到以下问题？</p><p>问题 1：</p><p>小明前端同学发现了在小红同学的项目中存在相同的业务逻辑</p><p>A: 我选择复制一下代码</p><p>B: 我选择封装成 npm 包多项目复用</p><p>显然 A 方式就不是解决该问题的一种选项，完全不不符合应用程序的代码设计思想。</p><p>大多数同学就会异口同声我选择 B</p><p>那么如果这个 npm 包在后续迭代过程中发现，包依赖也要随之升级发布，怎么办？</p><p>又或者业务中存在大多数这中场景，每个包没有统一管理，花绝大多数时间在包依赖之间升级发布。以及各自包的迭代。</p><p>你可能只是删除了一行代码，你却要每个依赖这个包的 npm 包全部执行一遍流程。</p><p>问题 2：</p><p>在开发中，避免不了对 npm 包的更新，当你更新过程中少不了统一的打 tag 以及当前更新的包的影响面。是小的改动，还是大版本 api 无法兼容的升级。这些操作可能都会导致开发的项目中依赖未及时更新，tag 标记错误出现问题。</p><h3 id="优势-劣势" tabindex="-1"><a class="header-anchor" href="#优势-劣势" aria-hidden="true">#</a> 优势 &amp; 劣势</h3><p>就目前来看，<strong>Monorepo 解决的是，多仓库之间的依赖变更升级，批量包管理节省时间成本的事情。</strong></p><p><strong>所以在开源社区中使用这种模式的一般存在与依赖拆分包，但是彼此之间独立的项目（npm 和脚手架等等）</strong></p><p>但是 lerna 的多包管理也有不足之处</p><ul><li>依赖之间调试复杂</li><li>changelog 信息不完整</li><li>lerna 本身不支持工作区概念，需要借助其他工具</li><li>CI 定制成本大</li></ul><h3 id="其他-multirepo-方案" tabindex="-1"><a class="header-anchor" href="#其他-multirepo-方案" aria-hidden="true">#</a> 其他 <strong>MultiRepo 方案</strong></h3><p><img src="https://www.zoo.team/images/upload/upload_bf23ecee59695e3a76c6f89d09f93d4e.png" alt=""></p><p>从图中我们可以看出</p><p>pnpm 更注重包的管理（像下载，稳定准确性等），相比之下 lerna 更注重包的发布流程规范指定。</p><p>二者适用的场景略有不同。</p><h2 id="拓展" tabindex="-1"><a class="header-anchor" href="#拓展" aria-hidden="true">#</a> 拓展</h2><h3 id="import-local-解析" tabindex="-1"><a class="header-anchor" href="#import-local-解析" aria-hidden="true">#</a> import-local 解析</h3><p>如图六和下方代码，很显然 resolve-cwd 和 pkg-dir 是实现 import-local 的主要工具包</p><ul><li>resolve-cwd 解析类似 require.Resolve () 的模块的路径，但是要从当前工作目录中解析。</li><li>pkg-dir 从根目录查找节点 .js 项目或 npm 包 &gt;resolve-cwd 中使用 resolve-from 工具包 解析 路径来源</li></ul><p><img src="https://www.zoo.team/images/upload/upload_0b43dad3e101e5ebd7111cd3189ecb84.png" alt=""></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>path<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> Module <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>module<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 省略 部分代码</span>
<span class="token keyword">const</span> fromFile <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>fromDirectory<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>noop<span class="token punctuation">.</span>js<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment">// &amp;#39;/Users/Desktop/home/person/lerna-demo/noop.js&amp;#39;</span>

<span class="token keyword">const</span> resolveFileName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> Module<span class="token punctuation">.</span><span class="token function">_resolveFilename</span><span class="token punctuation">(</span>moduleId<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> fromFile<span class="token punctuation">,</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> fromFile<span class="token punctuation">,</span>
    <span class="token literal-property property">paths</span><span class="token operator">:</span> Module<span class="token punctuation">.</span><span class="token function">_nodeModulePaths</span><span class="token punctuation">(</span>fromDirectory<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>使用原生的 module 的原生的两个 Api： Module._resolveFilename 和 Module._nodeModulePaths</p></li><li><p>Module._nodeModulePaths 推断出 可能存在 该 node/js/json 等 包文件的路径数组</p></li><li><p>而在 Module._resolveFilename 这个方法中，首先会去检查，本地模块是否有这个模块，如果有，直接返回，如果没有，继续往下查找。 模块对象的属性 包含</p></li><li><p>module.id</p></li><li><p>module.filename</p></li><li><p>module.loaded</p></li><li><p>module.parent</p></li><li><p>module.children</p></li><li><p>module.paths Module 是实现 <strong>require() 和 热加载的核心方法之一。</strong></p></li></ul>`,68),q=n("strong",null,"部分实现可以参考阮一峰老师的",-1),j={href:"https://www.ruanyifeng.com/blog/2015/05/require.html",target:"_blank",rel:"noopener noreferrer"},x=t(`<p><img src="https://www.zoo.team/images/upload/upload_68b0d2a2a9aba26b0dbde269886c65a4.png" alt=""><img src="https://www.zoo.team/images/upload/upload_b9f9bb5ca6dcff86f4efbba0a005b539.png" alt=""></p><p>&gt;pkg-dir 中使用 find-up 工具包 向上找全局包文件夹</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> locatePath <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>locate<span class="token operator">-</span>path<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> stop <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>findUp<span class="token punctuation">.</span>stop<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>sync <span class="token operator">=</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> directory <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>cwd <span class="token operator">||</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span>root<span class="token punctuation">}</span> <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>directory<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> paths <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> runMatcher <span class="token operator">=</span> locateOptions <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> name <span class="token operator">!==</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token keyword">function</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> locatePath<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span>paths<span class="token punctuation">,</span> locateOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> foundPath <span class="token operator">=</span> <span class="token function">name</span><span class="token punctuation">(</span>locateOptions<span class="token punctuation">.</span>cwd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> foundPath <span class="token operator">===</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>string<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> locatePath<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">[</span>foundPath<span class="token punctuation">]</span><span class="token punctuation">,</span> locateOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> foundPath<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token comment">// eslint-disable-next-line no-constant-condition</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> foundPath <span class="token operator">=</span> <span class="token function">runMatcher</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token operator">...</span>options<span class="token punctuation">,</span> <span class="token literal-property property">cwd</span><span class="token operator">:</span> directory<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>foundPath <span class="token operator">===</span> stop<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>foundPath<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>directory<span class="token punctuation">,</span> foundPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>directory <span class="token operator">===</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    directory <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">dirname</span><span class="token punctuation">(</span>directory<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>全局包文件夹全的在当前执行 cwd 向上查找存在 package.json 文件</li><li>所以 locatePath.sync 接受一个查找的文件路径数组和执行的 cwd 路径</li><li>通过 while <strong>循环直至</strong>找到 return path.resolve(directory, foundPath);</li></ul><h3 id="什么是软链接" tabindex="-1"><a class="header-anchor" href="#什么是软链接" aria-hidden="true">#</a> 什么是软链接</h3><p><img src="https://www.zoo.team/images/upload/upload_467f1134c34d57c5af370f52b6b1cf1d.png" alt=""></p>`,6),C=n("strong",null,"fs.symlink(target, path[, type], callback)",-1),P={href:"http://nodejs.cn/api/fs.html#fssymlinktarget-path-type-callback",target:"_blank",rel:"noopener noreferrer"},z=t(`<div class="language-plain line-numbers-mode" data-ext="plain"><pre class="language-plain"><code>target &amp;lt;string&amp;gt; | &amp;lt;Buffer&amp;gt; | &amp;lt;URL&amp;gt;   // 目标文件
path &amp;lt;string&amp;gt; | &amp;lt;Buffer&amp;gt; | &amp;lt;URL&amp;gt;  // 创建软链对应的地址
type &amp;lt;string&amp;gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该API会创建路径为 path 的链接，该链接指向 target。type 参数仅在 Windows 上可用，在其他平台上则会被忽略。 可以被设置为 <code>dir</code>、 <code>file</code> 或 <code>function</code>。如果未设置 type 参数，则 Node.js 将会自动检测 target 的类型并使用 <code>file</code> 或 <code>dir</code>。</p><p>如果 target 不存在，则将会使用 &#39;file&#39;。Windows 上的连接点要求目标路径是绝对路径。当使用 &#39;function&#39; 时， target 参数将会自动地标准化为绝对路径。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ul><li>从 lerna 的流程设计中，我们可以发现，每个可执行的Node程序，lerna 都对其进行了拆分，再合。在自己的代码设计中，相信你也会遇到杂乱的代码。 此刻你是无视，还是从“杂”-&gt;“分”-&gt;“合”来整理代码</li><li>其次我们看到 lerna 中，使用了单例来注册指令。在注册指令，又采用了面相对象和模板模式，来抽离公共的初始化逻辑。而在指令的执行过程中，全是微任务的任务执行，这都是可以学习的设计思路和设计模式。</li><li>最后其他 MultiRepo 方案对比中可以看出，工具赋予的能力都有其优劣，没有好与不好，只有更适合。</li></ul><h2 id="参考文献" tabindex="-1"><a class="header-anchor" href="#参考文献" aria-hidden="true">#</a> 参考文献</h2>`,6),L={href:"https://lerna.js.org",target:"_blank",rel:"noopener noreferrer"},M={href:"https://www.ruanyifeng.com/blog/2015/05/require.html",target:"_blank",rel:"noopener noreferrer"},F=n("h2",{id:"推荐阅读",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#推荐阅读","aria-hidden":"true"},"#"),s(" 推荐阅读")],-1),N={href:"https://juejin.cn/post/7072883925764276254",target:"_blank",rel:"noopener noreferrer"},E=n("p",null,'[浅析 Snabbdom 中 vnode 和 diff 算法](https://juejin.cn/post/7067693810918096903 "浅析 Snabbdom 中 vnode 和 diff 算法")',-1),V=n("p",null,'[如何利用 SCSS 实现一键换肤](https://juejin.cn/post/7062496975454732301 "如何利用 SCSS 实现一键换肤")',-1),D=n("p",null,'[在 Vue 中为什么不推荐用 index 做 key](https://juejin.cn/post/7026119446162997261 "在 Vue 中为什么不推荐用 index 做 key")',-1),I=n("h2",{id:"开源作品",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#开源作品","aria-hidden":"true"},"#"),s(" 开源作品")],-1),S=n("ul",null,[n("li",null,"政采云前端小报")],-1),U={href:"https://www.zoo.team/openweekly/",target:"_blank",rel:"noopener noreferrer"},O=n("ul",null,[n("li",null,"商品选择 sku 插件")],-1),B={href:"https://github.com/zcy-inc/skuPathFinder-back",target:"_blank",rel:"noopener noreferrer"},W=n("h2",{id:"招贤纳士",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#招贤纳士","aria-hidden":"true"},"#"),s(" 招贤纳士")],-1),A=n("p",null,"政采云前端团队（ZooTeam），一个年轻富有激情和创造力的前端团队，隶属于政采云产品研发部，Base 在风景如画的杭州。团队现有 60 余个前端小伙伴，平均年龄 27 岁，近 4 成是全栈工程师，妥妥的青年风暴团。成员构成既有来自于阿里、网易的“老”兵，也有浙大、中科大、杭电等校的应届新人。团队在日常的业务对接之外，还在物料体系、工程平台、搭建平台、性能体验、云端应用、数据分析及可视化等方向进行技术探索和实战，推动并落地了一系列的内部技术产品，持续探索前端技术体系的新边界。",-1),R=n("p",null,[s("如果你想改变一直被事折腾，希望开始能折腾事；如果你想改变一直被告诫需要多些想法，却无从破局；如果你想改变你有能力去做成那个结果，却不需要你；如果你想改变你想做成的事需要一个团队去支撑，但没你带人的位置；如果你想改变既定的节奏，将会是“5 年工作时间 3 年工作经验”；如果你想改变本来悟性不错，但总是有那一层窗户纸的模糊… 如果你相信相信的力量，相信平凡人能成就非凡事，相信能遇到更好的自己。如果你希望参与到随着业务腾飞的过程，亲手推动一个有着深入的业务理解、完善的技术体系、技术创造价值、影响力外溢的前端团队的成长历程，我觉得我们该聊聊。任何时间，等着你写点什么，发给 "),n("code",null,"ZooTeam@cai-inc.com")],-1);function T(G,H){const a=l("ExternalLinkIcon");return e(),c("div",null,[u,r,n("p",null,[s("> 这是第 137 篇不掺水的原创，想获取更多原创好文，请搜索公众号关注我们吧~ 本文首发于政采云前端博客："),n("a",k,[s("Lerna 运行流程剖析"),p(a)])]),d,n("ul",null,[n("li",null,[n("p",null,[s("Vue Cli "),n("a",m,[s("https://github.com/vuejs/vue-cli"),p(a)])])]),n("li",null,[n("p",null,[s("create-react-app "),n("a",v,[s("https://github.com/babel/babel"),p(a)])])]),n("li",null,[n("p",null,[s("mint-ui "),n("a",b,[s("https://github.com/ElemeFE/mint-ui"),p(a)])]),h])]),g,n("p",null,[s("lerna 的几个基本常用指令, 不是本文重点哦。 "),n("a",f,[s("lerna"),p(a)]),s(" 文档在这里。")]),w,n("p",null,[s("我们先 Github 克隆源码 "),n("a",y,[s("Lerna"),p(a)])]),_,n("p",null,[q,s(),n("a",j,[s("require() 源码解读"),p(a)])]),x,n("p",null,[C,s(),n("a",P,[s("Node/symlink"),p(a)])]),z,n("ul",null,[n("li",null,[n("a",L,[s("Lerna 文档"),p(a)])]),n("li",null,[n("a",M,[s("阮一峰老师的require() 源码解读"),p(a)])])]),F,n("p",null,[n("a",N,[s("Decorator 装饰器"),p(a)])]),E,V,D,I,S,n("p",null,[n("strong",null,[s("开源地址 "),n("a",U,[s("www.zoo.team/openweekly/"),p(a)])]),s(" (小报官网首页有微信交流群)")]),O,n("p",null,[n("strong",null,[s("开源地址 "),n("a",B,[s("https://github.com/zcy-inc/skuPathFinder-back/"),p(a)])])]),W,A,R])}const $=o(i,[["render",T],["__file","Lerna 运行流程剖析.html.vue"]]);export{$ as default};
