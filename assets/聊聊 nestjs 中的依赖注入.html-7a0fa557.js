import{_ as p,z as e,A as o,Y as n,C as s,U as t,a6 as c,Q as l}from"./framework-cb9358d9.js";const i={},u=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d4eb6a01e6564840817b127265b07edd~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1),r=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ecad6919f2f7484f840975feb3cc7fa5~tplv-k3u1fbpfcp-watermark.image?",alt:"百里.png"})],-1),k={href:"https://zoo.team/article/nestjs",target:"_blank",rel:"noopener noreferrer"},d=c(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>首先 nestjs 是什么？引用其官网的原话 <code>A progressive Node.js framework for building efficient, reliable and scalable server-side applications.</code>，翻译一下就是：“一个可以用来搭建高效、可靠且可扩展的服务端应用的node框架”。目前在 github 上有 42.4k 的 star 数，人气还是很高的。</p><p>在使用过程中会发现 nest 框架和后端同学使用的 Springboot 以及前端三大框架之一的 Angular 都有很多相似之处。没错这三个框架都有相似的设计，并都实现了依赖注入。</p><p>可能对大部分前端同学来说，<code>依赖注入</code>这个词还比较陌生，本文就围绕<code>依赖注入</code>这个话题，展开讨论一下依赖注入是什么？以及在 nestjs 中详细的实现过程。</p><h2 id="重要概念" tabindex="-1"><a class="header-anchor" href="#重要概念" aria-hidden="true">#</a> 重要概念</h2><h3 id="概念解释" tabindex="-1"><a class="header-anchor" href="#概念解释" aria-hidden="true">#</a> 概念解释</h3><p>先来看看几个重要概念的解释</p><ul><li>依赖倒置原则( DIP )：抽象不应该依赖实现，实现也不应该依赖实现，实现应该依赖抽象。</li><li>依赖注入（dependency injection，简写为 DI）：依赖是指依靠某种东西来获得支持。将创建对象的任务转移给其他class，并直接使用依赖项的过程，被称为“依赖项注入”。</li><li>控制反转（Inversion of Control, 简写为 IoC）：指一个类不应静态配置其依赖项，应由其他一些类从外部进行配置。</li></ul><h3 id="结合代码" tabindex="-1"><a class="header-anchor" href="#结合代码" aria-hidden="true">#</a> 结合代码</h3><p>光看上面的解释可能并不好理解？那么我们把概念和具体的代码结合起来看。</p><ol><li>根据 nest 官网教程，用脚手架创建一个项目，创建好的项目中有 main.ts 文件为入口文件，引入了 app.module.ts 文件，而 app.module.ts 文件引入了 app.controller.ts。先看一下代码的逻辑：</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>   <span class="token comment">// src/main.ts文件</span>
   <span class="token keyword">import</span> <span class="token punctuation">{</span> NestFactory <span class="token punctuation">}</span> from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">nestjs</span></span><span class="token operator">/</span>core<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
   <span class="token keyword">import</span> <span class="token punctuation">{</span> AppModule <span class="token punctuation">}</span> from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token operator">/</span>app<span class="token punctuation">.</span>module<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
   
   <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">await</span> NestFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>AppModule<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">await</span> app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   <span class="token function">bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>   <span class="token comment">// src/app.module.ts文件</span>
   <span class="token keyword">import</span> <span class="token punctuation">{</span> Module <span class="token punctuation">}</span> from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">nestjs</span></span><span class="token operator">/</span>common<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
   <span class="token keyword">import</span> <span class="token punctuation">{</span> AppController <span class="token punctuation">}</span> from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token operator">/</span>app<span class="token punctuation">.</span>controller<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
   <span class="token keyword">import</span> <span class="token punctuation">{</span> AppService <span class="token punctuation">}</span> from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token operator">/</span>app<span class="token punctuation">.</span>service<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span> 
   
   <span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
     imports<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
     controllers<span class="token operator">:</span> <span class="token punctuation">[</span>AppController<span class="token punctuation">]</span><span class="token punctuation">,</span>
     providers<span class="token operator">:</span> <span class="token punctuation">[</span>AppService<span class="token punctuation">]</span><span class="token punctuation">,</span>
   <span class="token punctuation">}</span><span class="token punctuation">)</span>
   <span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>   <span class="token comment">// src/app.controller.ts文件</span>
   <span class="token keyword">import</span> <span class="token punctuation">{</span> Controller<span class="token punctuation">,</span> Get <span class="token punctuation">}</span> from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">nestjs</span></span><span class="token operator">/</span>common<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
   <span class="token keyword">import</span> <span class="token punctuation">{</span> AppService <span class="token punctuation">}</span> from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token operator">/</span>app<span class="token punctuation">.</span>service<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
   
   <span class="token decorator"><span class="token at operator">@</span><span class="token function">Controller</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppController</span> <span class="token punctuation">{</span>
     <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">readonly</span> appService<span class="token operator">:</span> AppService<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
   
     <span class="token decorator"><span class="token at operator">@</span><span class="token function">Get</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
     <span class="token function">getHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
       <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>appService<span class="token punctuation">.</span><span class="token function">getHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>   <span class="token comment">// src/app.service.ts文件</span>
   <span class="token keyword">import</span> <span class="token punctuation">{</span> Injectable <span class="token punctuation">}</span> from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">nestjs</span></span><span class="token operator">/</span>common<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
   
   <span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppService</span> <span class="token punctuation">{</span>
     <span class="token function">getHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
       <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>Hello World<span class="token operator">!</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们执行 npm start 启动服务，访问 localhost:3000 就会执行这个 AppController 类中的 getHello 方法了。我们来看 app.controller.ts 文件。可以看到构造函数的参数签名中第一个参数 appService 是 AppService 的一个实例。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">readonly</span> appService<span class="token operator">:</span> AppService<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但是在代码里并有没有看到实例化这个 AppService 的地方。这里其实是把创建这个实例对象的工作交给了nest框架，而不是 AppController 自己来创建这个对象，这就是所谓的<code>控制反转</code>。而把创建好的 AppService 实例对象作为 AppController 实例化时的参数传给构造器就是<code>依赖注入</code>了。</p><h3 id="依赖注入的方式" tabindex="-1"><a class="header-anchor" href="#依赖注入的方式" aria-hidden="true">#</a> 依赖注入的方式</h3><p>依赖注入的实现主要有三种方式</p><ol><li>构造器注入： 依赖关系通过 class 构造器提供；</li><li>setter 注入：用 setter 方法注入依赖项；</li><li>接口注入：依赖项提供一个注入方法，该方法将把依赖项注入到传递给它的任何客户端中。客户端必须实现一个接口，该接口的 setter 方法接收依赖； 在 nest 中采用了第一种方式——构造器注入。</li></ol><h3 id="优点" tabindex="-1"><a class="header-anchor" href="#优点" aria-hidden="true">#</a> 优点</h3><p>那么 nestjs 框架用了<code>依赖注入</code>和<code>控制反转</code>有什么好处呢？</p><p>其实<code>DI</code> 和<code>IoC</code> 是实现<code>依赖倒置原则</code>的具体手段。<code>依赖倒置原则</code>是设计模式五大原则（SOLID）中的第五项原则，也许上面这个 AppController 的例子还看不出 DIP 有什么用，因为 DIP 也不是今天的重点，这里就不多赘述了，但是通过上面的例子我们至少能体会到以下两个优点：</p><ol><li>减少样板代码，不需要再在业务代码中写大量实例化对象的代码了；</li><li>可读性和可维护性更高了，松耦合，高内聚，符合单一职责原则，一个类应该专注于履行其职责，而不是创建履行这些职责所需的对象。</li></ol><h2 id="元数据反射" tabindex="-1"><a class="header-anchor" href="#元数据反射" aria-hidden="true">#</a> 元数据反射</h2><p>我们都知道 ts 中的类型信息是在运行时是不存在的，那运行时是如何根据参数的类型注入对应实例的呢？</p><p>答案就是：元数据反射</p><p>先说反射，反射就是在运行时动态获取一个对象的一切信息：方法/属性等等，特点在于<strong>动态类型反推导</strong>。不管是在 ts 中还是在其他类型语言中，反射的本质在于元数据。在 TypeScript 中，反射的原理是通过编译阶段对对象注入元数据信息，在运行阶段读取注入的元数据，从而得到对象信息。</p><p>元数据反射（Reflect Metadata） 是 ES7 的一个提案，它主要用来在声明的时候添加和读取元数据。TypeScript 在 1.5+ 的版本已经支持它。要在 ts 中启用元数据反射相关功能需要：</p><ul><li><code>npm i reflect-metadata --save</code>。</li><li>在 <code>tsconfig.json</code> 里配置 <code>emitDecoratorMetadata</code> 选项为<code>true</code>。</li></ul><h3 id="定义元数据" tabindex="-1"><a class="header-anchor" href="#定义元数据" aria-hidden="true">#</a> 定义元数据</h3><p><code>Reflect.defineMetadata(metadataKey, data, target)</code></p><p>可以定义一个类的元数据；</p><h3 id="获取元数据" tabindex="-1"><a class="header-anchor" href="#获取元数据" aria-hidden="true">#</a> 获取元数据</h3><p><code>Reflect.getMetadata(metadataKey, target)</code>，<code>Reflect.getMetadata(metadataKey, instance, methodName)</code></p><p>可以获取类或者方法上定义的元数据。</p><h3 id="内置元数据" tabindex="-1"><a class="header-anchor" href="#内置元数据" aria-hidden="true">#</a> 内置元数据</h3><p>TypeScript 结合自身语言的特点，为使用了装饰器的代码声明注入了 3 组元数据：</p><ul><li><code>design:type</code>：成员类型</li><li><code>design:paramtypes</code>：成员所有参数类型</li><li><code>design:returntype</code>：成员返回类型</li></ul><h3 id="示例一-元数据的定义与获取" tabindex="-1"><a class="header-anchor" href="#示例一-元数据的定义与获取" aria-hidden="true">#</a> 示例一：元数据的定义与获取</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>reflect<span class="token operator">-</span>metadata<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">{</span>
  <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>hi<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token punctuation">{</span>
  <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>hello<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">Module</span><span class="token punctuation">(</span>metadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> propsKeys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>metadata<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> property <span class="token keyword">in</span> metadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>metadata<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Reflect<span class="token punctuation">.</span><span class="token function">defineMetadata</span><span class="token punctuation">(</span>property<span class="token punctuation">,</span> metadata<span class="token punctuation">[</span>property<span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  controllers<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">B</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  providers<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">A</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">const</span> providers <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>providers<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token constant">C</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> controllers <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>controllers<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token constant">C</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>providers<span class="token punctuation">,</span> controllers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ [class A] ] [ [class B] ]</span>



<span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token punctuation">(</span>providers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &amp;#39;hi&amp;#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子里，我们定义了一个名为 Module 的装饰器，这个装饰器的主要作用就是往装饰的类上添加一些元数据。然后用装饰器装饰 C 类。我们就可以获取到这个参数中的信息了;</p><h3 id="示例二-依赖注入的简单实现" tabindex="-1"><a class="header-anchor" href="#示例二-依赖注入的简单实现" aria-hidden="true">#</a> 示例二：依赖注入的简单实现</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>reflect<span class="token operator">-</span>metadata<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">Constructor</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token constant">T</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> Test <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> ClassDecorator <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">OtherService</span> <span class="token punctuation">{</span>
  a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Test</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">TestService</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> <span class="token keyword">readonly</span> otherService<span class="token operator">:</span> OtherService<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token function">testMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>otherService<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> Factory <span class="token operator">=</span> <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token constant">T</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">(</span>target<span class="token operator">:</span> Constructor<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token constant">T</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 获取所有注入的服务</span>
  <span class="token keyword">const</span> providers <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>design<span class="token operator">:</span>paramtypes<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [OtherService]</span>
  <span class="token keyword">const</span> args <span class="token operator">=</span> providers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>provider<span class="token operator">:</span> Constructor<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token keyword">new</span> <span class="token class-name">provider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">target</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token function">Factory</span><span class="token punctuation">(</span>TestService<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">testMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里例子就是依赖注入简单的示例，这里 Test 装饰器虽然什么都没做，但是如上所说，只要使用了装饰器，ts 就会默认给类或对应方法添加<code>design:paramtypes</code>的元数据，这样就可以通过<code>Reflect.getMetadata(&amp;#39;design:paramtypes&amp;#39;, target)</code>拿到类型信息了。</p><h2 id="nest中的实现" tabindex="-1"><a class="header-anchor" href="#nest中的实现" aria-hidden="true">#</a> nest中的实现</h2><p>下面来看 nest 框架内部是怎么来实现的</p><h3 id="执行逻辑" tabindex="-1"><a class="header-anchor" href="#执行逻辑" aria-hidden="true">#</a> 执行逻辑</h3><p>在入口文件 main.ts 中有这样一行代码</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">await</span> NestFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>AppModule<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在源码 nest/packages/core/nest-application.ts 找到 NestFactory.create 方法，这里用注释解释说明了与依赖注入相关的几处代码（下同）。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">public</span> <span class="token keyword">async</span> create<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">INestApplication</span> <span class="token operator">=</span> INestApplication<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">(</span>
    module<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span>
    serverOrOptions<span class="token operator">?</span><span class="token operator">:</span> AbstractHttpAdapter <span class="token operator">|</span> NestApplicationOptions<span class="token punctuation">,</span>
    options<span class="token operator">?</span><span class="token operator">:</span> NestApplicationOptions<span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token constant">T</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">[</span>httpServer<span class="token punctuation">,</span> appOptions<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isHttpServer</span><span class="token punctuation">(</span>serverOrOptions<span class="token punctuation">)</span>
      <span class="token operator">?</span> <span class="token punctuation">[</span>serverOrOptions<span class="token punctuation">,</span> options<span class="token punctuation">]</span>
      <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createHttpAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> serverOrOptions<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> applicationConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 1. 实例化IoC容器，这个容器就是用来存放所有对象的地方</span>
    <span class="token keyword">const</span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NestContainer</span><span class="token punctuation">(</span>applicationConfig<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setAbortOnError</span><span class="token punctuation">(</span>serverOrOptions<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">registerLoggerConfiguration</span><span class="token punctuation">(</span>appOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// 2. 执行初始化逻辑，是依赖注入的核心逻辑所在</span>
    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> container<span class="token punctuation">,</span> applicationConfig<span class="token punctuation">,</span> httpServer<span class="token punctuation">)</span><span class="token punctuation">;</span> 
		
		<span class="token comment">// 3. 实例化NestApplication类</span>
    <span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NestApplication</span><span class="token punctuation">(</span>     
      container<span class="token punctuation">,</span>
      httpServer<span class="token punctuation">,</span>
      applicationConfig<span class="token punctuation">,</span>
      appOptions<span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createNestInstance</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 4. 生成一个Proxy代理对象，将对NestApplication实例上部分属性的访问代理到httpServer，在nest中httpServer默认就是express实例对象，所以默认情况下，express的中间件都是可以使用的</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>createAdapterProxy<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token constant">T</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> httpServer<span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="ioc-容器" tabindex="-1"><a class="header-anchor" href="#ioc-容器" aria-hidden="true">#</a> IoC 容器</h3><p>在目录 nest/packages/core/injector/container.ts，找到了 NestContainer 类，里面有很多成员属性和方法，可以看到其中的私有属性 modules 是一个 ModulesContainer 实例对象，而 ModulesContainer 类是 Map 类的一个子类。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">NestContainer</span> <span class="token punctuation">{</span>	  
  <span class="token operator">...</span>
  <span class="token keyword">private</span> <span class="token keyword">readonly</span> modules <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModulesContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ModulesContainer</span> <span class="token keyword">extends</span> <span class="token class-name">Map</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token builtin">string</span><span class="token punctuation">,</span> Module<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
   <span class="token keyword">private</span> <span class="token keyword">readonly</span> _applicationId <span class="token operator">=</span> <span class="token function">uuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
   <span class="token keyword">get</span> <span class="token function">applicationId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
     <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_applicationId<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="依赖注入过程" tabindex="-1"><a class="header-anchor" href="#依赖注入过程" aria-hidden="true">#</a> 依赖注入过程</h3><p>先来看<code>this.initialize</code>方法：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>  <span class="token keyword">private</span> <span class="token keyword">async</span> <span class="token function">initialize</span><span class="token punctuation">(</span>
    module<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span>
    container<span class="token operator">:</span> NestContainer<span class="token punctuation">,</span>
    config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    httpServer<span class="token operator">:</span> HttpServer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1. 实例加载器</span>
    <span class="token keyword">const</span> instanceLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InstanceLoader</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token keyword">const</span> metadataScanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MetadataScanner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>				 
    <span class="token comment">// 2. 依赖扫描器</span>
    <span class="token keyword">const</span> dependenciesScanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DependenciesScanner</span><span class="token punctuation">(</span>   
      container<span class="token punctuation">,</span>
      metadataScanner<span class="token punctuation">,</span>
      config<span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    container<span class="token punctuation">.</span><span class="token function">setHttpAdapter</span><span class="token punctuation">(</span>httpServer<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> teardown <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>abortOnError <span class="token operator">===</span> <span class="token boolean">false</span> <span class="token operator">?</span> rethrow <span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> httpServer<span class="token operator">?.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">MESSAGES</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_START</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">await</span> ExceptionsZone<span class="token punctuation">.</span><span class="token function">asyncRun</span><span class="token punctuation">(</span>
        <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
          <span class="token comment">// 3. 扫描依赖</span>
          <span class="token keyword">await</span> dependenciesScanner<span class="token punctuation">.</span><span class="token function">scan</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span><span class="token punctuation">;</span> 
          <span class="token comment">// 4. 生成依赖的实例</span>
          <span class="token keyword">await</span> instanceLoader<span class="token punctuation">.</span><span class="token function">createInstancesOfDependencies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
          dependenciesScanner<span class="token punctuation">.</span><span class="token function">applyApplicationProviders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        teardown<span class="token punctuation">,</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>autoFlushLogs<span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleInitializationError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>new InstanceLoader()</code>实例化 InstanceLoader 类，并把刚才的 IoC 容器作为参数传入，这个类是专门用来生成需要注入的实例对象的；</li><li>实例化 MetadataScanner 类和 DependenciesScanner 类，MetadataScanner 类是一个用来获取<code>元数据</code>的工具类，而 DependenciesScanner 类是用来扫描出所有 modules 中的依赖项的。上面的 app.module.ts 中 Module 装饰器的参数中传入了<code>controllers</code>、<code>providers</code>等其他选项，这个 Module 装饰器的作用就是标明 AppModule 类的一些依赖项；</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>   <span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
     imports<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
     controllers<span class="token operator">:</span> <span class="token punctuation">[</span>AppController<span class="token punctuation">]</span><span class="token punctuation">,</span>
     providers<span class="token operator">:</span> <span class="token punctuation">[</span>AppService<span class="token punctuation">]</span><span class="token punctuation">,</span>
   <span class="token punctuation">}</span><span class="token punctuation">)</span>
   <span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>调用依赖扫描器的 scan 方法，扫描依赖；</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>   <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token function">scan</span><span class="token punctuation">(</span>module<span class="token operator">:</span> Type<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token builtin">any</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token comment">// 1. 把一些内建module添加到IoC容器中</span>
     <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">registerCoreModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
     <span class="token comment">// 2. 把传入的module添加到IoC容器中</span>
     <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">scanForModules</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span><span class="token punctuation">;</span> 
     <span class="token comment">// 3. 扫描当前IoC容器中所有module的依赖</span>
     <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">scanModulesForDependencies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
     <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">calculateModulesDistance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   
     <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addScopedEnhancersMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">this</span><span class="token punctuation">.</span>container<span class="token punctuation">.</span><span class="token function">bindGlobalScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里所说的 module 可以理解为是模块，但并不是 es6 语言中的模块化的 module，而是app.module.ts 中定义的类, 而 nest 内部也有一个内建的<code>Module</code>类，框架会根据 app.module.ts 中定义的 module 类去实例化一个内建的 Moudle 类。下面 addModule 方法是把 module 添加到 IoC 容器的方法，可以看到，这里针对每个 module 会生成一个 token，然后实例化内建的 Module 类，并放到容器的modules属性上，token 作为 Map 结构的 key，Module 实例作为值。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code> <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token function">addModule</span><span class="token punctuation">(</span>
   metatype<span class="token operator">:</span> Type<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token builtin">any</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token operator">|</span> DynamicModule <span class="token operator">|</span> <span class="token builtin">Promise</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>DynamicModule<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">,</span>
   scope<span class="token operator">:</span> Type<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token builtin">any</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
 <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>Module <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
   <span class="token comment">// In DependenciesScanner#scanForModules we already check for undefined or invalid modules</span>
   <span class="token comment">// We still need to catch the edge-case of \`forwardRef(() =&amp;gt; undefined)\`</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>metatype<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UndefinedForwardRefException</span><span class="token punctuation">(</span>scope<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   <span class="token comment">// 生成token</span>
   <span class="token keyword">const</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> dynamicMetadata<span class="token punctuation">,</span> token <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>moduleCompiler<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>
     metatype<span class="token punctuation">,</span>
   <span class="token punctuation">)</span><span class="token punctuation">;</span> 
   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>modules<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>modules<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
  <span class="token comment">// 实例化内建Module类</span>
   <span class="token keyword">const</span> moduleRef <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Module</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
   moduleRef<span class="token punctuation">.</span>token <span class="token operator">=</span> token<span class="token punctuation">;</span>
	 <span class="token comment">// 添加在modules上</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>modules<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> moduleRef<span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addDynamicMetadata</span><span class="token punctuation">(</span>
     token<span class="token punctuation">,</span>
     dynamicMetadata<span class="token punctuation">,</span>
     <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>scope<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">,</span>
   <span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isGlobalModule</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> dynamicMetadata<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addGlobalModule</span><span class="token punctuation">(</span>moduleRef<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">return</span> moduleRef<span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>scanModulesForDependencies</code>方法会找到容器中每个 module 上的一些元数据，把对应的元数据分别添加到刚才添加到容器中的 module 上面，这些元数据就是根据上面提到的 Module 装饰器的参数生成的；</li><li><code>instanceLoader.createInstancesOfDependencies()</code></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">private</span> <span class="token keyword">async</span> <span class="token function">createInstances</span><span class="token punctuation">(</span>modules<span class="token operator">:</span> Map<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token builtin">string</span><span class="token punctuation">,</span> Module<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">await</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>
       <span class="token punctuation">[</span><span class="token operator">...</span>modules<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">async</span> moduleRef <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
         <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createInstancesOfProviders</span><span class="token punctuation">(</span>moduleRef<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createInstancesOfInjectables</span><span class="token punctuation">(</span>moduleRef<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createInstancesOfControllers</span><span class="token punctuation">(</span>moduleRef<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
         <span class="token keyword">const</span> <span class="token punctuation">{</span> name <span class="token punctuation">}</span> <span class="token operator">=</span> moduleRef<span class="token punctuation">.</span>metatype<span class="token punctuation">;</span>
         <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isModuleWhitelisted</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span>
           <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">MODULE_INIT_MESSAGE</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
     <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>遍历 modules 然后生成 provider、Injectable、controller 的实例。生成实例的顺序上也是有讲究的，controller 是最后生成的。在生成实例的过程中，nest 还会先去找到构造器中的依赖项：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> dependencies <span class="token operator">=</span> <span class="token function">isNil</span><span class="token punctuation">(</span>inject<span class="token punctuation">)</span> 
  <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reflectConstructorParams</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span>metatype <span class="token keyword">as</span> Type<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token builtin">any</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">)</span> 
  <span class="token operator">:</span> inject<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>reflectConstructorParams<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token constant">T</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">(</span>type<span class="token operator">:</span> Type<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token constant">T</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
     <span class="token keyword">const</span> paramtypes <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token constant">PARAMTYPES_METADATA</span><span class="token punctuation">,</span> type<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
     <span class="token keyword">const</span> selfParams <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reflectSelfParams<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token constant">T</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
     selfParams<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> index<span class="token punctuation">,</span> param <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">(</span>paramtypes<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> param<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">return</span> paramtypes<span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>上面代码中的的常量<code>PARAMTYPES_METADATA</code>就是 ts 中内置的；metadataKey <code>design:paramtypes</code>，获取到构造参数类型信息；然后就可以先实例化依赖项；</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">async</span> <span class="token function">instantiateClass</span><span class="token punctuation">(</span>instances<span class="token punctuation">,</span> wrapper<span class="token punctuation">,</span> targetMetatype<span class="token punctuation">,</span> contextId <span class="token operator">=</span> constants_2<span class="token punctuation">.</span><span class="token constant">STATIC_CONTEXT</span><span class="token punctuation">,</span> inquirer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token keyword">const</span> <span class="token punctuation">{</span> metatype<span class="token punctuation">,</span> inject <span class="token punctuation">}</span> <span class="token operator">=</span> wrapper<span class="token punctuation">;</span>
         <span class="token keyword">const</span> inquirerId <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getInquirerId</span><span class="token punctuation">(</span>inquirer<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token keyword">const</span> instanceHost <span class="token operator">=</span> targetMetatype<span class="token punctuation">.</span><span class="token function">getInstanceByContextId</span><span class="token punctuation">(</span>contextId<span class="token punctuation">,</span> inquirerId<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token keyword">const</span> isInContext <span class="token operator">=</span> wrapper<span class="token punctuation">.</span><span class="token function">isStatic</span><span class="token punctuation">(</span>contextId<span class="token punctuation">,</span> inquirer<span class="token punctuation">)</span> <span class="token operator">||</span>
             wrapper<span class="token punctuation">.</span><span class="token function">isInRequestScope</span><span class="token punctuation">(</span>contextId<span class="token punctuation">,</span> inquirer<span class="token punctuation">)</span> <span class="token operator">||</span>
             wrapper<span class="token punctuation">.</span><span class="token function">isLazyTransient</span><span class="token punctuation">(</span>contextId<span class="token punctuation">,</span> inquirer<span class="token punctuation">)</span> <span class="token operator">||</span>
             wrapper<span class="token punctuation">.</span><span class="token function">isExplicitlyRequested</span><span class="token punctuation">(</span>contextId<span class="token punctuation">,</span> inquirer<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token keyword">if</span> <span class="token punctuation">(</span>shared_utils_1<span class="token punctuation">.</span><span class="token function">isNil</span><span class="token punctuation">(</span>inject<span class="token punctuation">)</span> <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> isInContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
             instanceHost<span class="token punctuation">.</span>instance <span class="token operator">=</span> wrapper<span class="token punctuation">.</span>forwardRef
                 <span class="token operator">?</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>instanceHost<span class="token punctuation">.</span>instance<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">metatype</span><span class="token punctuation">(</span><span class="token operator">...</span>instances<span class="token punctuation">)</span><span class="token punctuation">)</span>
                 <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">metatype</span><span class="token punctuation">(</span><span class="token operator">...</span>instances<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span>
         <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>isInContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
             <span class="token keyword">const</span> factoryReturnValue <span class="token operator">=</span> targetMetatype<span class="token punctuation">.</span><span class="token function">metatype</span><span class="token punctuation">(</span><span class="token operator">...</span>instances<span class="token punctuation">)</span><span class="token punctuation">;</span>
             instanceHost<span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token keyword">await</span> factoryReturnValue<span class="token punctuation">;</span>
         <span class="token punctuation">}</span>
         instanceHost<span class="token punctuation">.</span>isResolved <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
         <span class="token keyword">return</span> instanceHost<span class="token punctuation">.</span>instance<span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>依赖项全部实例化后再调用<code>instantiateClass</code>方法，依赖项作为第一个参数 instances 传入。这里的<code>new metatype(...instances)</code> 把依赖项的实例作为参数全部传入。</li></ul><h3 id="执行流程图" tabindex="-1"><a class="header-anchor" href="#执行流程图" aria-hidden="true">#</a> 执行流程图</h3><p><code>NestFactory.create</code>方法的执行逻辑大概如下</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/96a647936e5d4eddba38351ea7323469~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ol><li>元数据反射是实现依赖注入的基础；</li><li>总结依赖注入的过程，nest 主要做了三件事情 <ol><li>知道哪些类需要哪些对象</li><li>创建对象</li><li>并提供所有这些对象</li></ol></li></ol><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,80),m={href:"https://docs.nestjs.com",target:"_blank",rel:"noopener noreferrer"},v={href:"https://jkchao.github.io/typescript-book-chinese/tips/metadata.html#%E5%9F%BA%E7%A1%80",target:"_blank",rel:"noopener noreferrer"},b={href:"https://angular.io/guide/dependency-injection",target:"_blank",rel:"noopener noreferrer"},y={href:"https://www.typescriptlang.org/docs/handbook/decorators.html",target:"_blank",rel:"noopener noreferrer"},h={href:"https://segmentfault.com/a/1190000011520817",target:"_blank",rel:"noopener noreferrer"},f={href:"https://developer.aliyun.com/article/382120",target:"_blank",rel:"noopener noreferrer"},w=n("li",null,"《大话设计模式》——程杰",-1),g=n("h2",{id:"推荐阅读",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#推荐阅读","aria-hidden":"true"},"#"),s(" 推荐阅读")],-1),_=n("ul",null,[n("li",null,'[sketch插件开发指南](https://juejin.cn/post/7033911797279096845 "sketch插件开发指南")'),n("li",null,'[在 Vue 中为什么不推荐用 index 做 key](https://juejin.cn/post/7026119446162997261 "在 Vue 中为什么不推荐用 index 做 key")'),n("li",null,'[浅析Web录屏技术方案与实现](https://juejin.cn/post/7028723258019020836 "浅析Web录屏技术方案与实现")')],-1),M=n("h2",{id:"开源作品",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#开源作品","aria-hidden":"true"},"#"),s(" 开源作品")],-1),x=n("ul",null,[n("li",null,"政采云前端小报")],-1),S={href:"https://www.zoo.team/openweekly/",target:"_blank",rel:"noopener noreferrer"},A=n("ul",null,[n("li",null,"商品选择 sku 插件")],-1),I={href:"https://github.com/zcy-inc/skuPathFinder-back",target:"_blank",rel:"noopener noreferrer"},C=n("h2",{id:"招贤纳士",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#招贤纳士","aria-hidden":"true"},"#"),s(" 招贤纳士")],-1),j=n("p",null,"政采云前端团队（ZooTeam），一个年轻富有激情和创造力的前端团队，隶属于政采云产品研发部，Base 在风景如画的杭州。团队现有 60 余个前端小伙伴，平均年龄 27 岁，近 4 成是全栈工程师，妥妥的青年风暴团。成员构成既有来自于阿里、网易的“老”兵，也有浙大、中科大、杭电等校的应届新人。团队在日常的业务对接之外，还在物料体系、工程平台、搭建平台、性能体验、云端应用、数据分析及可视化等方向进行技术探索和实战，推动并落地了一系列的内部技术产品，持续探索前端技术体系的新边界。",-1),T=n("p",null,[s("如果你想改变一直被事折腾，希望开始能折腾事；如果你想改变一直被告诫需要多些想法，却无从破局；如果你想改变你有能力去做成那个结果，却不需要你；如果你想改变你想做成的事需要一个团队去支撑，但没你带人的位置；如果你想改变既定的节奏，将会是“5 年工作时间 3 年工作经验”；如果你想改变本来悟性不错，但总是有那一层窗户纸的模糊… 如果你相信相信的力量，相信平凡人能成就非凡事，相信能遇到更好的自己。如果你希望参与到随着业务腾飞的过程，亲手推动一个有着深入的业务理解、完善的技术体系、技术创造价值、影响力外溢的前端团队的成长历程，我觉得我们该聊聊。任何时间，等着你写点什么，发给 "),n("code",null,"ZooTeam@cai-inc.com")],-1),R=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/98d3aa3d1f8646a8bcda8cfd9e335a4b~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1);function O(N,P){const a=l("ExternalLinkIcon");return e(),o("div",null,[u,r,n("p",null,[s("> 这是第 129 篇不掺水的原创，想获取更多原创好文，请搜索公众号关注我们吧~ 本文首发于政采云前端博客："),n("a",k,[s("聊聊 nestjs 中的依赖注入"),t(a)])]),d,n("ul",null,[n("li",null,[n("a",m,[s("nestjs官方文档"),t(a)])]),n("li",null,[n("a",v,[s("深入理解Typescript——Reflect Metadata"),t(a)])]),n("li",null,[n("a",b,[s("Dependency injection in Angular"),t(a)])]),n("li",null,[n("a",y,[s("装饰器"),t(a)])]),n("li",null,[n("a",h,[s("从 JavaScript 到 TypeScript 4 - 装饰器和反射"),t(a)])]),n("li",null,[n("a",f,[s("反射的本质——元数据"),t(a)])]),w]),g,_,M,x,n("p",null,[n("strong",null,[s("开源地址 "),n("a",S,[s("www.zoo.team/openweekly/"),t(a)])]),s(" (小报官网首页有微信交流群)")]),A,n("p",null,[n("strong",null,[s("开源地址 "),n("a",I,[s("https://github.com/zcy-inc/skuPathFinder-back/"),t(a)])])]),C,j,T,R])}const E=p(i,[["render",O],["__file","聊聊 nestjs 中的依赖注入.html.vue"]]);export{E as default};
