import{_ as i,z as c,A as t,Y as e,C as n,U as a,a6 as d,Q as l}from"./framework-cb9358d9.js";const r={},s=e("p",null,[e("img",{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bfefad3ee3474e3a8a461251aaddceb4~tplv-k3u1fbpfcp-watermark.image?",alt:"政采云技术团队.png"})],-1),p=e("p",null,[e("img",{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fee8962bada1431e9445ab66999b9721~tplv-k3u1fbpfcp-watermark.image?",alt:"前端作者卡片模板.png"})],-1),u={href:"http://zoo.zhengcaiyun.cn/blog/article/code-shape",target:"_blank",rel:"noopener noreferrer"},m=d('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>众所周知，js 的基本数据类型有 <code>number</code> 、 <code>string</code> 、 <code>boolean</code> 、 <code>null</code> 、 <code>undefined</code> 等。那么问题来了 <code>typeof null</code> 和 <code>typeof undefined</code> 分别是什么呢？<code>var 、 const 、 let</code> 变量提升？暂时性死区又是什么东西？以前刚学 js 的时候有人跟我说 <code>===</code> 相比于 <code>==</code> 不仅比较值还要比较类型，难道不是这样的？</p><h2 id="js引擎与v8" tabindex="-1"><a class="header-anchor" href="#js引擎与v8" aria-hidden="true">#</a> js引擎与V8</h2><p>通常我们说的浏览器的内核一般是指支持浏览器运行的最核心的程序，分为两个部分，也就是<strong>渲染引擎</strong>和<strong>JS引擎</strong>。渲染引擎负责解析 HTML，然后进行布局，渲染等工作。而 js 引擎顾名思义就是解析并且执行 js 代码的。</p><p>一些常见浏览器 js 引擎，比方说老版本 IE 使用 Jscript 引擎，而 IE9 之后使用的 Chakra 引擎。safari 使用的是 SquirrelFish 系列引擎。firefox 使用 monkey 系列引擎。chrome 使用 V8 引擎，而且 nodeJs 其实上就是基于 V8 引擎做了进一步封装。我们今天讨论的内容也都是基于 V8 引擎的。</p>',5),b={href:"https://juejin.cn/post/6971586506011967519",target:"_blank",rel:"noopener noreferrer"},h=d(`<p>首先，我们先认识下这个模型：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/77e9a0c08ba340489c3316aae2f72a40~tplv-k3u1fbpfcp-zoom-1.image" alt="709a51798fec46999ba539e081a0391b_tplv-k3u1fbpfcp-watermark.png"></p><p>V8内存大体上可以分为：<code>栈</code>、<code>堆</code>、<code>常量池</code>这三大区域，当然其他的一些（甚至比方说 buffer 模块需要调配更加底层的 C++ 内存）模块不在本次讨论范围所以没有体现。图中清晰的体现了 js 基本数据类型在内存中的存储情况。</p><h2 id="_1-栈。" tabindex="-1"><a class="header-anchor" href="#_1-栈。" aria-hidden="true">#</a> 1.栈。</h2><p>栈内存结构最大的特点就是小且存储连续，操作起来简单方便。在 js 中，变量名是用来保存内存中某块内存区的地址的，而栈区就是用来保存变量名和内存地址的键值对的，所以我们就可以通过变量名获取或者操作某一内存地址上的内容。<strong>而 undefined 正是栈空间中表示未定义含义的一块特殊的固定的内存区域</strong>。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>console.log(b); // undefined
var a;
var b = &amp;#39;政采云前端团队&amp;#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然而，js 引擎在实际执行代码之前，会先从上往下依次处理变量提升和函数定义，然后再按序执行。拿以上代码块为例，这一过程在内存中的具体体现就是：</p><ul><li>先会在栈空间中定义好 a 、 b ，并且在变量提升阶段 a 和 b 的指针会指向到 undefined。</li><li>然后会从上往下依次执行代码。</li><li>执行到赋值（=）语句时，则会将变量b指向的内存地址修改为常量池中1对应的物理地址。</li></ul><h2 id="_2-常量池" tabindex="-1"><a class="header-anchor" href="#_2-常量池" aria-hidden="true">#</a> 2.常量池</h2><p>顾名思义，常量池就是用来存储常量的，包括 <code>string</code>、<code>number</code>、<code>boolean</code> 这三个基本类型的数据。常量池最大的特点就是：</p><ul><li>它在整个内存中是唯一的。</li><li>常量池区域是唯一的。</li><li>并且常量也是唯一的。</li></ul><p>所以这也就是为什么 <code>a===b</code> 是 true，因为 <code>===</code> 比较的是变量 a 和 b 在内存中的指针指向的物理地址是否相等。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>var a = &amp;#39;政采云前端团队&amp;#39;;
var b = &amp;#39;政采云前端团队&amp;#39;；
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-堆" tabindex="-1"><a class="header-anchor" href="#_3-堆" aria-hidden="true">#</a> 3.堆</h2><p>相对于栈和池来说，堆的存储形态会更加复杂。但是从另一个抽象的角度来说，堆区域却又是最单一的，因为存放在堆区域的都是 <code>object</code>。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>typeof {}; // object
typeof []; // object
typeof null; // object
typeof new Date(); // object
typeof new RegExp(); // object
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么就有人要问了，<code>null</code> 不是基本类型么，为什么 <code>typeof null</code> 又是 <code>object</code> 呢？</p><p>其实正如上文对 <code>undefined</code> 的定义那样，js 引擎对于 <code>null</code> 的基本定义其实是，在堆内存空间中的具有固定内存地址且唯一存在的一个内置对象。所以这就是 <code>null</code> 和 <code>undefined</code> 本质上的区别所在。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>name = &amp;#39;政采云前端团队&amp;#39;
var a = {
    name: &amp;#39;政采云前端团队&amp;#39;
}
console.log(name === a.name); // true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际上，堆内存中的情况是非常复杂但又是非常精妙的。比方，上面这小段代码，执行过程中会在栈中创建 <code>a</code> 和 <code>name</code> 两个变量。针对于给 <code>a</code> 赋值的这个对象，v8 会在堆区中分配一块内存区域。并且区域内部依然会有内部的栈区和堆区，这就是精妙的分型思想。而 <code>name === a.name</code> 也侧面引证了常量的唯一。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e1ad81f22dd8448cb2593057ce31ea0c~tplv-k3u1fbpfcp-zoom-1.image" alt="4147652983.png"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f955d36cf4c644648ad180d66d46bab9~tplv-k3u1fbpfcp-zoom-1.image" alt="1757034154.png"></p><p>可能就会有细心的小伙伴会发现，图中还有两个很大的黄色区域，貌似是和函数有关。并且上文刚刚还说堆区里面都是 <code>object</code> ？也可能会有一些大佬看到此处会微微一笑，这个人接下来肯定要开始扯什么 <code>new Function()</code> 。所以 <code>function</code> 从定义的抽象上来说也是 <code>object</code> 了。</p><h2 id="_4-函数" tabindex="-1"><a class="header-anchor" href="#_4-函数" aria-hidden="true">#</a> 4.函数</h2><p>是的，在介绍完基础且常用的三大区域后，接下来我们来聊一聊函数。但是，我们换个角度，还是回到这个模型上来尝试去理解一下函数的执行、函数的继承以及闭包。</p><p>上代码：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>function Animal(name) {
    this.name = name;
}
​
Animal.prototype.eat = function () {
    console.log(&amp;#39;Animal eat&amp;#39;);
};
​
function Dog(name) {
    Animal.apply(this, arguments);
}
​
var animal = new Animal();
​
Dog.prototype = animal;
Dog.prototype.constructor = Dog;
var dog = new Dog();
dog.eat();
​
console.log(Animal.prototype === animal.__proto__); // true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是一段比较标准的组合继承的例子，相信这种代码片段对大家来说应该再熟悉不过了。那么这样的一段代码的运行过程在实际内存中是什么样的一个过程呢？</p><p>首先，如下左图，在代码执行之前会进行变量提升和函数定义，所以会在变量栈和函数定义区中准备好 <code>obj</code> 、 <code>Animal</code> 、 <code>dog</code> 以及一个不容发现的匿名函数。这里要注意一个点，就是 <code>var a = function() {}</code> 和 <code>function a(){}</code> 是两个完全不同的概念，给个眼神自己体会。</p><p>并且在函数定义时会，就会创建一个对象空间。函数的 <code>prototype</code> 属性指向到这个地址，这就是函数的原型对象。同时对象内存空间的内部又将会划分出栈结构空间和堆结构空间。娃，又套上了～</p><p>后续会在赋值语句时，将 <code>Animal.proptotype.eat</code> 指向到匿名函数。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ed5f862968ef4ba992f273c67fa5f772~tplv-k3u1fbpfcp-zoom-1.image" alt="1579414131.png"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2559f64e06184675acc01afe8db4d822~tplv-k3u1fbpfcp-zoom-1.image" alt="3258035781.png"></p><p>至此，变量定义、函数定义以及赋值操作这些基础的过程已经梳理完成。</p><p>我们发现，<code>new Animal()</code> 、<code>new Dog()</code> 的这部分刚刚并没有提到。因为它们还要特殊，我们继续深入。</p><p>如上右图，其实，js 在执行 <code>var animal = new Animal();</code> 这种 new 操作符的时候，js 引擎会在栈空间的函数缓存区中创建一块空间用于保存该函数运行所需要存储的状态和变量。空间中有一个 <code>__proto__</code> 属性指向到构造函数的 <code>prototype</code> ，也就是图中的 <code>Animal.prototype</code>。这也就从内存的角度解释了为什么 <code>Animal.prototype === animal.__proto__</code> 会是 <code>true</code> 。</p><p>实际上，在 <code>new Animal()</code> 执行完之后，本来 GC 就会清除掉函数的缓存区内存，释放空间。但是由于我们定义了一个 <code>obj</code> 变量，这个变量的内存地址是指向到这块缓存区，所以阻止了 GC 对这块内存的回收。这种问题在闭包问题中尤为典型。我们可以通过定义一个变量来阻止 GC 回收已经运行完的闭包函数的缓存区内存块，从而达到保护闭包内部的状态。然后在我们希望释放闭包空间的时候，将该变量置为 <code>null</code> ，从而在下一个 GC 周期时释放该内存区域。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>function fn() {
  var a = 1;
  return function () {
    console.log(a);
  };
}
var onj = fn();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，我们通过 <code>Dog.prototype = animal;</code> ，将 Dog 的原型指向到了缓存区中的白色区域。我们可以通过打印 <code>Dog.prototype === animal</code> 和 <code>Dog.prototype.__proto__ ===Animal.prototype</code>以及 <code>dog.__proto__ === animal</code> 的方式来验证图中的指向关系。这也就是原型继承在具体内存模型中的过程。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1b6c8970e63342fd908c7dddddc1d283~tplv-k3u1fbpfcp-zoom-1.image" alt="1150827688.png"></p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>在代码的学习过程中，难免会觉得枯燥，而且有很多内容抽象难懂。强行死记硬背，不去知其所以然的话容易了解片面甚至理解错误，更何况也非常没有乐趣。借助于这种看得见摸得着的模型去理解和分析代码实际运行的情况会帮助理解，并且能够发现其中的设计精妙之处。</p>`,42),v={href:"https://juejin.cn/post/6909239354418266119",target:"_blank",rel:"noopener noreferrer"},f=e("h2",{id:"参考文档",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#参考文档","aria-hidden":"true"},"#"),n(" 参考文档")],-1),_={href:"https://zhuanlan.zhihu.com/p/446584471",target:"_blank",rel:"noopener noreferrer"},g=e("h2",{id:"推荐阅读",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#推荐阅读","aria-hidden":"true"},"#"),n(" 推荐阅读")],-1),j={href:"https://juejin.cn/post/7174190020297752613",target:"_blank",rel:"noopener noreferrer"},k={href:"https://juejin.cn/post/7169004126469914654",target:"_blank",rel:"noopener noreferrer"},x={href:"https://juejin.cn/post/7166416369943068679",target:"_blank",rel:"noopener noreferrer"},y={href:"https://juejin.cn/post/7163801933612843016",target:"_blank",rel:"noopener noreferrer"},w={href:"https://juejin.cn/post/7153410606673395725",target:"_blank",rel:"noopener noreferrer"},z=e("h2",{id:"开源作品",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#开源作品","aria-hidden":"true"},"#"),n(" 开源作品")],-1),A=e("ul",null,[e("li",null,"政采云前端小报")],-1),V={href:"http://zoo.zhengcaiyun.cn/",target:"_blank",rel:"noopener noreferrer"},C=e("ul",null,[e("li",null,"商品选择 sku 插件")],-1),D={href:"https://github.com/zcy-inc/skuPathFinder-back",target:"_blank",rel:"noopener noreferrer"},G=e("h2",{id:"招贤纳士",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#招贤纳士","aria-hidden":"true"},"#"),n(" 招贤纳士")],-1),T=e("p",null,"政采云前端团队（ZooTeam），一个年轻富有激情和创造力的前端团队，隶属于政采云产品研发部，Base 在风景如画的杭州。团队现有 90 余个前端小伙伴，平均年龄 27 岁，近 4 成是全栈工程师，妥妥的青年风暴团。成员构成既有来自于阿里、网易的“老”兵，也有浙大、中科大、杭电等校的应届新人。团队在日常的业务对接之外，还在物料体系、工程平台、搭建平台、性能体验、云端应用、数据分析及可视化等方向进行技术探索和实战，推动并落地了一系列的内部技术产品，持续探索前端技术体系的新边界。",-1),E=e("p",null,[n("如果你想改变一直被事折腾，希望开始能折腾事；如果你想改变一直被告诫需要多些想法，却无从破局；如果你想改变你有能力去做成那个结果，却不需要你；如果你想改变你想做成的事需要一个团队去支撑，但没你带人的位置；如果你想改变既定的节奏，将会是“5 年工作时间 3 年工作经验”；如果你想改变本来悟性不错，但总是有那一层窗户纸的模糊… 如果你相信相信的力量，相信平凡人能成就非凡事，相信能遇到更好的自己。如果你希望参与到随着业务腾飞的过程，亲手推动一个有着深入的业务理解、完善的技术体系、技术创造价值、影响力外溢的前端团队的成长历程，我觉得我们该聊聊。任何时间，等着你写点什么，发给 "),e("code",null,"ZooTeam@cai-inc.com")],-1),B=e("p",null,[e("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/98d3aa3d1f8646a8bcda8cfd9e335a4b~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1);function F(I,J){const o=l("ExternalLinkIcon");return c(),t("div",null,[s,p,e("p",null,[n("> 这是第 168 篇不掺水的原创，想获取更多原创好文，请搜索公众号关注我们吧~ 本文首发于政采云前端博客："),e("a",u,[n("代码在内存中的'形状'"),a(o)])]),m,e("p",null,[n("我们知道 js 引擎（V8）在拿到代码之后，会进行词法分析，将 js 代码拆分成对应的 Token，然后再根据 Token 继续生成对应的 AST，也就是语法分析的过程。而在这一过程中肯定也伴随着很多的优化策略。有兴趣的同学可以阅读下我们之前的一篇非常不错的文章"),e("a",b,[n("《V8 执行 Javascript 过程》"),a(o)]),n("。在这里呢，笔者将从 V8 执行代码过程中实际操作内存的角度来进行进一步的分享。")]),h,e("p",null,[n("文中最后部分多次提及到 GC，其实 GC 的模型设计的也是非常巧妙，非常有意思的。可以移步至"),e("a",v,[n("《V8 引擎垃圾回收与内存分配》"),a(o)]),n("继续阅读。有兴趣的同学可以尝试将 GC 的模型和这个 V8 内存模型结合在一起去思考下代码运行和回收的全过程。而且 GC 还只是管理堆空间的垃圾回收，那么栈空间又是以什么方式进行自我回收的呢？还有很多很多有趣的东西值得我们思考～")]),f,e("ul",null,[e("li",null,[e("a",_,[n("浏览器内核、排版引擎、js引擎"),a(o)])])]),g,e("p",null,[e("a",j,[n("前端本地化部署"),a(o)])]),e("p",null,[e("a",k,[n("Rollup 与 Webpack 的 Tree-shaking"),a(o)])]),e("p",null,[e("a",x,[n("Git 是如何工作的"),a(o)])]),e("p",null,[e("a",y,[n("大数据前端团队生存指南"),a(o)])]),e("p",null,[e("a",w,[n("所见即所得 —— HTML转图片组件开发"),a(o)])]),z,A,e("p",null,[e("strong",null,[n("开源地址 "),e("a",V,[n("www.zoo.team/openweekly/"),a(o)])]),n(" (小报官网首页有微信交流群)")]),C,e("p",null,[e("strong",null,[n("开源地址 "),e("a",D,[n("https://github.com/zcy-inc/skuPathFinder-back/"),a(o)])])]),G,T,E,B])}const N=i(r,[["render",F],["__file","代码在内存中的'形状'.html.vue"]]);export{N as default};
