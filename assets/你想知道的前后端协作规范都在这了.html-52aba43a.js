import{_ as e,z as t,A as o,Y as n,C as a,U as p,a6 as l,Q as c}from"./framework-cb9358d9.js";const i={},r=l(`<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bfefad3ee3474e3a8a461251aaddceb4~tplv-k3u1fbpfcp-watermark.image?" alt="政采云技术团队.png"></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/19edac65d0f24d80b2d945ceb06a339a~tplv-k3u1fbpfcp-watermark.image?" alt="商陆.png"></p><p>&gt; 这是第 158 篇不掺水的原创，想获取更多原创好文，请搜索公众号【政采云前端团队】关注我们吧~</p><h4 id="一-前言" tabindex="-1"><a class="header-anchor" href="#一-前言" aria-hidden="true">#</a> 一. 前言</h4><p>你是否在为如何制定前后端协作规范而发愁？干货来啦，一文带你了解我们团队内部沉淀并践行已久的前后端协作规范，读完本文，回去大胆拒绝你后端的不合理设计！</p><h4 id="二-为什么需要协作规范" tabindex="-1"><a class="header-anchor" href="#二-为什么需要协作规范" aria-hidden="true">#</a> 二. 为什么需要协作规范？</h4><p>假如你要在团队内部推一套规范，那么首先你得知道为什么需要制定协作规范呢？有规范会带来什么好处呢？</p><p>随着前后端分离开发模式大行其道，前端和后端已经在两个方向上渐行渐远，各自深耕细作、术业专攻。前端更加关注交互视觉体验，而后端对高并发、高性能、高扩展上要求更高。这就导致大部分的前端和后端之间会存在所谓的&quot;代沟&quot;，我不知道你的数据如何存储，你不知道我的页面如何渲染。</p><p>因此，很有必要制定前后端开发上的规范来抹平代沟，有了协作规范，便有了前后端开发默契，也因此达到了提高开发效率、降低沟通成本的作用。</p><h4 id="三-协作流程规范" tabindex="-1"><a class="header-anchor" href="#三-协作流程规范" aria-hidden="true">#</a> 三. 协作流程规范</h4><p>首先是协作的流程规范，相信每个团队在前后端协作中都有各自的开发模式和开发流程来保障效率和质量，我们团队的前后端协作大致流程如下图所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/204e6803eaf44d7aac2267fc6f351f72~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220825230352601.png"></p><ol><li>需求导入、交互视觉导入分析 ：对产品导出的需求，参会各方包括产品、前端、后端、测试、UED，在对需求的认知上要达成一致，这是开发的第一步。</li><li>接口设计、前后端对接接口：后端给出接口，前后端要在接口字段设计上达成大致方向上的一致。</li><li>技术方案评审 ：在开发之前进行技术方案评审，再次确保各方在需求的认知上统一，并且双方就接口字段可行性上再次确认。</li><li>并行开发 、前后端自测：前后端并行开发，在此阶段前端可以 mock 数据进行页面渲染。</li><li>开发环境联调：前后端自测完成之后在开发环境上完成接口联调。</li></ol><h4 id="四-如何做接口规范" tabindex="-1"><a class="header-anchor" href="#四-如何做接口规范" aria-hidden="true">#</a> 四. 如何做接口规范？</h4><ol><li>前置约定：</li></ol><ul><li>后端接口定义 URL、出入参之前，<strong>前后端需达成一致</strong>。</li></ul><ol start="2"><li>文档规范：</li></ol><ul><li><p>接口注释需要写清楚：模块、枚举、必填/非必填、出参是否可能为 null</p></li><li><p>接口需要向下兼容，如果不兼容需要评估并且通知相应的业务方</p></li><li><p>接口文档上面有变更需及时同步前端</p></li><li><p>后端需保证文档上定义的参数，可以正常请求接口且功能正常稳定</p></li></ul><ol start="3"><li>计量单位约定：</li></ol><ul><li>时间：统一使用 13 位时间戳</li><li>金额：统一为分，可根据业务情况选择</li></ul><ol start="4"><li>请求接口 URL &amp; 请求方式</li></ol><ul><li><p>Post 接口不允许使用 Get 传参方式</p></li><li><p>Post 接口必须使用 <code>application/json</code> 模式</p></li><li><p>接口命名应尽量符合语义，接口命名不要过于相似，难区分，易混淆</p></li></ul><ol start="5"><li>入参</li></ol><ul><li>保证同一应用领域内，相同含义的字段，命名保持一致</li><li>业务编号 / ID 必须为<strong>字符串类型</strong>，JS 对最大数字有限制</li><li>同一个页面不同 Tab，接口尽量保证一致</li></ul><ol start="6"><li>出参</li></ol><ul><li>接口出参格式要统一</li><li>接口不要返回类似 &quot;服务器内部异常&quot;、&quot;网络异常&quot; 这种无法理解的错误信息，非线上环境可以返回错误堆栈，方便排查问题</li><li>前后端数据列表相关的接口，如果返回为空，则返回空数组 <code>[]</code> 或空集合 <code>{}</code>，有利于数据层面上的协作更加高效，减少前端很多琐碎的 null 值判断，特殊情况特殊分析</li><li>接口出参根据页面需求返回有效字段，避免吐出过多无用字段</li><li>枚举值尽量返回中文和英文描述</li></ul><h4 id="五-协作中的bad-case" tabindex="-1"><a class="header-anchor" href="#五-协作中的bad-case" aria-hidden="true">#</a> 五. 协作中的Bad Case</h4><p>以下总结了我们团队内部在协作中遇到的比较典型的 Bad Case 以及解决方案，我相信大家在开发过程中也遇到过类似的痛点经历：</p><h5 id="类型-1-前端过多的条件逻辑判断" tabindex="-1"><a class="header-anchor" href="#类型-1-前端过多的条件逻辑判断" aria-hidden="true">#</a> 类型 1：前端过多的条件逻辑判断</h5><p>【现象】</p><ol><li>按钮、组件显示与否，前端要通过大量的字段进行条件逻辑判断；同一页面不同场景前端调用的接口不一样</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 按钮文案、显示逻辑</span>
<span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token constant">RESULT_CONFIRM</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> isCurrentUserCreate<span class="token punctuation">)</span> <span class="token operator">||</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token constant">RESULT_CHECK</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> isCurrentUserCreate <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> currentUserCanCheck <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>Button<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>确认<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>Button<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">}</span>

 <span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token constant">DREFT</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token constant">AUDIT_FAILD</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token constant">REVOKE</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span>state<span class="token punctuation">)</span> <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> isCurrentUserCreate <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>Button<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>修改<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>Button<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">}</span>
 
<span class="token comment">// A 场景调用接口 1，B 场景调用接口 2，C 场景调用接口 3 和 4</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>operation <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>修改<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fetchInfo</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fetchSourceInfo</span><span class="token punctuation">(</span>id<span class="token operator">:</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fetchBasicInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3451fc4eb7b443fc8d62e63fcbf71588~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220823234007383.png"></p><p>【解决】</p><ol><li>控制前端显示逻辑判定都放在后端去做处理，前端尽可能减少字段判定。</li></ol><p><strong>注：如果功能简单，前端也可以做判断</strong>，如何鉴定是否简单？从代码层面比如 If 判断中超过 2 个条件，按钮显示超过 2 个条件，可视作复杂逻辑，逻辑移到后端处理。建议一开始就视作复杂去处理，这样后期就不用再调整。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 按钮展示</span>
前后端约定好 按钮的显示返回一个数组，数组具体返回哪些逻辑写在后端。
<span class="token punctuation">[</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>确认<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>，type<span class="token operator">:</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>resultConfirm<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>修改<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>，type<span class="token operator">:</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>edit<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>【好处】</p><ol><li>将逻辑收敛到后端，<strong>出现问题或者更改逻辑时只需一方排查或修改</strong>。即能一端完成的，绝不让两个端干， 两个就可能会出现不一致的问题。</li></ol><h5 id="类型-2-前端二次数据加工过多" tabindex="-1"><a class="header-anchor" href="#类型-2-前端二次数据加工过多" aria-hidden="true">#</a> 类型 2：前端二次数据加工过多</h5><p>【现象】</p><ol><li>页面上同一个表格展示的数据是两个接口拼接而成</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e3ecfd5abd9a4f80931504fc2e322b5c~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220824174620804.png"></p><ol start="2"><li>接口数据返回格式不符合前端渲染逻辑，需要二次加工</li></ol><p>【解决】</p><p>1、后端做好数据的整合，避免数据在前端的重组。</p><p>2、Tree 数据展示的场景，如果数据不大后端全量返回，如果数据量过大异步返回，但异步返回存在后续的回显和搜索展示方面问题。</p><p>3、同一个业务功能，一个接口搞定，不要分接口进行，后端业务考虑复用可包装新接口或原接口加参数兼容。</p><p>【好处】</p><ol><li>减少前后端数据处理的成本，提高性能和用户体验</li></ol><h5 id="类型-3-枚举值、下拉框数据由前端维护" tabindex="-1"><a class="header-anchor" href="#类型-3-枚举值、下拉框数据由前端维护" aria-hidden="true">#</a> 类型 3：枚举值、下拉框数据由前端维护</h5><p>【现象】</p><ol><li>列表页单据状态由前端维护枚举值，如果新增枚举都需要前后端更改，可能导致最终显示状态不统一</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 状态值映射</span>
<span class="token keyword">const</span> getStatusName <span class="token operator">=</span> <span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
  <span class="token keyword">switch</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>草稿<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>；
    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>待部门审批<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> 
      <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>待财务审核<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span> 
      <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>待单位审核<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span> 
      <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>审核中<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
    <span class="token operator">...</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>【解决】</p><ol><li><p>确保状态可扩展，后端已经做了枚举的情况下，前端不需维护状态值，以后端提供接口为准。</p><p><strong>如果是状态定死的情况下譬如：选项为【是、否】可无需后端返回。</strong></p></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 由后端接口返回下拉框选项</span>
<span class="token punctuation">{</span>
  <span class="token literal-property property">result</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
    <span class="token literal-property property">code</span><span class="token operator">:</span> string
    <span class="token literal-property property">name</span><span class="token operator">:</span> string
  <span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>【好处】</p><ol><li>枚举值变动时，只需后端更新，也避免了迭代过程中出现的前后端不一致的情况</li></ol><h5 id="类型-4-pc-端数据结构不适用-app-端" tabindex="-1"><a class="header-anchor" href="#类型-4-pc-端数据结构不适用-app-端" aria-hidden="true">#</a> 类型 4：PC 端数据结构不适用 App 端</h5><p>【现象】</p><ol><li>App 端的布局样式 是较 PC 端略复杂的，如果 App 端一味采用 PC 端的接口数据，是需要前端做特殊处理的。比如，同一时间的单据 App 端放在同一张卡片内，卡片内部的标题、内容、按钮展示也做了情况区分。</li></ol><p>【解决】</p><ol><li>判断前端处理工作量，后端需新增接口实现 App 不同的功能。</li></ol><p>【好处】</p><ol><li>减少前端处理逻辑的成本，提高 App 上的用户体验</li></ol><h5 id="类型-5-同一业务领域同一含义的接口字段命名不统一" tabindex="-1"><a class="header-anchor" href="#类型-5-同一业务领域同一含义的接口字段命名不统一" aria-hidden="true">#</a> 类型 5：同一业务领域同一含义的接口字段命名不统一</h5><p>【现象】</p><ol><li>关于返回结果： <code>response.data</code>、 <code>response.result</code></li><li>关于时间：<code>createAt</code>、<code>queryEffectStartingBeginTime</code>、<code>penaltyBeginTime</code></li><li>关于名称：<code>punishedInstitutionName</code>、<code>responderName</code>、<code>penaltyObjectName</code></li><li>关于 Id: <code>punishedOrganizationId</code>，<code>penaltyObjectId</code></li></ol><p>【解决】</p><ol><li>前后端共同维护一份字段词典，保持同一业务领域下命名一致，避免不必要的字段转换。</li></ol><h5 id="类型-6-金额计算结果由前端提交给后端并入库" tabindex="-1"><a class="header-anchor" href="#类型-6-金额计算结果由前端提交给后端并入库" aria-hidden="true">#</a> 类型 6：金额计算结果由前端提交给后端并入库</h5><p>【现象】</p><ol><li>前端页面中，输入支付金额并除以总额，然后计算出支付比例，最后点击保存按钮将数据提交给后端接口；</li></ol><p>【解决】</p><ol><li>对于金额的计算：以是否入库为界限，非入库纯展示可前端计算，<strong>入库的统一由后端计算</strong>。</li></ol><h5 id="类型-7-前端维护业务配置类型的代码" tabindex="-1"><a class="header-anchor" href="#类型-7-前端维护业务配置类型的代码" aria-hidden="true">#</a> 类型 7：前端维护业务配置类型的代码</h5><p>【现象】</p><ol><li>由多个表单项（下拉框、输入框、单选框等）的值作为条件判断某一表单项（附件、单选框、输入框等）是否必填、显示或隐藏。因此，前端需要写很多动态校验逻辑，并且涉及到每个区划的动态校验逻辑还不一样，有的校验条件还是写死的。</li></ol><p>【解决】</p><ol><li><p>配置校验规则的页面可根据区划配置后生成标识码，然后后端可提供一个通用的校验接口，前端把值传给后端，然后返回校验结果是否通过。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 入参：</span>
<span class="token punctuation">{</span>
  <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token number">99900</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token comment">// 区划代码</span>
  <span class="token literal-property property">identity</span><span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token number">11111</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token comment">// 标识码</span>
  <span class="token literal-property property">datas</span><span class="token operator">:</span><span class="token punctuation">[</span> <span class="token comment">// 数据</span>
   <span class="token punctuation">{</span>
     <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>catalog<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
     <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token constant">A07</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
   <span class="token punctuation">}</span><span class="token punctuation">,</span>
   <span class="token punctuation">{</span>
     <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>assetApproval<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
     <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
   <span class="token punctuation">}</span>
 <span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token comment">// 返回值：</span>
<span class="token punctuation">{</span>
  <span class="token literal-property property">result</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h5 id="类型-8-前端直接调用其它业务线后端的接口" tabindex="-1"><a class="header-anchor" href="#类型-8-前端直接调用其它业务线后端的接口" aria-hidden="true">#</a> 类型 8：前端直接调用其它业务线后端的接口</h5><p>【现象】</p><ol><li><p><strong>业务线 A 列表</strong>页面，点击新建按钮，弹框调用**业务线 B **那边的接口。</p><p>由于 A 和 B 是不同业务线后端，接口对接以及后期的沟通维护成本会比较高。例如该接口发生改动，需要跨业务线通知到对应的前端（该后端还不一定知道前端是哪位）；并且接口返回的大量字段前端都用不到。</p></li></ol><p>【解决】</p><ol><li>后台业务耦合的情况下需要自己业务线后端整合数据；如果只是为了展示非自己业务的数据后端不处理</li></ol><h5 id="类型-9-后端分页接口的数据返回格式不统一" tabindex="-1"><a class="header-anchor" href="#类型-9-后端分页接口的数据返回格式不统一" aria-hidden="true">#</a> 类型 9：后端分页接口的数据返回格式不统一</h5><p>【现象】</p><ol><li><p>目前分页接口的数据返回格式不统一，已有如下几种形式：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 形式一：</span>
<span class="token punctuation">{</span>
  <span class="token literal-property property">result</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token literal-property property">total</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 形式二：</span>
<span class="token punctuation">{</span>
  <span class="token literal-property property">result</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">pagination</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">total</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      <span class="token literal-property property">pageSize</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
      <span class="token literal-property property">pageNo</span><span class="token operator">:</span> <span class="token number">1</span>
    <span class="token punctuation">}</span>，
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 形式三：</span>
<span class="token punctuation">{</span>
  <span class="token literal-property property">result</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">total</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token literal-property property">pageSize</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
    <span class="token literal-property property">pageNo</span><span class="token operator">:</span> <span class="token number">1</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>【解决】</p><ol><li>建议后端接口统一格式如形式三。</li></ol><h5 id="类型-10-后端一个接口拆分多个" tabindex="-1"><a class="header-anchor" href="#类型-10-后端一个接口拆分多个" aria-hidden="true">#</a> 类型 10：后端一个接口拆分多个</h5><p>【现象】</p><ol><li>一个表单页，在提交之前调用三个不同的校验接口。三个校验接口入参也不一样，前端需要组装各种类型的数据。</li></ol><p>【解决】</p><ol><li>多个校验接口和提交接口合并成一个提交接口。</li><li>校验不通过时，接口返回值里区分阻塞式和提醒式</li></ol><ul><li><p>阻塞式：弹框告警，用户只能关闭弹框</p></li><li><p>提醒式：弹框询问，在用户点击&quot;继续提交&quot;后，继续调用提交接口，此时增加入参标识跳过此步校验</p></li></ul><h4 id="六-效果" tabindex="-1"><a class="header-anchor" href="#六-效果" aria-hidden="true">#</a> 六. 效果</h4><p>基于一套合理可行的协作规范，前后端从开发到上线的各个阶段都能够看到诸多成效：</p><ol><li>降低沟通成本，减少不必要的扯皮， 加快开发进度；</li><li>缩短联调时间，减少联调阶段的代码调整，保证了开发效率；</li><li>减少测试阶段的排查问题归属，加快测试进度，保证质量；</li><li>方便线上问题排查及修复。</li></ol><h4 id="七-总结" tabindex="-1"><a class="header-anchor" href="#七-总结" aria-hidden="true">#</a> 七. 总结</h4><p>一言以蔽之：如果你发现前端在处理大量的逻辑，那么就是协作规范存在问题啦！前端更多的是关注交互、渲染上的逻辑，应尽量避免复杂的业务逻辑处理。万事开头难！推一套规范是需要时间去沉淀的，前端和后端同学都应多些耐心，多些理解。</p><h2 id="推荐阅读" tabindex="-1"><a class="header-anchor" href="#推荐阅读" aria-hidden="true">#</a> 推荐阅读</h2>`,103),u={href:"https://juejin.cn/post/7135217402983235592",target:"_blank",rel:"noopener noreferrer"},k={href:"https://juejin.cn/post/7132628898453880840",target:"_blank",rel:"noopener noreferrer"},d={href:"https://www.zoo.team/article/http-referer",target:"_blank",rel:"noopener noreferrer"},m={href:"https://juejin.cn/post/7127440050937151525",target:"_blank",rel:"noopener noreferrer"},v={href:"https://juejin.cn/post/7124839474575441934",target:"_blank",rel:"noopener noreferrer"},b=n("h2",{id:"开源作品",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#开源作品","aria-hidden":"true"},"#"),a(" 开源作品")],-1),h=n("ul",null,[n("li",null,"政采云前端小报")],-1),y={href:"https://www.zoo.team/openweekly/",target:"_blank",rel:"noopener noreferrer"},f=n("ul",null,[n("li",null,"商品选择 sku 插件")],-1),g={href:"https://github.com/zcy-inc/skuPathFinder-back",target:"_blank",rel:"noopener noreferrer"},_=n("h2",{id:"招贤纳士",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#招贤纳士","aria-hidden":"true"},"#"),a(" 招贤纳士")],-1),w=n("p",null,"政采云前端团队（ZooTeam），一个年轻富有激情和创造力的前端团队，隶属于政采云产品研发部，Base 在风景如画的杭州。团队现有 90 余个前端小伙伴，平均年龄 27 岁，近 4 成是全栈工程师，妥妥的青年风暴团。成员构成既有来自于阿里、网易的“老”兵，也有浙大、中科大、杭电等校的应届新人。团队在日常的业务对接之外，还在物料体系、工程平台、搭建平台、性能体验、云端应用、数据分析及可视化等方向进行技术探索和实战，推动并落地了一系列的内部技术产品，持续探索前端技术体系的新边界。",-1),j=n("p",null,[a("如果你想改变一直被事折腾，希望开始能折腾事；如果你想改变一直被告诫需要多些想法，却无从破局；如果你想改变你有能力去做成那个结果，却不需要你；如果你想改变你想做成的事需要一个团队去支撑，但没你带人的位置；如果你想改变既定的节奏，将会是“5 年工作时间 3 年工作经验”；如果你想改变本来悟性不错，但总是有那一层窗户纸的模糊… 如果你相信相信的力量，相信平凡人能成就非凡事，相信能遇到更好的自己。如果你希望参与到随着业务腾飞的过程，亲手推动一个有着深入的业务理解、完善的技术体系、技术创造价值、影响力外溢的前端团队的成长历程，我觉得我们该聊聊。任何时间，等着你写点什么，发给 "),n("code",null,"ZooTeam@cai-inc.com")],-1),x=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/98d3aa3d1f8646a8bcda8cfd9e335a4b~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1);function C(B,A){const s=c("ExternalLinkIcon");return t(),o("div",null,[r,n("p",null,[n("a",u,[a("带你了解 Tree Shaking"),p(s)])]),n("p",null,[n("a",k,[a("厉害！这篇正则表达式竟写的如此详尽"),p(s)])]),n("p",null,[n("a",d,[a("学习 HTTP Referer"),p(s)])]),n("p",null,[n("a",m,[a("浅谈低代码平台远程组件加载方案"),p(s)])]),n("p",null,[n("a",v,[a("前端富文本基础及实现"),p(s)])]),b,h,n("p",null,[n("strong",null,[a("开源地址 "),n("a",y,[a("www.zoo.team/openweekly/"),p(s)])]),a(" (小报官网首页有微信交流群)")]),f,n("p",null,[n("strong",null,[a("开源地址 "),n("a",g,[a("https://github.com/zcy-inc/skuPathFinder-back/"),p(s)])])]),_,w,j,x])}const T=e(i,[["render",C],["__file","你想知道的前后端协作规范都在这了.html.vue"]]);export{T as default};
