import{_ as e,z as o,A as c,Y as n,C as s,U as t,a6 as p,Q as l}from"./framework-cb9358d9.js";const i={},u=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d4eb6a01e6564840817b127265b07edd~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1),r=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/35e486adef8144e4b879ef66b52c6d1f~tplv-k3u1fbpfcp-watermark.image?",alt:"方醒.png"})],-1),k={href:"https://www.zoo.team/article/path-tool",target:"_blank",rel:"noopener noreferrer"},d={href:"https://nodejs.org/dist/latest-v16.x/docs/api",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/nodejs/node/blob/v16.14.0/lib/path.js",target:"_blank",rel:"noopener noreferrer"},v=p(`<p>本文 Node.js 版本为 16.14.0，本文的源码来自于此版本。希望大家阅读本文后，会对大家阅读源码有所帮助。</p><h3 id="path-的常见使用场景" tabindex="-1"><a class="header-anchor" href="#path-的常见使用场景" aria-hidden="true">#</a> path 的常见使用场景</h3><p>Path 用于处理文件和目录的路径，这个模块中提供了一些便于开发者开发的工具函数，来协助我们进行复杂的路径判断，提高开发效率。例如：</p><ol><li>在项目中配置别名，别名的配置方便我们对文件更简便的引用，避免深层级逐级向上查找。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">reslove</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// __dirname 当前文件所在的目录路径</span>
    <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>src<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token operator">/</span>src<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment">// process.cwd 当前工作目录</span>
    <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>@<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>src<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>在 webpack 中，文件的输出路径也可以通过我们自行配置生成到指定的位置。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token operator">/</span>path<span class="token operator">/</span>to<span class="token operator">/</span>my<span class="token operator">/</span>entry<span class="token operator">/</span>file<span class="token punctuation">.</span>js<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>dist<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>my<span class="token operator">-</span>first<span class="token operator">-</span>webpack<span class="token punctuation">.</span>bundle<span class="token punctuation">.</span>js<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>又或者对于文件夹的操作</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>fs<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>path<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 删除文件夹</span>
<span class="token keyword">let</span> deleDir <span class="token operator">=</span> <span class="token punctuation">(</span>src<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 读取文件夹</span>
    <span class="token keyword">let</span> children <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>
    children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> childpath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 检查文件是否存在</span>
        <span class="token keyword">let</span> file <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">statSync</span><span class="token punctuation">(</span>childpath<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 文件存在就删除</span>
            fs<span class="token punctuation">.</span><span class="token function">unlinkSync</span><span class="token punctuation">(</span>childpath<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 继续检测文件夹</span>
            <span class="token function">deleDir</span><span class="token punctuation">(</span>childpath<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token comment">// 删除空文件夹</span>
    fs<span class="token punctuation">.</span><span class="token function">rmdirSync</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">deleDir</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>floor<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简单的了解了一下 path 的使用场景，接下来我们根据使用来研究一下它的执行机制，以及是怎么实现的。</p><h3 id="path-的执行机制" tabindex="-1"><a class="header-anchor" href="#path-的执行机制" aria-hidden="true">#</a> path 的执行机制</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b5ee5f05109940c89ec4bc021a1403e1~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p>`,12),b=n("li",null,"引入 path 模块，调用 path 的工具函数的时候，会进入原生模块的处理逻辑。",-1),h=n("li",null,[s("使用 "),n("code",null,"_load"),s(" 函数根据你引入的模块名作为 ID，判断要加载的模块是原生 JS 模块后，会通过 "),n("code",null,"loadNativeModule"),s(" 函数，利用 id 从 "),n("code",null,"_source"),s(" (保存原生JS模块的源码字符串转成的 ASCII 码)中找到对应的数据加载原生 JS 模块。")],-1),f={href:"https://github.com/nodejs/node/blob/v16.14.0/lib/path.js",target:"_blank",rel:"noopener noreferrer"},g=p(`<h3 id="常用工具函数简析" tabindex="-1"><a class="header-anchor" href="#常用工具函数简析" aria-hidden="true">#</a> 常用工具函数简析</h3><h4 id="resolve-返回当前路径的绝对路径" tabindex="-1"><a class="header-anchor" href="#resolve-返回当前路径的绝对路径" aria-hidden="true">#</a> resolve 返回当前路径的绝对路径</h4><p>resolve 将多个参数，依次进行拼接，生成新的绝对路径。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> resolvedDevice <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> resolvedTail <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> resolvedAbsolute <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

  <span class="token comment">// 从右到左检测参数</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> args<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span><span class="token operator">...</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 规范化路径</span>
  resolvedTail <span class="token operator">=</span> <span class="token function">normalizeString</span><span class="token punctuation">(</span>resolvedTail<span class="token punctuation">,</span> <span class="token operator">!</span>resolvedAbsolute<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>\\\\<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> isPathSeparator<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> resolvedAbsolute <span class="token operator">?</span>
    <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>resolvedDevice<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\\\</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>resolvedTail<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span>
    <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>resolvedDevice<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>resolvedTail<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">||</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/384bcc551026473f85b8e530a8568b9e~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>根据参数获取路径，对接收到的参数进行遍历，参数的长度大于等于 0 时都会开始进行拼接，对拼接好的 path 进行非字符串校验，有不符合的参数则抛出 <code>throw new ERR_INVALID_ARG_TYPE(name, &amp;#39;string&amp;#39;, value)</code>, 符合要求则会对 path 进行长度判断，有值则 +=path 做下一步操作。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> path<span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  path <span class="token operator">=</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token comment">// internal/validators</span>
  <span class="token function">validateString</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>path<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// path 长度为 0 的话，会直接跳出上述代码块的 for 循环</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">continue</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>resolvedDevice<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// resolvedDevice 的长度为 0，给 path 赋值为当前工作目录</span>
  path <span class="token operator">=</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token comment">// 赋值为环境对象或者当前工作目录</span>
  path <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>resolvedDevice<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">]</span> <span class="token operator">||</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>path <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">||</span>
      <span class="token punctuation">(</span><span class="token function">StringPrototypeToLowerCase</span><span class="token punctuation">(</span><span class="token function">StringPrototypeSlice</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!==</span>
      <span class="token function">StringPrototypeToLowerCase</span><span class="token punctuation">(</span>resolvedDevice<span class="token punctuation">)</span> <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span>
      <span class="token function">StringPrototypeCharCodeAt</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant">CHAR_BACKWARD_SLASH</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 对 path 进行非空与绝对路径判断得出 path 路径</span>
    path <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>resolvedDevice<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\\\</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/53340472a4dd42f2bc3d61aad938ed9c~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>尝试匹配根路径，判断是否是只有一个路径分隔符 (&#39;\\&#39;) 或者 path 为绝对路径，然后给绝对路径打标，并把 <code>rootEnd</code> 截取标识设为 1 (下标)。第二项若还是路径分隔符 (&#39;\\&#39;) ，就定义截取值为 2 (下标)，并用 <code>last</code> 保存截取值，以便后续判断使用。</p>`,9),y=n("code",null,"rootEnd",-1),w={href:"https://baike.baidu.com/item/UNC%E8%B7%AF%E5%BE%84/3231808",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"firstPart",-1),j=p(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> len <span class="token operator">=</span> path<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
<span class="token keyword">let</span> rootEnd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 路径截取结束下标</span>
<span class="token keyword">let</span> device <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token comment">// 磁盘根 D:\\、C:\\</span>
<span class="token keyword">let</span> isAbsolute <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 是否是磁盘根路径</span>
<span class="token keyword">const</span> code <span class="token operator">=</span> <span class="token function">StringPrototypeCharCodeAt</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// path 长度为 1</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 只有一个路径分隔符 \\ 为绝对路径</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPathSeparator</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    rootEnd <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    isAbsolute <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPathSeparator</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 可能是 UNC 根，从一个分隔符 \\ 开始，至少有一个它就是某种绝对路径（UNC或其他）</span>
  isAbsolute <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token comment">// 开始匹配双路径分隔符</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPathSeparator</span><span class="token punctuation">(</span><span class="token function">StringPrototypeCharCodeAt</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> last <span class="token operator">=</span> j<span class="token punctuation">;</span>
    <span class="token comment">// 匹配一个或多个非路径分隔符</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span> len <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span>
    <span class="token operator">!</span><span class="token function">isPathSeparator</span><span class="token punctuation">(</span><span class="token function">StringPrototypeCharCodeAt</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      j<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span> len <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> j <span class="token operator">!==</span> last<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> firstPart <span class="token operator">=</span> <span class="token function">StringPrototypeSlice</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> last<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
      last <span class="token operator">=</span> j<span class="token punctuation">;</span>
      <span class="token comment">// 匹配一个或多个路径分隔符</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span> len <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span>
              <span class="token function">isPathSeparator</span><span class="token punctuation">(</span><span class="token function">StringPrototypeCharCodeAt</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        j<span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span> len <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> j <span class="token operator">!==</span> last<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        last <span class="token operator">=</span> j<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span> len <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span>
                <span class="token operator">!</span><span class="token function">isPathSeparator</span><span class="token punctuation">(</span><span class="token function">StringPrototypeCharCodeAt</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          j<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">===</span> len <span class="token operator">||</span> j <span class="token operator">!==</span> last<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          device <span class="token operator">=</span>
            <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">\\\\\\\\</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>firstPart<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\\\</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">StringPrototypeSlice</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> last<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
          rootEnd <span class="token operator">=</span> j<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    rootEnd <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token comment">// 检测磁盘根目录匹配 例：D:，C:\\</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isWindowsDeviceRoot</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> <span class="token function">StringPrototypeCharCodeAt</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant">CHAR_COLON</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  device <span class="token operator">=</span> <span class="token function">StringPrototypeSlice</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  rootEnd <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token number">2</span> <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> <span class="token function">isPathSeparator</span><span class="token punctuation">(</span><span class="token function">StringPrototypeCharCodeAt</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    isAbsolute <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    rootEnd <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>检测路径并生成，检测磁盘根目录是否存在或解析 <code>resolvedAbsolute</code> 是否为绝对路径。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 检测磁盘根目录</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>device<span class="token punctuation">.</span>length <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// resolvedDevice 有值</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>resolvedDevice<span class="token punctuation">.</span>length <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">StringPrototypeToLowerCase</span><span class="token punctuation">(</span>device<span class="token punctuation">)</span> <span class="token operator">!==</span>
        <span class="token function">StringPrototypeToLowerCase</span><span class="token punctuation">(</span>resolvedDevice<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token keyword">continue</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// resolvedDevice 无值并赋值为磁盘根目录</span>
    resolvedDevice <span class="token operator">=</span> device<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 绝对路径</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>resolvedAbsolute<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 磁盘根目录存在结束循环</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>resolvedDevice<span class="token punctuation">.</span>length <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token comment">// 获取路径前缀进行拼接</span>
  resolvedTail <span class="token operator">=</span>
    <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">StringPrototypeSlice</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> rootEnd<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\\\</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>resolvedTail<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  resolvedAbsolute <span class="token operator">=</span> isAbsolute<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>isAbsolute <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> resolvedDevice<span class="token punctuation">.</span>length <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 磁盘根存在便结束循环</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="join-根据传入的-path-片段进行路径拼接" tabindex="-1"><a class="header-anchor" href="#join-根据传入的-path-片段进行路径拼接" aria-hidden="true">#</a> join 根据传入的 path 片段进行路径拼接</h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3b21ad707a494a0e868d7561361175d3~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><ol><li>接收多个参数,利用特定分隔符作为定界符将所有的 path 参数连接在一起,生成新的规范化路径。</li><li>接收参数后进行校验，如果没有参数的话，会直接返回 &#39;.&#39; ，反之进行遍历，通过内置 <code>validateString</code> 方法校验每个参数，如有一项不合规则直接 <code>throw new ERR_INVALID_ARG_TYPE(name, &amp;#39;string&amp;#39;, value)；</code></li><li>window 下为反斜杠 (&#39;\\&#39;) , 而 linux 下为正斜杠 (&#39;/&#39;)，这里是 <code>join</code> 方法区分操作系统的一个不同点，而反斜杠 (&#39;\\&#39;) 有转义符的作用，单独使用会被认为是要转义斜杠后面的字符串，故此使用双反斜杠转义出反斜杠 (&#39;\\&#39;) 使用。</li><li>最后进行拼接后的字符串校验并格式化返回。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> joined<span class="token punctuation">;</span>
<span class="token keyword">let</span> firstPart<span class="token punctuation">;</span>
<span class="token comment">// 从左到右检测参数</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> arg <span class="token operator">=</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token comment">// internal/validators</span>
  <span class="token function">validateString</span><span class="token punctuation">(</span>arg<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>path<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>arg<span class="token punctuation">.</span>length <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>joined <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span>
      <span class="token comment">// 把第一个字符串赋值给 joined，并用 firstPart 变量保存第一个字符串以待后面使用</span>
      joined <span class="token operator">=</span> firstPart <span class="token operator">=</span> arg<span class="token punctuation">;</span>
    <span class="token keyword">else</span>
      <span class="token comment">// joined 有值，进行 += 拼接操作</span>
      joined <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">\\\\</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>arg<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>joined <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 window 系统下，因为使用反斜杠 (&#39;\\&#39;) 和 UNC (主要指局域网上资源的完整 Windows 2000 名称)路径的缘故，需要进行网络路径处理，(&#39;\\&#39;) 代表的是网络路径格式，因此在 win32 下挂载的<code>join</code> 方法默认会进行截取操作。</p><p>如果匹配得到反斜杠 (&#39;\\&#39;)，<code>slashCount</code> 就会进行自增操作，只要匹配反斜杠 (&#39;\\&#39;) 大于两个就会对拼接好的路径进行截取操作，并手动拼接转义后的反斜杠 (&#39;\\&#39;)。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> needsReplace <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> slashCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token comment">// 根据 StringPrototypeCharCodeAt 对首个字符串依次进行 code 码提取，并通过 isPathSeparator 方法与定义好的 code 码进行匹配</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPathSeparator</span><span class="token punctuation">(</span><span class="token function">StringPrototypeCharCodeAt</span><span class="token punctuation">(</span>firstPart<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token operator">++</span>slashCount<span class="token punctuation">;</span>
  <span class="token keyword">const</span> firstLen <span class="token operator">=</span> firstPart<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>firstLen <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token number">1</span> <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span>
      <span class="token function">isPathSeparator</span><span class="token punctuation">(</span><span class="token function">StringPrototypeCharCodeAt</span><span class="token punctuation">(</span>firstPart<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">++</span>slashCount<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>firstLen <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPathSeparator</span><span class="token punctuation">(</span><span class="token function">StringPrototypeCharCodeAt</span><span class="token punctuation">(</span>firstPart<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token operator">++</span>slashCount<span class="token punctuation">;</span>
      <span class="token keyword">else</span> <span class="token punctuation">{</span>
        needsReplace <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>needsReplace<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>slashCount <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span> joined<span class="token punctuation">.</span>length <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span>
          <span class="token function">isPathSeparator</span><span class="token punctuation">(</span><span class="token function">StringPrototypeCharCodeAt</span><span class="token punctuation">(</span>joined<span class="token punctuation">,</span> slashCount<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    slashCount<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>slashCount <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span>
    joined <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">\\\\</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">StringPrototypeSlice</span><span class="token punctuation">(</span>joined<span class="token punctuation">,</span> slashCount<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="执行结果梳理" tabindex="-1"><a class="header-anchor" href="#执行结果梳理" aria-hidden="true">#</a> 执行结果梳理</h4><table><thead><tr><th style="text-align:left;"></th><th style="text-align:left;">resolve</th><th style="text-align:left;">join</th></tr></thead><tbody><tr><td style="text-align:left;">无参数</td><td style="text-align:left;">当前文件的绝对路径</td><td style="text-align:left;">.</td></tr><tr><td style="text-align:left;">参数无绝对路径</td><td style="text-align:left;">当前文件的绝对路径按顺序拼接参数</td><td style="text-align:left;">拼接成的路径</td></tr><tr><td style="text-align:left;">首个参数为绝对路径</td><td style="text-align:left;">参数路径覆盖当前文件绝对路径并拼接后续非绝对路径</td><td style="text-align:left;">拼接成的绝对路径</td></tr><tr><td style="text-align:left;">后置参数为绝对路径</td><td style="text-align:left;">参数路径覆盖当前文件绝对路径并覆盖前置参数</td><td style="text-align:left;">拼接成的路径</td></tr><tr><td style="text-align:left;">首个参数为(./)</td><td style="text-align:left;">有后续参数，当前文件的绝对路径拼接参数&lt;br&gt;无后续参数，当前文件的绝对路径</td><td style="text-align:left;">有后续参数，后续参数拼接成的路径&lt;br&gt;无后续参数，(./)</td></tr><tr><td style="text-align:left;">后置参数有(./)</td><td style="text-align:left;">解析后的绝对路径拼接参数</td><td style="text-align:left;">有后续参数，拼接成的路径拼接后续参数&lt;br&gt;无后续参数，拼接(/)</td></tr><tr><td style="text-align:left;">首个参数为(../)</td><td style="text-align:left;">有后续参数，覆盖当前文件的绝对路径的最后一级目录后拼接参数&lt;br&gt;无后续参数，覆盖当前文件的绝对路径的最后一级目录</td><td style="text-align:left;">有后续参数，拼接后续参数&lt;br&gt;无后续参数，(../)</td></tr><tr><td style="text-align:left;">后置参数有(../)</td><td style="text-align:left;">出现(../)的上层目录会被覆盖，后置出现多少个，就会覆盖多少层，上层目录被覆盖完后，返回(/)，后续参数会拼接</td><td style="text-align:left;">出现(../)的上层目录会被覆盖，后置出现多少个，就会覆盖多少层，上层目录被覆盖完后，会进行参数拼接</td></tr></tbody></table><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p>阅读了源码之后，<code>resolve</code> 方法会对参数进行处理，考虑路径的形式，在最后抛出绝对路径。在使用的时候，如果是进行文件之类的操作，推荐使用 <code>resolve</code> 方法，相比来看， <code>resolve</code> 方法就算没有参数也会返回一个路径，供使用者操作，在执行过程中会进行路径的处理。而 <code>join</code> 方法只是对传入的参数进行规范化拼接，对于生成一个新的路径比较实用，可以按照使用者意愿创建。不过每个方法都有优点，要根据自己的使用场景以及项目需求，去选择合适的方法。</p><h3 id="参考文献" tabindex="-1"><a class="header-anchor" href="#参考文献" aria-hidden="true">#</a> 参考文献</h3>`,15),S={href:"https://juejin.cn/post/6844904016317513741",target:"_blank",rel:"noopener noreferrer"},C={href:"https://juejin.cn/post/7031342702906048543",target:"_blank",rel:"noopener noreferrer"},x=n("h2",{id:"推荐阅读",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#推荐阅读","aria-hidden":"true"},"#"),s(" 推荐阅读")],-1),P={href:"https://juejin.cn/post/7104055306396631076",target:"_blank",rel:"noopener noreferrer"},A={href:"https://juejin.cn/post/7101457212085633054",target:"_blank",rel:"noopener noreferrer"},D={href:"https://juejin.cn/post/7098854314365419533",target:"_blank",rel:"noopener noreferrer"},E=n("p",null,'[如何基于 WebComponents 封装 UI 组件库](https://juejin.cn/post/7096265630466670606 "# 如何基于 WebComponents 封装 UI 组件库")',-1),N={href:"https://juejin.cn/post/7091068088975622175",target:"_blank",rel:"noopener noreferrer"},T=n("h2",{id:"开源作品",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#开源作品","aria-hidden":"true"},"#"),s(" 开源作品")],-1),L=n("ul",null,[n("li",null,"政采云前端小报")],-1),z={href:"https://www.zoo.team/openweekly/",target:"_blank",rel:"noopener noreferrer"},R=n("ul",null,[n("li",null,"商品选择 sku 插件")],-1),$={href:"https://github.com/zcy-inc/skuPathFinder-back",target:"_blank",rel:"noopener noreferrer"},I=n("h2",{id:"招贤纳士",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#招贤纳士","aria-hidden":"true"},"#"),s(" 招贤纳士")],-1),q=n("p",null,"政采云前端团队（ZooTeam），一个年轻富有激情和创造力的前端团队，隶属于政采云产品研发部，Base 在风景如画的杭州。团队现有 60 余个前端小伙伴，平均年龄 27 岁，近 4 成是全栈工程师，妥妥的青年风暴团。成员构成既有来自于阿里、网易的“老”兵，也有浙大、中科大、杭电等校的应届新人。团队在日常的业务对接之外，还在物料体系、工程平台、搭建平台、性能体验、云端应用、数据分析及可视化等方向进行技术探索和实战，推动并落地了一系列的内部技术产品，持续探索前端技术体系的新边界。",-1),U=n("p",null,[s("如果你想改变一直被事折腾，希望开始能折腾事；如果你想改变一直被告诫需要多些想法，却无从破局；如果你想改变你有能力去做成那个结果，却不需要你；如果你想改变你想做成的事需要一个团队去支撑，但没你带人的位置；如果你想改变既定的节奏，将会是“5 年工作时间 3 年工作经验”；如果你想改变本来悟性不错，但总是有那一层窗户纸的模糊… 如果你相信相信的力量，相信平凡人能成就非凡事，相信能遇到更好的自己。如果你希望参与到随着业务腾飞的过程，亲手推动一个有着深入的业务理解、完善的技术体系、技术创造价值、影响力外溢的前端团队的成长历程，我觉得我们该聊聊。任何时间，等着你写点什么，发给 "),n("code",null,"ZooTeam@cai-inc.com")],-1),W=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/98d3aa3d1f8646a8bcda8cfd9e335a4b~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1);function B(V,J){const a=l("ExternalLinkIcon");return o(),c("div",null,[u,r,n("p",null,[s("> 这是第 146 篇不掺水的原创，想获取更多原创好文，请搜索公众号关注我们吧~ 本文首发于政采云前端博客："),n("a",k,[s("浅析 path 常用工具函数源码"),t(a)])]),n("p",null,[s("在开发过程中，会经常用到 "),n("a",d,[s("Node.js "),t(a)]),s(" ，它利用 V8 提供的能力，拓展了 JS 的能力。而在 Node.js 中，我们可以使用 JS 中本来不存在的 "),n("a",m,[s("path"),t(a)]),s(" 模块，为了我们更加熟悉的运用，让我们一起来了解一下吧~")]),v,n("ol",null,[b,h,n("li",null,[s("执行 "),n("a",f,[s("lib/path.js"),t(a)]),s(" 文件，利用 process 判断操作系统，根据操作系统的不同，在其文件处理上可能会存在操作字符的差异化处理，但方法大致一样，处理完后返回给调用方。")])]),g,n("p",null,[s("继续判断第三项是否是路径分隔符 ('\\')，如果是，那么为绝对路径，"),y,s(" 截取标识为 1 (下标)，但也有可能是 "),n("a",w,[s("UNC"),t(a)]),s(" 路径 ( \\servername\\sharename，servername 服务器名。sharename 共享资源名称)。如果有其他值，截取值会继续进行自增读取后面的值，并用 "),_,s(" 保存第三位的值，以便拼接目录时取值，并把 last 和截取值保持一致，以便结束判断。")]),j,n("p",null,[n("a",S,[s("Node.js 模块系统源码探微"),t(a)])]),n("p",null,[n("a",C,[s("webpack原理-如何实现代码打包"),t(a)])]),x,n("p",null,[n("a",P,[s("Web Components-LitElement实践"),t(a)])]),n("p",null,[n("a",A,[s("模块联邦浅析"),t(a)])]),n("p",null,[n("a",D,[s("性能优化——图片压缩、加载和格式选择"),t(a)])]),E,n("p",null,[n("a",N,[s("Web Worker"),t(a)])]),T,L,n("p",null,[n("strong",null,[s("开源地址 "),n("a",z,[s("www.zoo.team/openweekly/"),t(a)])]),s(" (小报官网首页有微信交流群)")]),R,n("p",null,[n("strong",null,[s("开源地址 "),n("a",$,[s("https://github.com/zcy-inc/skuPathFinder-back/"),t(a)])])]),I,q,U,W])}const H=e(i,[["render",B],["__file","浅析 path 常用工具函数源码.html.vue"]]);export{H as default};
