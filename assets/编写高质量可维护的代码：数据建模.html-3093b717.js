import{_ as p,z as t,A as o,Y as a,C as n,U as e,a6 as c,Q as i}from"./framework-cb9358d9.js";const l={},r=a("p",null,[a("img",{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/7/26/1738ae6bd8113663~tplv-t2oaga2asx-image.image",alt:""})],-1),u={href:"https://www.zoo.team/article/logical-judgment",target:"_blank",rel:"noopener noreferrer"},d=c(`<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1a964ba9342547639c1e1e5c5a2607d4~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><h2 id="什么是数据建模" tabindex="-1"><a class="header-anchor" href="#什么是数据建模" aria-hidden="true">#</a> 什么是数据建模</h2><p>数据建模是一种用于定义和分析数据的要求和其需要的相应支持的信息系统的过程。</p><p>随着前端页面的交互变得更加细腻复杂，原本存放于服务端的状态放置在了前端，类似 flux、redux、mobx、dva、rematch、vuex 的状态管理库也成了每个项目的标配。</p><p>因为分层理念的普及，前端工程师们需要把更多精力放在数据管理上，数据建模也成了基本功。</p><p>而建模的产物是<strong>数据模型</strong>，数据模型是定义数据如何输入和输出的一种模型，其主要作用是为信息系统提供数据的定义和格式。</p><p>数据模型包括<strong>数据结构、数据操作、数据完整性约束条件</strong>这三要素。</p><p>简单理解就是数据模型提供了一个“模具”，数据按照预先的设计和约束进行放置。</p><h3 id="三要素" tabindex="-1"><a class="header-anchor" href="#三要素" aria-hidden="true">#</a> 三要素</h3><h4 id="数据完整性约束条件" tabindex="-1"><a class="header-anchor" href="#数据完整性约束条件" aria-hidden="true">#</a> 数据完整性约束条件</h4><p>好的数据结构必须要有约束，例如描述同一个状态的字段有时候是字符串，有时候是数字，这样的话就容易造成预期之外的情况。添加约束可以最大限度保障这份数据是干净整齐的；</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// status 是字符串的时候不通过</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 按照一定约束</span>
model<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span>
  <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>user<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token punctuation">{</span> 
      field<span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>name<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
      type<span class="token operator">:</span> <span class="token constant">STRING</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      allowNull<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> 
      comment<span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>姓名<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
    sex<span class="token operator">:</span> <span class="token punctuation">{</span>
	  <span class="token literal-property property">field</span><span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>sex<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
      type<span class="token operator">:</span> <span class="token constant">INTEGER</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      allowNull<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      comment<span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>性别<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="数据结构" tabindex="-1"><a class="header-anchor" href="#数据结构" aria-hidden="true">#</a> 数据结构</h4><p>描述模型本身的性质之外，还需通过某些字段表达模型（表）和模型之间的关联；</p><h4 id="数据操作" tabindex="-1"><a class="header-anchor" href="#数据操作" aria-hidden="true">#</a> 数据操作</h4><p>在数据结构上对数据或者数据之间的关联关系的操作。</p><h2 id="领域驱动设计" tabindex="-1"><a class="header-anchor" href="#领域驱动设计" aria-hidden="true">#</a> 领域驱动设计</h2><p>在围绕着数据模型进行应用开发的时候，我们会思考如何进行建模呢？</p><p>实际上，软件开发行业中已经积累了一些方法论，例如**领域驱动设计(DDD)**就被广泛采用。</p><p>在进行软件开发前，通常需要先进行业务知识梳理，而后到达软件设计的层面，最后才是开发。而在业务知识梳理的过程中，我们必然会形成某个领域知识。根据领域知识来一步步驱动软件设计，就是领域驱动设计的基本概念。简单来说领域驱动设计就是<strong>关注精简的业务模型及实现的匹配</strong>。</p><h3 id="分层架构" tabindex="-1"><a class="header-anchor" href="#分层架构" aria-hidden="true">#</a> 分层架构</h3><p>按照领域驱动设计的分层架构可以将应用进行分层</p><ul><li>UI 层：负责向用户展现信息以及解释用户命令。</li><li>应用层：用来协调应用的活动。它不包含业务逻辑；它不保留业务对象的状态；但它保有应用任务的进度状态。</li><li>领域层：业务软件的核心所在。在这里保留业务对象的状态，对业务对象和它们状态的持久化被委托给了基础设施层。</li><li>基础设施层：为其他层的支撑库存在。它提供了层间的通信，实现对业务对象的持久化，包含对用户界面层的支撑库等作用。</li></ul><p><img src="https://www.zoo.team/images/upload/upload_85fe5e48b0730e99803dbff75444a27e.png" alt=""></p><p>按照这个分层，越往左边代码变动越频繁。随着业务复杂，应用层和领域层的边界变得模糊，领域之间也容易交错在一起。</p><p>良好的设计应该避免层与层之间产生过多依赖，如果代码没有被清晰地隔离到某层中，它会迅即变得混乱和难以维护。</p><p>通过分层架构和高内聚低耦合的设计思想，最终实现系统与需求有较好的一致性，在业务迭代中快速响应需求变更。</p><h3 id="实体" tabindex="-1"><a class="header-anchor" href="#实体" aria-hidden="true">#</a> 实体</h3><p>实体在领域模型中是必需的对象，并且它们应该在建模过程开始时就被考虑。例如要实现一个“猫”的概念，我们可能会去创造一个 Cat 的类，这个 Cat 可能包含名称、性别、品种等属性，但是这些属性都不足以区分这只猫，所以我们需要创建一个唯一不重复的 ID 来区分他们，也就区分实体的标识符。</p><p>创建 ID 的方式有很多种，它可以是主键、可以来自外部、也可以由系统自己产生，但它必须符合模型中的身份差别。</p><h3 id="值对象" tabindex="-1"><a class="header-anchor" href="#值对象" aria-hidden="true">#</a> 值对象</h3><p>用来描述领域的特殊方面，且没有标识符的一个对象，叫做值对象。例如画布上的一个点 Customer 会跟姓名、省份、城市、区、街道相关。最好是将地址分离出来，保留对地址的引用，因为它们都是同一个址属性。</p><p><img src="https://www.zoo.team/images/upload/upload_a5d2f3aa4d862171351b6e022c8cbb51.png" alt=""></p><h3 id="服务" tabindex="-1"><a class="header-anchor" href="#服务" aria-hidden="true">#</a> 服务</h3><p>你可以简单地将行为理解成一种服务。例如你去商店购买商品，你的朋友也可以去购买商品。如果将购买这个能力作为一个属性放在 Person 这个实体里显然有点不对劲，因为“去购买”这个功能并不属于你和你的朋友（实体或者值对象），同时去购买也可能涉及到商品对象。</p><p>保证服务的单一性和隔离非常重要，注意区分领域服务和应用服务。决定一个服务所应归属的层是非常困难的事情，我们在设计阶段建立模型时，需要确保领域层从其他层中隔离开来。</p><h3 id="模块" tabindex="-1"><a class="header-anchor" href="#模块" aria-hidden="true">#</a> 模块</h3><p>模块是一种被用来作为组织相关概念和任务以便降低复杂性的方法，通常情况下由功能或者逻辑上属于一体的元素构成，以保证高内聚，同时通过接口的形式暴露给第三方以降低模块之间的耦合。</p><h3 id="聚合" tabindex="-1"><a class="header-anchor" href="#聚合" aria-hidden="true">#</a> 聚合</h3><p>聚合是针对数据变化可以考虑成一个单元的一组相关对象。聚合基于（有且仅有）一个实体（根），聚合通过这个根被外部访问，它可以引用任意聚合或者被其他聚合引用。以下是一个简单的聚合例子：客户作为聚合的根，其他信息都是客户内部的，如果需要地址则将地址的拷贝传递出去（ Javascript 中特别需要注意）。</p><p><img src="https://www.zoo.team/images/upload/upload_24f12efc1c7e03b5a102c7a44accffee.png" alt=""></p><h3 id="工厂" tabindex="-1"><a class="header-anchor" href="#工厂" aria-hidden="true">#</a> 工厂</h3><p>工厂用来封装对象创建所必需的知识，它们对创建聚合特别有用。工厂方法是一个对象的方法，包含并隐藏了创建其他对象的必要知识。</p><h3 id="资源库" tabindex="-1"><a class="header-anchor" href="#资源库" aria-hidden="true">#</a> 资源库</h3><p>资源库作为一个全局可访问对象的存储点而存在。它是一个独立的层，介于领域层与数据映射层（数据访问层）之间。它的存在让领域层感觉不到数据访问层的存在，它提供一个类似集合的接口，提供给领域层进行领域对象的访问。</p><h2 id="前端的数据建模" tabindex="-1"><a class="header-anchor" href="#前端的数据建模" aria-hidden="true">#</a> 前端的数据建模</h2><p>数据建模和后端的工作关联较为紧密，前端的数据模型更多是依赖后端传递的数据传输对象（DTO）进行二次构建。无论二次构建是发生在服务端聚合阶段还是用户端 AJAX 请求完成阶段，前端都需要参与一定的数据清洗，并应用到前端的数据模型之上。</p><h3 id="领域划分" tabindex="-1"><a class="header-anchor" href="#领域划分" aria-hidden="true">#</a> 领域划分</h3><p>现在你可以开始尝试划分你应用内的业务领域。以一个商城为例子，它可能会包括用户、商品、货架、订单、结算、账户等内容。</p><p><img src="https://www.zoo.team/images/upload/upload_8318f0cb39531bea16484987a4dd696d.png" alt=""></p><p>每一个业务领域都可以至少拆分成一个领域，按照业务领域来组织代码，例如在交易领域中按照以下目录结构划分：</p><div class="language-plain line-numbers-mode" data-ext="plain"><pre class="language-plain"><code>src
  modules 
    ...
    trading             # 交易领域
      components/         # 组件
      models/             # models
      pages/              # 页面
      redux/              # redux
      services/           # 交易模块相关api
      styles/             # 交易模块样式
      index.ts
  ...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="概念模型" tabindex="-1"><a class="header-anchor" href="#概念模型" aria-hidden="true">#</a> 概念模型</h3><p>数据建模的前提是对业务的充分理解，充分理解业务相当于在更高的视角去看待业务之间的关系，有利于更好地完成模型建设。</p><p>尝试回想一下你所维护的业务（应用）场景，你是否清晰业务场景和业务对象之间的关系以及具体交互？</p><p>使用思维导图梳理出概念模型，这个阶段可以不用严格遵守三要素，目标清晰表达现实世界就行。</p><p><img src="https://www.zoo.team/images/upload/upload_878fc84470d118bfd9fab9e376741bcb.png" alt=""></p><h3 id="定义模型" tabindex="-1"><a class="header-anchor" href="#定义模型" aria-hidden="true">#</a> 定义模型</h3><p>定义模型可以依据概念模型，补充细节和关联关系，例如简单定义一个营销商品：</p><p><img src="https://www.zoo.team/images/upload/upload_93df8face49c27cf5c5c33027391d1f4.png" alt=""></p><p>以上展示了商场货架上划分的一块活动区域，规则是满 XX 减 XX ，再将参与该活动的商品在区域内进行上架。</p><h3 id="降低复杂度" tabindex="-1"><a class="header-anchor" href="#降低复杂度" aria-hidden="true">#</a> 降低复杂度</h3><p>在大部分情况下，特别是展示逻辑这块，前端不应该是重逻辑的。</p><p>以商品为例，不同商品的营销类型背后隐藏着复杂的价格体系，尽管是同一种营销类型，商品在不同的状态展示的价格也不一定相同。你可以想象这背后的字段，以及计算规则。</p><p>假如后端把这些字段、各种<code>price</code>和规则一股脑抛给你，先不谈前后端对称问题，光挑字段都能让你目瞪狗呆。</p><p><img src="https://www.zoo.team/images/upload/upload_d9617aededd64721d052bab47c2ca439.jpeg" alt=""></p><p>遇到类似情况更好的办法是：<strong>尽量避免在前端（用户端）去处理复杂的业务判断</strong>，在聚合层或者让后端同学给你处理好这些展示逻辑。</p><p>特别是在 C 端场景下，数据直出显得更加重要，同时前端同学也有更多时间去做性能优化（早点下班不香么？）。</p><p>另外一个好处是假如出现展示问题，你只要确定读取的字段正确，剩下的仅需一个人排查就够了；</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Bad</span>
<span class="token keyword">const</span> switchPrice <span class="token operator">=</span> product <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
  <span class="token keyword">switch</span><span class="token punctuation">(</span>product<span class="token punctuation">.</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>
    	<span class="token keyword">return</span> product<span class="token punctuation">.</span>priceA<span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
    	<span class="token keyword">return</span> product<span class="token punctuation">.</span>priceB<span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
    	<span class="token keyword">return</span> product<span class="token punctuation">.</span>priceB<span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
    	<span class="token keyword">return</span>  product<span class="token punctuation">.</span>priceBase<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>Price value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">switchPrice</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
     
<span class="token comment">// Good</span>
<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>Price value<span class="token operator">=</span><span class="token punctuation">{</span>product<span class="token punctuation">.</span>price<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="逻辑分层" tabindex="-1"><a class="header-anchor" href="#逻辑分层" aria-hidden="true">#</a> 逻辑分层</h3><p>设计上需要区分应用逻辑（业务逻辑）和展示逻辑。应用层注重对领域层的调度，是业务逻辑的实现，展示层专注渲染和交互动作。</p><p>在一个大型项目中，同一个 Model 可能被多处引用，你很难确定谁最终会对同一份数据进行怎样的操作。</p><p>同时 Model 中仅保留数据源的抽象结构，而不修改数据源的内容。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 在视图层只做展示逻辑处理</span>
<span class="token comment">// 组件A</span>
<span class="token operator">...</span>
<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
	<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>span<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>日期：<span class="token punctuation">{</span><span class="token function">format</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>date<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token constant">YYYY</span><span class="token operator">-</span><span class="token constant">MM</span><span class="token operator">-</span><span class="token constant">DD</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>span<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>

<span class="token comment">// 组件B</span>
<span class="token operator">...</span>
<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
	<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>span<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>日期：<span class="token punctuation">{</span><span class="token function">format</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>date<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token constant">YYYY</span><span class="token operator">-</span><span class="token constant">MM</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>span<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="统一字段" tabindex="-1"><a class="header-anchor" href="#统一字段" aria-hidden="true">#</a> 统一字段</h3><p>在设计模型的时候，尽可能与后端保持统一字段。比如某些表单场景在回显和提交的时候要多一层转换，后期维护会带来多一层心智负担。在前后端分离的开发模式下，不一定能保证后端会先给出字段，我的习惯是标记字段，等联调的时候全局替换一下就行了。</p><p>简化字段、明确语义、改变不合理的前后端交互是做好数据建模的基础，否则你将花费大量时间去理解这些字段背后的含义和计算规则。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>没有一个十全十美的数据模型可以适用任何需求场景，模型的落地需要综合考虑业务实际场景和技术选型。在构建模型的过程中，锻炼系统性思考能力、从更高的视角看待业务，才能创造出一个生命周期更长的模型。</p><h2 id="推荐阅读" tabindex="-1"><a class="header-anchor" href="#推荐阅读" aria-hidden="true">#</a> 推荐阅读</h2>`,82),k={href:"https://juejin.cn/post/6859125809655840776",target:"_blank",rel:"noopener noreferrer"},m={href:"https://juejin.cn/post/6844904132076126222",target:"_blank",rel:"noopener noreferrer"},h=a("h2",{id:"招贤纳士",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#招贤纳士","aria-hidden":"true"},"#"),n(" 招贤纳士")],-1),v=a("p",null,"政采云前端团队（ZooTeam），一个年轻富有激情和创造力的前端团队，隶属于政采云产品研发部，Base 在风景如画的杭州。团队现有 50 余个前端小伙伴，平均年龄 27 岁，近 3 成是全栈工程师，妥妥的青年风暴团。成员构成既有来自于阿里、网易的“老”兵，也有浙大、中科大、杭电等校的应届新人。团队在日常的业务对接之外，还在物料体系、工程平台、搭建平台、性能体验、云端应用、数据分析及可视化等方向进行技术探索和实战，推动并落地了一系列的内部技术产品，持续探索前端技术体系的新边界。",-1),b=a("p",null,[n("如果你想改变一直被事折腾，希望开始能折腾事；如果你想改变一直被告诫需要多些想法，却无从破局；如果你想改变你有能力去做成那个结果，却不需要你；如果你想改变你想做成的事需要一个团队去支撑，但没你带人的位置；如果你想改变既定的节奏，将会是“5 年工作时间 3 年工作经验”；如果你想改变本来悟性不错，但总是有那一层窗户纸的模糊… 如果你相信相信的力量，相信平凡人能成就非凡事，相信能遇到更好的自己。如果你希望参与到随着业务腾飞的过程，亲手推动一个有着深入的业务理解、完善的技术体系、技术创造价值、影响力外溢的前端团队的成长历程，我觉得我们该聊聊。任何时间，等着你写点什么，发给 "),a("code",null,"ZooTeam@cai-inc.com")],-1),g=a("p",null,[a("img",{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/7/26/1738ae797b21cb74~tplv-t2oaga2asx-image.image",alt:""})],-1);function f(_,x){const s=i("ExternalLinkIcon");return t(),o("div",null,[r,a("p",null,[n("> 这是第 67 篇不掺水的原创，想获取更多原创好文，请搜索公众号关注我们吧~ 本文首发于政采云前端博客："),a("a",u,[n("编写高质量可维护的代码：逻辑判断"),e(s)])]),d,a("p",null,[a("a",k,[n("编写高质量可维护的代码：优化逻辑判断"),e(s)])]),a("p",null,[a("a",m,[n("前端文档站点搭建方案"),e(s)])]),h,v,b,g])}const j=p(l,[["render",f],["__file","编写高质量可维护的代码：数据建模.html.vue"]]);export{j as default};
