import{_ as o,z as e,A as c,Y as n,C as a,U as p,a6 as t,Q as l}from"./framework-cb9358d9.js";const u={},i=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d4eb6a01e6564840817b127265b07edd~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1),r=n("p",null,[n("img",{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/04b63d6c4def4af58cfc2274f2c86572~tplv-k3u1fbpfcp-watermark.image?",alt:"沈炼.jpg"})],-1),k={href:"https://zoo.team/article/use-of-react-profiler",target:"_blank",rel:"noopener noreferrer"},d=t('<h2 id="react-profiler-的使用" tabindex="-1"><a class="header-anchor" href="#react-profiler-的使用" aria-hidden="true">#</a> React Profiler 的使用</h2><h3 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h3><p>平时大家开发项目的时候，有时候会感觉项目卡顿，通常情况下可以即时做出整改，但也有时候不太容易找到引起卡顿的点，或者说不好发现潜在的性能问题，<code>React Developer Tools</code> 提供的 <code>Profiler</code> 可以直观的帮助大家找出 React 项目中的性能瓶颈，进一步来改善我们的应用，推荐给大家安装使用。</p><ul><li><p>从概念上讲，React 分为两个阶段工作，React 的生命周期图谱如下所示： <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b2db8317509c443395dc0b8176daa057~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><ul><li><p><strong>渲染阶段</strong> 会确定需要进行哪些更改，比如 DOM 。在此阶段 React 调用 <code>render</code>，然后将结果与上次渲染的结果进行比较。</p></li><li><p><strong>提交阶段</strong> 发生在 React 应用变化时。在此阶段 React 还会调用 <code>componentDidMount</code> 和 <code>componentDidUpdate</code> 之类的生命周期方法。（ 对于 React DOM 来说，会发生在 React 插入，更新及删除 DOM 节点的时候。）</p><p><code>Profiler</code> 是在提交阶段收集性能数据的，所以不能定位非提交阶段的性能问题。</p></li></ul></li></ul><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h3><h4 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h4>',6),m={href:"//chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi",target:"_blank",rel:"noopener noreferrer"},v={href:"//addons.mozilla.org/en-GB/firefox/addon/react-devtools/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://www.npmjs.com/package/react-devtools",target:"_blank",rel:"noopener noreferrer"},h={href:"https://fb.me/react-profiling",target:"_blank",rel:"noopener noreferrer"},f=t(`<h4 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h4><ul><li>下图为面板按钮基本功能</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b7462c89da8e4ee6a4b167185dd719fe~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><ul><li>打开设置可以记录组件 <code>rendered</code> 的原因</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/23e1eb6066b24a22b542729c9b771c78~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><ul><li>还可以高亮发生 <code>render</code> 的组件</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4dfbf9748eb24b65aff32957d35efd2d~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><h4 id="演示" tabindex="-1"><a class="header-anchor" href="#演示" aria-hidden="true">#</a> 演示</h4><p>为了方便大家阅读展示面板的信息，我们以最简单的例子来演示：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token keyword">import</span> React from <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>react<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">;</span>
 <span class="token keyword">const</span> style <span class="token operator">=</span> <span class="token punctuation">{</span>
   <span class="token literal-property property">display</span><span class="token operator">:</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>flex<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span>
   <span class="token literal-property property">justifyContent</span><span class="token operator">:</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>space<span class="token operator">-</span>around<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span>
   <span class="token literal-property property">maxWidth</span><span class="token operator">:</span> <span class="token number">800</span><span class="token punctuation">,</span>
   <span class="token literal-property property">margin</span><span class="token operator">:</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token number">0</span> auto<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span>
   <span class="token literal-property property">padding</span><span class="token operator">:</span> <span class="token number">60</span><span class="token punctuation">,</span>
 <span class="token punctuation">}</span><span class="token punctuation">;</span>
 <span class="token keyword">const</span> Display <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>Display<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">return</span> <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>pre<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">{</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>data<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>pre<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span><span class="token punctuation">;</span>
 <span class="token keyword">const</span> Count <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>count<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">return</span> <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>p<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>data<span class="token punctuation">}</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>p<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span><span class="token punctuation">;</span>
 <span class="token comment">// Anonymous</span>
 <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> React<span class="token punctuation">.</span>Component <span class="token punctuation">{</span>
   state <span class="token operator">=</span> <span class="token punctuation">{</span>
     <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
   <span class="token punctuation">}</span><span class="token punctuation">;</span>
   handleAdd <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
     <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
       <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span><span class="token punctuation">;</span>
   onChange <span class="token operator">=</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
     <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
       <span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">:</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">,</span>
     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span><span class="token punctuation">;</span>
   <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">const</span> <span class="token punctuation">{</span> text<span class="token punctuation">,</span> password<span class="token punctuation">,</span> count <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>
     <span class="token keyword">return</span> <span class="token punctuation">(</span>
       <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>div<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
         <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span>style<span class="token punctuation">}</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
           <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>div<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
             <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>input type<span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>text<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span> value<span class="token operator">=</span><span class="token punctuation">{</span>text <span class="token operator">||</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>text<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
             <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>br <span class="token operator">/</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
             <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>br <span class="token operator">/</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
             <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>input type<span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>text<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span> value<span class="token operator">=</span><span class="token punctuation">{</span>password <span class="token operator">||</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>password<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
           <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>div<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
           <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>Display data<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> text<span class="token punctuation">,</span> password <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
         <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>div<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
         <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>div align<span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>center<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
           <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>Count data<span class="token operator">=</span><span class="token punctuation">{</span>count<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
           <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleAdd<span class="token punctuation">}</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>add<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>button<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
         <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>div<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
       <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>div<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
     <span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>按如下步骤操作：</p><p>1、 点击 reload 按钮，等待页面加载完成；</p><p>2、 在 input 输入内容，使页面发生 <code>render</code> ；</p><p>3、 点击 add button ，再次使页面 <code>render </code>；</p><p>4、 停止。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2caee1dd503547be8e23b46385f0f354~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>然后 <code>Profiler</code> 生成如下的信息：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/45b04c8ddc324837885217fdde47f21a~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p><strong>A</strong> 区对应了本次 record 期间的 <strong>提交</strong> 次数，每一列都表示一次提交的数据。</p><ul><li><p>列的颜色和高度对应该次提交渲染所需的时间 （较高的黄色比较短的绿色耗费时间长）；</p></li><li><p>我们可以忽略掉最短的灰色列，灰色代表没有重新渲染；</p></li></ul><p><strong>A</strong> 区较高的 6 列则对应了我们上面的步骤操作：</p><ul><li><p>第一列对应页面的 mount ，因为是首次渲染，所以最高，代表耗时最长；</p></li><li><p>第二、三列对应了 input 输入文字引发的两次渲染；</p></li><li><p>最后三列则对应了 add button 三次点击引发的渲染。</p></li></ul><p>左右切换 <strong>A</strong> 区的数据，表示了选中列的提交信息就会展示在 <strong>B</strong> 区，同时在 <strong>C</strong> 区展示应用程序内组件（如 Display 、Count ）的详细信息。</p><ul><li><p><code>Committed at</code> 表示相对于本次 record 的时间，可以忽略；</p></li><li><p><code>Render duration</code> 表示本次提交渲染耗时，我们需要关注这个;</p></li></ul><p>例如 <strong>06/11</strong> 这次提交，整个 <code>Anonymous</code> 组件用了 <code>1ms</code> 来渲染， 但本身只耗费了 <code>0.2ms</code>，即图中的 <code>0.2ms of 1ms</code>，剩余的 <code>0.8ms</code> 用在其子级的渲染上。 子组件 <code>Display</code> 和 <code>Count</code> 也有自己对应的渲染时间，以此类推。</p><ul><li>组件的宽度及颜色表示渲染所耗费的时间，同样是黄色时间较长；</li></ul><p>为了更方便的查看组件的耗时，我们可以切换 <code>Ranked 排序图</code>，可以很清楚的看到耗费时间最长的那个组件。</p><p>例如 <strong>10/11</strong> 这次提交，操作上只是点击了 add button 来更新 <code>Count</code>, 但是这里 <code>Display</code> 却是最耗时的那个。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b9b3f59bd3ff46c0963706db6b52b973~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><ul><li>单击选中 <code>Display</code>，可以在右侧看到 6 次<code> rendered</code> 信息, 上方的 <code>Why did this render?</code> 记录了每次 <code>rendered</code> 的原因；</li></ul><p>如果你非常了解这里的代码，可以非常容易想到下一步就是优化 <code>Display</code> 的代码，因为这里的 <code>props.data</code> 看起来并没有发生什么变化。当然也可以在这个时候切换到 <code>Components</code> 选项卡，来确认你的想法，这里有组件更为详细的信息。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6fc918978d774a298528bb4f5e154a26~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><ul><li><p><code>&amp;lt;&amp;gt;</code> 可以查看源码；</p></li><li><p><code>🐞</code> 可以在控制台打印组件信息；</p></li></ul><p>阻止重新渲染</p><p>改变 <code>Display</code> 和 <code>Count</code> 的写法，保证两个组件 <code>reRender</code> 只是因为自身属性发生了变化，我们再来看一下效果。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token keyword">const</span> Display <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">memo</span><span class="token punctuation">(</span>
   <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>Display<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">return</span> <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>pre<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">{</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>data<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>pre<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span><span class="token punctuation">,</span>
   <span class="token punctuation">(</span>prev<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
     <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>prev<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
 <span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">const</span> Count <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">memo</span><span class="token punctuation">(</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>count<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">return</span> <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>p<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>data<span class="token punctuation">}</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>p<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再重复执行一次上面的操作，看一下结果。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ca7ebe3c42554db5a5a453e3554e6fbe~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>很遗憾，虽然 <code>Display</code> 在 <code>React.memo</code> 的比较函数之下，已经不再重新 <code>render</code>。但是 <code>Display</code> 的渲染时间和应用的渲染时间相比改写之前都变大了，这说明 <code>memo</code> 函数的比较时间大于组件自身的渲染时间，在当前这个简单的应用程序下，以 <code>React.memo</code> 来 &quot;优化&quot; 应用是得不偿失的。</p><h4 id="改进" tabindex="-1"><a class="header-anchor" href="#改进" aria-hidden="true">#</a> 改进</h4><p>现在我们知道如何阅读 <code>Profiler</code> 的展示面板以及生成的图表信息，为了更直观的感受到阻止 <code>reRender </code>的效果，我们在例子中增加一个常见的 List 再来看一下。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> List<span class="token punctuation">,</span> Avatar <span class="token punctuation">}</span> from <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>antd<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> Length100List <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> data <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>List
      itemLayout<span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>horizontal<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>
      dataSource<span class="token operator">=</span><span class="token punctuation">{</span>data<span class="token punctuation">}</span>
      renderItem<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">(</span>
        <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>List<span class="token punctuation">.</span>Item key<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>id<span class="token punctuation">}</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
          <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>List<span class="token punctuation">.</span>Item<span class="token punctuation">.</span>Meta
            avatar<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>Avatar src<span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>zos<span class="token punctuation">.</span>alipayobjects<span class="token punctuation">.</span>com<span class="token operator">/</span>rmsportal<span class="token operator">/</span>ODTLcjxAfvqbxHnVXCYX<span class="token punctuation">.</span>png<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">}</span>
            title<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>name<span class="token punctuation">.</span>last<span class="token punctuation">}</span>
            description<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>email<span class="token punctuation">}</span>
          <span class="token operator">/</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
          <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>div<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>nat<span class="token punctuation">}</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>div<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>List<span class="token punctuation">.</span>Item<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
      <span class="token punctuation">)</span><span class="token punctuation">}</span>
    <span class="token operator">/</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// list 代表一个长度为100的数组，取自 https://randomuser.me/api/?results=100&amp;amp;inc=name,gender,email,nat&amp;amp;noinfo</span>
<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span>style2<span class="token punctuation">}</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>Length100List data<span class="token operator">=</span><span class="token punctuation">{</span>list<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>div<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们点击 add button 两次，使页面 <code>render </code>， 然后可以看到 <code>Profiler</code> 记录的信息如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c8d703cea44341f38c28b3ec9c049aca~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>很明显，未加优化的 <code>Length100List</code> 占用了大部分 <code>commit</code> 时间，而这个时间很明显是不必要的，我们使用 <code>React.memo</code> 来阻止 <code>List</code> 的不必要渲染。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> PureListItem <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">memo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> item <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>List<span class="token punctuation">.</span>Item key<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>id<span class="token punctuation">}</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
      <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>List<span class="token punctuation">.</span>Item<span class="token punctuation">.</span>Meta
        avatar<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>Avatar src<span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>zos<span class="token punctuation">.</span>alipayobjects<span class="token punctuation">.</span>com<span class="token operator">/</span>rmsportal<span class="token operator">/</span>ODTLcjxAfvqbxHnVXCYX<span class="token punctuation">.</span>png<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">}</span>
        title<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>name<span class="token punctuation">.</span>last<span class="token punctuation">}</span>
        description<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>email<span class="token punctuation">}</span>
      <span class="token operator">/</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
      <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>div<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>nat<span class="token punctuation">}</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>div<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>List<span class="token punctuation">.</span>Item<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> Length100List <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">memo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> data <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>List itemLayout<span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>horizontal<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span> dataSource<span class="token operator">=</span><span class="token punctuation">{</span>data<span class="token punctuation">}</span> renderItem<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>PureListItem item<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再看一下效果：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4e07f5c2935a47749445a95b2dfca1e7~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>现在 <code>commit</code> 时间最长的就是我们点击add button 更新数据的地方。嗯，满意！</p><h3 id="优化方式" tabindex="-1"><a class="header-anchor" href="#优化方式" aria-hidden="true">#</a> 优化方式</h3><ul><li><h4 id="shouldcomponentupdate" tabindex="-1"><a class="header-anchor" href="#shouldcomponentupdate" aria-hidden="true">#</a> shouldComponentUpdate()</h4></li></ul>`,51),g=n("code",null,"props",-1),y=n("code",null,"JSON.stringify",-1),_=n("code",null,"props",-1),w=n("code",null,"reRender",-1),j=n("code",null,"JSON.stringify",-1),x={href:"https://immutable-js.com/",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"immutable",-1),R={href:"https://juejin.cn/post/6976798974757830687",target:"_blank",rel:"noopener noreferrer"},C=n("code",null,"CustomComponent",-1),L=n("code",null,"PureComponent",-1),z=t(`<ul><li>后续版本，React 可能会将 <code>shouldComponentUpdate</code> 视为提示而不是严格的指令，并且当返回 <code>false</code> 时，仍可能导致组件重新渲染 <s>（意思就是 hook 大法好）</s>；</li><li>如今由于函数组件和 <code>hook</code> 的使用，这样的优化场景已经大大减少了；</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> React from <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>react<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> is <span class="token punctuation">}</span> from <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>immutable<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> React<span class="token punctuation">.</span>Component <span class="token punctuation">{</span>
  <span class="token function">shouldComponentUpdate</span><span class="token punctuation">(</span><span class="token parameter">nextProps <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> nextState <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>
      Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">!==</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">||</span>
      Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">!==</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>nextState<span class="token punctuation">)</span><span class="token punctuation">.</span>length
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> nextProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> nextProps<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> nextState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> nextState<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),P=n("h4",{id:"react-purecomponent",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#react-purecomponent","aria-hidden":"true"},"#"),a(" React.PureComponent")],-1),D=n("code",null,"React.PureComponent",-1),O=n("code",null,"shouldComponentUpdate",-1),I={href:"https://reactjs.org/docs/shallow-compare.html",target:"_blank",rel:"noopener noreferrer"},S=n("code",null,"PureComponent",-1),A=n("code",null,"props &amp; state",-1),N=n("p",null,[n("code",null,"React.memo"),a(" 与其原理一样，只是用于 "),n("code",null,"函数组件"),a(" 上，回调函数的返回值与 "),n("code",null,"shouldComponentUpdate"),a(" 相反;")],-1),E=t(`<li><h4 id="hook" tabindex="-1"><a class="header-anchor" href="#hook" aria-hidden="true">#</a> Hook</h4><p>React 提供的诸如 <code>useEffect</code>、<code>useMemo</code>、<code>useCallback </code> 等钩子函数，他们都带有 <code>memoized</code> 属性，他们的第二个参数都是一个值数组，当值数组的数据发生变化时，<code>hook</code>函数会重新执行。虽然 <code>hook</code> 解决了一些类组件的痛点，但是 <code>hook</code> 的依赖项对比依然存在着上述痛点，并且这里的依赖项有时候会很长，社区里依然有让官方添加自定义比较功能的需求，不过官方给出的 <code>自定义hook</code> 已经可以帮助我们实现这样的需求。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// customEquals: lodash.isEqual、Immutable.is、dequal.deepEqual 等；</span>
<span class="token keyword">const</span> useOriginalCopy <span class="token operator">=</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> copy <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> diffRef <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useRef</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">customEquals</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> copy<span class="token punctuation">.</span>current<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    copy<span class="token punctuation">.</span>current <span class="token operator">=</span> value<span class="token punctuation">;</span>
    diffRef<span class="token punctuation">.</span>current <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span>diffRef<span class="token punctuation">.</span>current<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1),U=n("h3",{id:"总结",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#总结","aria-hidden":"true"},"#"),a(" 总结")],-1),M=n("p",null,[a("关于 React 项目中的 "),n("code",null,"reRender"),a(" 优化一直是个老生常谈的问题，大家在项目中或多或少都能总结出自己的经验，如批量更新、不透传 props 、使用发布订阅模式等。而且在 React 推崇的函数式编程中，通常情况下一个组件的代码量不宜过多，这也就更多的要求开发者将组件细化，而更容易的控制组件的属性与状态，当你迷惑为什么发生 "),n("code",null,"reRender"),a(" 的时候，"),n("code",null,"React Profiler"),a(" 是一个答案。")],-1),T=n("h3",{id:"参考资料",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考资料","aria-hidden":"true"},"#"),a(" 参考资料")],-1),B={href:"https://react.docschina.org/docs/optimizing-performance.html",target:"_blank",rel:"noopener noreferrer"},J={href:"https://react.docschina.org/blog/2018/09/10/introducing-the-react-profiler.html",target:"_blank",rel:"noopener noreferrer"},V={href:"https://scotch.io/tutorials/use-the-react-profiler-for-performance",target:"_blank",rel:"noopener noreferrer"},H={href:"https://github.com/xitu/gold-miner/blob/master/TODO1/increase-your-apps-performance-with-react-hooks-and-the-react-dev-tools.md",target:"_blank",rel:"noopener noreferrer"},X={href:"https://github.com/facebook/react/issues/16221",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://juejin.cn/post/6976798974757830687",target:"_blank",rel:"noopener noreferrer"},W=n("h2",{id:"推荐阅读",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#推荐阅读","aria-hidden":"true"},"#"),a(" 推荐阅读")],-1),Z={href:"https://juejin.cn/post/7002746459456176158",target:"_blank",rel:"noopener noreferrer"},F={href:"https://juejin.cn/post/6997536906967777316",target:"_blank",rel:"noopener noreferrer"},G={href:"https://juejin.cn/post/7005334860529156109",target:"_blank",rel:"noopener noreferrer"},K={href:"https://juejin.cn/post/6987140782595506189",target:"_blank",rel:"noopener noreferrer"},Q=n("h2",{id:"开源作品",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#开源作品","aria-hidden":"true"},"#"),a(" 开源作品")],-1),$=n("ul",null,[n("li",null,"政采云前端小报")],-1),nn={href:"https://www.zoo.team/openweekly/",target:"_blank",rel:"noopener noreferrer"},an=n("h2",{id:"招贤纳士",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#招贤纳士","aria-hidden":"true"},"#"),a(" 招贤纳士")],-1),sn=n("p",null,"政采云前端团队（ZooTeam），一个年轻富有激情和创造力的前端团队，隶属于政采云产品研发部，Base 在风景如画的杭州。团队现有 50 余个前端小伙伴，平均年龄 27 岁，近 3 成是全栈工程师，妥妥的青年风暴团。成员构成既有来自于阿里、网易的“老”兵，也有浙大、中科大、杭电等校的应届新人。团队在日常的业务对接之外，还在物料体系、工程平台、搭建平台、性能体验、云端应用、数据分析及可视化等方向进行技术探索和实战，推动并落地了一系列的内部技术产品，持续探索前端技术体系的新边界。",-1),pn=n("p",null,[a("如果你想改变一直被事折腾，希望开始能折腾事；如果你想改变一直被告诫需要多些想法，却无从破局；如果你想改变你有能力去做成那个结果，却不需要你；如果你想改变你想做成的事需要一个团队去支撑，但没你带人的位置；如果你想改变既定的节奏，将会是“5 年工作时间 3 年工作经验”；如果你想改变本来悟性不错，但总是有那一层窗户纸的模糊… 如果你相信相信的力量，相信平凡人能成就非凡事，相信能遇到更好的自己。如果你希望参与到随着业务腾飞的过程，亲手推动一个有着深入的业务理解、完善的技术体系、技术创造价值、影响力外溢的前端团队的成长历程，我觉得我们该聊聊。任何时间，等着你写点什么，发给 "),n("code",null,"ZooTeam@cai-inc.com")],-1),tn=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/98d3aa3d1f8646a8bcda8cfd9e335a4b~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1);function on(en,cn){const s=l("ExternalLinkIcon");return e(),c("div",null,[i,r,n("p",null,[a("> 这是第 115 篇不掺水的原创，想获取更多原创好文，请搜索公众号关注我们吧~ 本文首发于政采云前端博客："),n("a",k,[a("React Profiler 的使用"),p(s)])]),d,n("p",null,[a("可以从 "),n("a",m,[a("Chrome 应用市场"),p(s)]),a("、"),n("a",v,[a("Firefox 浏览器扩展"),p(s)]),a("、"),n("a",b,[a("Node 包"),p(s)]),a(" 下载安装；")]),n("p",null,[a("react 16.5+ 开发模式下才可以使用该功能，生成环境使用请移步 "),n("a",h,[a("官方文档"),p(s)]),a(" 。")]),f,n("p",null,[a("针对不同的业务场景，这里的比较函数会有不同的写法，比如仅仅比较 "),g,a(" 的某个属性，或与本文中的例子一样以 "),y,a(" 来直接比较 "),_,a("。对于复杂的数据结构，如果需要阻止 "),w,a("，不建议进行深层比较或者使用 "),j,a("，这样非常影响效率。可以考虑使用 "),n("a",x,[a("immutable"),p(s)]),a(" 来加速嵌套数据的比较，关于 "),q,a(" 的使用，可以查看 "),n("a",R,[a("15 分钟学会 Immutable"),p(s)]),a("。你可以去实现自己的 "),C,a("，以达到和 "),L,a(" 一样的使用方式和目的。")]),z,n("ul",null,[n("li",null,[P,n("p",null,[D,a(" 依靠 "),O,a(" 实现了一层 "),n("a",I,[a("shallowEqual"),p(s)]),a("，仅作对象的浅层比较，以减少跳过更新的可能性，但是如果对象中包含复杂的数据结构，则有可能产生错误的比对，所以 "),S,a(" 会更多的运用于较为简单的 "),A,a(" 展示组件上。")]),N]),E]),U,M,T,n("p",null,[n("a",B,[a("React 性能优化"),p(s)])]),n("p",null,[n("a",J,[a("React Profiler 介绍"),p(s)])]),n("p",null,[n("a",V,[a("Use the React Profiler for Performance"),p(s)])]),n("p",null,[n("a",H,[a("用 React Hooks 和调试工具提升应用性能"),p(s)])]),n("p",null,[n("a",X,[a("React Issuse 16221"),p(s)])]),n("p",null,[n("a",Y,[a("15 分钟学会 Immutable"),p(s)])]),W,n("p",null,[n("a",Z,[a("电商最小存货 - SKU 和 算法实现"),p(s)])]),n("p",null,[n("a",F,[a("你需要知道的项目管理知识"),p(s)])]),n("p",null,[n("a",G,[a("如何从 0 到 1 搭建代码全局检索系统"),p(s)])]),n("p",null,[n("a",K,[a("如何搭建适合自己团队的构建部署平台"),p(s)])]),Q,$,n("p",null,[n("strong",null,[a("开源地址 "),n("a",nn,[a("www.zoo.team/openweekly/"),p(s)])]),a(" (小报官网首页有微信交流群)")]),an,sn,pn,tn])}const un=o(u,[["render",on],["__file","React Profiler 的使用.html.vue"]]);export{un as default};
