import{_ as e,z as o,A as c,Y as n,C as a,U as p,a6 as t,Q as l}from"./framework-cb9358d9.js";const i={},r=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d4eb6a01e6564840817b127265b07edd~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1),u=n("p",null,[n("img",{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c1c8666ca6fa4ce48b717764ebc221a1~tplv-k3u1fbpfcp-watermark.image?",alt:"大喵.png"})],-1),d={href:"https://zoo.team/article/use-of-react-profiler",target:"_blank",rel:"noopener noreferrer"},k=t(`<h1 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> <strong>前言</strong></h1><p>回流和重绘是前端开发的高频词汇之一，你可以在各种面经，性能优化相关文章可以看到，但是很多都是草草带过。本文带你从浏览器渲染流程中了解回流与重绘的原理。</p><h1 id="浏览器渲染流程" tabindex="-1"><a class="header-anchor" href="#浏览器渲染流程" aria-hidden="true">#</a> 浏览器渲染流程</h1><p>浏览器的主要功能就是向服务端发送请求，下载解析资源显示在浏览器上。将网页内容展示到浏览器上的过程，这其实就是渲染引擎完成的。渲染引擎有很多种，这里以 webkit 为例。</p><h4 id="webkit-渲染引擎的主流程" tabindex="-1"><a class="header-anchor" href="#webkit-渲染引擎的主流程" aria-hidden="true">#</a> WebKit 渲染引擎的主流程</h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/12885aa2adeb4e2d81a15bb06b880bb1~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>(图片来自于网络)</p><p>从上面这个图上，我们可以看到，浏览器渲染流程如下：</p><ol><li>解析 HTML Source，生成 DOM 树。</li><li>解析 CSS，生成 CSSOM 树。</li><li>将 DOM 树和 CSSOM 树结合，去除不可见元素，生成渲染树( Render Tree )。</li><li>Layout (布局)：根据生成的渲染树，进行布局( Layout )，得到节点的几何信息(宽度、高度和位置等)。</li><li>Painting (重绘):根据渲染树以及回流得到的几何信息，将 Render Tree 的每个像素渲染到屏幕上。</li></ol><h4 id="渲染树" tabindex="-1"><a class="header-anchor" href="#渲染树" aria-hidden="true">#</a> 渲染树</h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5be05f02ba9140a49e74ef6b1707fad5~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>(图片来自于网络)</p><ul><li>构建渲染树流程： <ol><li>从 DOM 树的根节点开始遍历每个可见节点。</li><li>对于每个可见的节点，找到 CSSOM 树中对应的规则，并应用它们。</li><li>根据每个可见节点以及其对应的样式，组合生成渲染树。</li></ol></li><li>什么是不可见节点 <ol><li>一些不会渲染输出的节点，比如 script、meta、link 等。</li><li>一些通过 css 进行隐藏的节点。比如 display : none。注意，使用 visibility 和 opacity 隐藏的节点，还是会显示在渲染树上的（因为还占据文档空间），只有 display : none 的节点才不会显示在渲染树上。</li></ol></li></ul><h1 id="回流与重绘的原理" tabindex="-1"><a class="header-anchor" href="#回流与重绘的原理" aria-hidden="true">#</a> 回流与重绘的原理</h1><p>webkit 将渲染树中的元素成为渲染对象，每一个渲染对象都代表了一个矩形区域，通常对应相关节点的css框，包含宽度、高度和位置等几何信息。框的类型会受到与节点相关的 “display” 样式属性的影响，根据不同 display 类型创建不同渲染对象</p><ul><li>RenderInline</li><li>RenderBlock</li><li>RenderListItem</li></ul><p>WebKits RenderObject 类是所有渲染对象的基类，其定义如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">RenderObject</span><span class="token punctuation">{</span>
  virtual <span class="token keyword">void</span> <span class="token function">layout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  virtual <span class="token keyword">void</span> <span class="token function">paint</span><span class="token punctuation">(</span>PaintInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
  virtual <span class="token keyword">void</span> rect <span class="token function">repaintRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Node<span class="token operator">*</span> node<span class="token punctuation">;</span>  <span class="token comment">// the DOM node</span>
  RenderStyle<span class="token operator">*</span> style<span class="token punctuation">;</span>  <span class="token comment">// the computed style</span>
  RenderLayer<span class="token operator">*</span> containgLayer<span class="token punctuation">;</span> <span class="token comment">// the containing z-index layer</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>每个渲染对象都有 <code>layout</code> 和 <code>paint</code> 方法，分别对应了回流和重绘的方法。布局是一个递归的过程。根渲染对象是从HTML元素开始的，然后递归遍历部分或全部树结构，每渲染对象都会调用需要进行布局的子代的 <code>layout</code> 或 <code>paint</code></strong> 方法。</p><h1 id="什么是回流" tabindex="-1"><a class="header-anchor" href="#什么是回流" aria-hidden="true">#</a> <strong>什么是回流</strong></h1><p>渲染对象在创建完成并添加到渲染树时，只是将 DOM 节点和它对应的样式结合起来，并不包含位置和大小信息。所以还需要 <code>layout</code> 这一过程计算他们的位置和大小，这一过程称为回流。</p><h4 id="全局布局和增量布局" tabindex="-1"><a class="header-anchor" href="#全局布局和增量布局" aria-hidden="true">#</a> 全局布局和增量布局</h4><p>全局布局是指触发了整个渲染树范围的布局，一般是同步的，触发原因可能包括：</p><ol><li>影响所有渲染对象的全局样式更改，例如字体大小更改。</li><li>屏幕大小调整。</li></ol><p>增量布局：是指对标记为 <code>“dirty”</code> 的渲染对象进行布局。一般是异步执行的，浏览器将增量布局的 “<code>reflow </code> 命令” 加入队列，而调度程序会触发这些命令的批量执行。但是请求样式信息（例如 offsetHeight ）的脚本可同步触发增量布局。</p><p>&gt; 为避免对所有细小更改都进行整体布局，浏览器采用了一种 dirty 位系统。如果某个渲染对象发生了更改，或者将自身及其子代标注为 “dirty”，则需要进行布局。 &gt; &gt; 有两种标记：“dirty” 和 “children are dirty”。“children are dirty” 表示尽管渲染对象自身没有变化，但它至少有一个子代需要布局。</p><p>触发条件：</p><p>回流这一阶段主要是计算节点的位置和几何信息，那么当页面布局和几何信息发生变化的时候，就需要回流</p><ul><li>一个 DOM 元素的几何属性变化，常见的几何属性有 width、height、padding、margin、left、top、border 等等。</li><li>使 DOM 节点发生增减或者移动。</li><li>读写 offset 家族、scroll 家族和 client 家族属性的时候，浏览器为了获取这些值，需要进行回流操作。</li><li>调用 window.getComputedStyle 方法。</li></ul><h1 id="什么是重绘" tabindex="-1"><a class="header-anchor" href="#什么是重绘" aria-hidden="true">#</a> <strong>什么是重绘</strong></h1><p>通过构造渲染树和回流阶段，知道了哪些节点是可见的，以及可见节点的样式和具体的几何信息(位置、大小)，那么我们就可以将渲染树的每个节点都转换为屏幕上的实际像素，这个过程就叫做重绘。</p><p>在重绘阶段，系统会遍历渲染树，并调用渲染对象的 <code>paint</code> 方法，将渲染对象的内容显示在屏幕上。和布局一样，绘制也分为全局（绘制整个呈现树）和增量两种。</p><h4 id="绘制顺序" tabindex="-1"><a class="header-anchor" href="#绘制顺序" aria-hidden="true">#</a> <strong>绘制顺序</strong></h4><p>绘制的顺序其实就是元素进入堆栈样式上下文的顺序。这些堆栈会从后往前绘制，因此这样的顺序会影响绘制。块渲染对象的堆栈顺序如下：</p><ol><li>背景颜色</li><li>背景图片</li><li>边框</li><li>子代</li><li>轮廓</li></ol><p>触发条件：</p><p>重绘是一个元素外观的改变所触发的浏览器行为，例如改变 <code>visibility</code>、<code>outline</code>、<code>background-color</code> 等属性，这些属性只是影响元素的外观，风格，并且没有影响几何属性的时候，会导致重绘 ( repaint )</p><h1 id="结合-performance-工具调试" tabindex="-1"><a class="header-anchor" href="#结合-performance-工具调试" aria-hidden="true">#</a> <strong>结合 performance 工具调试</strong></h1><p>下面是个小例子，结合 performance 工具调试一下更直观</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>#box<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span> 
<span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>#btn<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span> 
btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>click<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span> 
  box<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>200px<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ac51305ce07d4477a4e0c034261f6618~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>截图可以看是一条完整的渲染流程 JS / CSS &gt; 样式 &gt; 布局 &gt; 绘制 &gt; 合成</p><p>如果我们只是修改背景色</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>box<span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>#fof<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b8b8b2d082c3415f94754ed77a95b074~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>通过上图发现修改背景颜色，渲染流程跳过了 Layout（布局）这一环节，继续走绘制以及后面的流程。</p><h1 id="像素管道" tabindex="-1"><a class="header-anchor" href="#像素管道" aria-hidden="true">#</a> 像素管道</h1><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e8eb9c27f3114a7293a16e1e7eb7736e~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>(图片来自于网络)</p><p><strong>上图是一张很经典的流程图，是浏览器运行的单个帧的渲染流水线，称为像素管道</strong></p><ul><li><strong>JavaScript</strong>。一般来说，我们会使用 JavaScript 来实现一些视觉变化的效果。比如用 jQuery 的 <code>animate</code> 函数做一个动画、对一个数据集进行排序或者往页面里添加一些 DOM 元素等。当然，除了 JavaScript，还有其他一些常用方法也可以实现视觉变化效果，比如: CSS Animations、Transitions 和 Web Animation API。</li><li><strong>样式计算</strong>。此过程是根据匹配选择器（例如 <code>.headline</code> 或 <code>.nav &amp;gt; .nav__item</code>）计算出哪些元素应用哪些 CSS 规则的过程。从中知道规则之后，将应用规则并计算每个元素的最终样式。</li><li><strong>布局</strong>。在知道对一个元素应用哪些规则之后，浏览器即可开始计算它要占据的空间大小及其在屏幕的位置。网页的布局模式意味着一个元素可能影响其他元素，例如 <code>&amp;lt;body&amp;gt;</code> 元素的宽度一般会影响其子元素的宽度以及树中各处的节点，因此对于浏览器来说，布局过程是经常发生的。</li><li><strong>绘制</strong>。绘制是填充像素的过程。它涉及绘出文本、颜色、图像、边框和阴影，基本上包括元素的每个可视部分。绘制一般是在多个表面（通常称为层）上完成的。绘制其实是分为两个步骤 ：创建绘图调用的列表，填充像素。</li><li><strong>合成</strong>。由于页面的各部分可能被绘制到多层，由此它们需要按正确顺序绘制到屏幕上，以便正确渲染页面。对于与另一元素重叠的元素来说，这点特别重要，因为一个错误可能使一个元素错误地出现在另一个元素的上层。</li></ul><p>单帧的渲染流水线每个环节都可能对性能产生影响，所以我们要尽可能减少管道执行步骤。不一定每帧都总是会经过管道每个部分的处理，实际上，不管是使用 JavaScript、CSS 还是网络动画，在实现视觉变化时，管道针对指定帧的运行通常有三种方式:</p><p>1.JS / CSS &gt; 样式 &gt; 布局 &gt; 绘制 &gt; 合成</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7b1195b9bb5c4768a4a28a09cbb25ea6~tplv-k3u1fbpfcp-zoom-1.image" alt="">如果修改元素的 layout 属性，也就是触发了回流。例如改变元素的宽度、高度等，那么浏览器会触发重新布局，解析之后的一系列子阶段，这个过程就叫回流。回流需要更新完整的渲染流水线，所以开销也是最大的。</p><p>2.JS / CSS &gt; 样式 &gt; 绘制 &gt; 合成</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4d027fe8cb704bf59741962feb1b10ec~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>如果修改了背景图片、文字颜色或阴影等不会影响页面布局的属性，则浏览器会跳过布局，但是后面的绘制以及后面的流程还是会执行的。</p><p>3.JS / CSS &gt; 样式 &gt; 合成</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/65fa2eff94aa4a91bca2fc5d616e0516~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>有些属性可以使渲染流水线跳过布局和绘制环节，只需要做合成层的合并即可，例如：transform 和 opacity 属性。</p><p>只有元素提升为合成层后，transform 和 opacity 才不会触发 paint，如果不是合成层，则其依然会触发 paint。</p><p><strong>按照渲染流水线的顺序可知，回流一定会触发重绘，而重绘不一定发生回流</strong></p>`,62),m={href:"https://csstriggers.com/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://developers.google.cn/web/fundamentals/performance/rendering/stick-to-compositor-only-properties-and-manage-layer-count",target:"_blank",rel:"noopener noreferrer"},h=t(`<h1 id="如何减少回流与重绘" tabindex="-1"><a class="header-anchor" href="#如何减少回流与重绘" aria-hidden="true">#</a> 如何减少回流与重绘</h1><p>上面我们已经介绍了像素管道相关内容，知道回流和重绘的代价是非常昂贵的，如果我们不停的在改变页面的布局，就会造成浏览器耗费大量的开销在进行页面的计算，对用户体验非常的不友好。减少回流与重绘前端性能优化重要手段之一。</p><h4 id="减少强制同步布局" tabindex="-1"><a class="header-anchor" href="#减少强制同步布局" aria-hidden="true">#</a> 减少强制同步布局</h4><p>避免频繁读取会引发回流/重绘的属性，如果确实需要多次使用，就用一个变量缓存起来。</p><p>比如下属性或方法时，浏览器会立刻清空队列</p><p>读写 offset 家族、scroll 家族和 client 家族属性，以及 getComputedStyle() 方法和 getBoundingClientRect() 方法</p><p>&gt; 现代浏览器会对频繁的回流或重绘操作进行优化，浏览器会维护一个队列，把所有引起回流和重绘的操作放入队列中，如果队列中的任务数量或者时间间隔达到一个阈值的，浏览器就会将队列清空，进行一次批处理，这样可以把多次回流和重绘变成一次。</p><h4 id="避免频繁操作-dom" tabindex="-1"><a class="header-anchor" href="#避免频繁操作-dom" aria-hidden="true">#</a> 避免频繁操作 DOM</h4><p>创建一个 documentFragment，DOM 操作都在 documentFragment 上执行，最后再把它挂载到他的父节点上。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>container<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> content <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createDocumentFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">let</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>li<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span>
  li<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>li<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token operator">+</span>i
  content<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
container<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="开启gpu加速" tabindex="-1"><a class="header-anchor" href="#开启gpu加速" aria-hidden="true">#</a> <strong>开启GPU加速</strong></h4><p>样式中有类似像 ps 中图层的概念，每一层中的 Layout 和 Paint 互不影响。开启 GPU 加速元素会被单独提升到一层。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>style<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
#box<span class="token punctuation">{</span>
    <span class="token literal-property property">width</span><span class="token operator">:</span> 100px<span class="token punctuation">;</span>
    <span class="token literal-property property">height</span><span class="token operator">:</span> 100px<span class="token punctuation">;</span>
    <span class="token literal-property property">background</span><span class="token operator">:</span> #f00<span class="token punctuation">;</span>
    <span class="token literal-property property">transition</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">.</span>5s ease<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>style<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>body<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>div id<span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>box<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>div<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>button id<span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>btn<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>点击<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>button<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>body<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>html<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>script<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
    <span class="token keyword">const</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>#box<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>#btn<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
    btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>click<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
       box<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token function">translateX</span><span class="token punctuation">(</span>200px<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>script<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/96a4f610b02147769747d593eba10526~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>有些文章有写到 transform 和 opacity 属性不会引起回流和重绘，但是上述例子（只截取动画开始部分）实际效果是在动画开始和结束的时候都有一次重绘（Paint。动画过程中只会发生 **composite **合成。那这里为什么会有重绘呢？是因为对 transform 和 opacity 应用了 animation 或者 transition属性是需要这两个属性是在过程中的，如果 animation 或者 transition 未开始或者已结束，那么提升合成层也会失效。所以动画开始前创建合成层发生一次重绘，动画结束后独立的合成层被移除，移除后会引发重绘。</p><p>在控制台的 Layers 工具可以看到合成层：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c3e98d1e6e644818abe84833a4b01377~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>&gt; WebKit 内核的浏览器中，CSS3 的 transform、opacity、filter 这些属性就可以实现合成的效果，浏览器会将渲染层提升为合成层</p><h4 id="如何开启硬件加速呢" tabindex="-1"><a class="header-anchor" href="#如何开启硬件加速呢" aria-hidden="true">#</a> 如何开启硬件加速呢？</h4><ul><li>css 的 will-change 属性 https://developer.mozilla.org/zh-CN/docs/Web/CSS/will-change</li><li>不支持 will-change 的可以使用 translateZ(0)</li></ul><p>&gt; 硬件加速不是万金油，单独创建合成层是有代价的，每创建一个合成层，就要为其分配内存，内存大小取决于复合层的数量 &gt; &gt; 复合层的大小 层的管理也更为复杂，在一些低端和终端移动端设备中更为明显，滥用 GPU 加速会引起页面卡顿甚至闪退。</p><h4 id="不要滥用硬件加速" tabindex="-1"><a class="header-anchor" href="#不要滥用硬件加速" aria-hidden="true">#</a> 不要滥用硬件加速</h4><h5 id="隐式合成" tabindex="-1"><a class="header-anchor" href="#隐式合成" aria-hidden="true">#</a> 隐式合成</h5><p>有两个元素绝对定位的元素 a,b ,他们有部分重叠，a 在下 b 在上，如果给 a 增加 translateZ(0) 属性或者别的属性，使得 a 元素提升到合成层，那么为了保持 a 在下 b 在上的这种关系，b 元素也会被提升到合成层。</p><p>举个例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>style<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
    <span class="token punctuation">.</span>box1 <span class="token punctuation">{</span>
        <span class="token literal-property property">width</span><span class="token operator">:</span> 100px<span class="token punctuation">;</span>
        <span class="token literal-property property">height</span><span class="token operator">:</span> 100px<span class="token punctuation">;</span>
        background<span class="token operator">-</span>color<span class="token operator">:</span> #<span class="token number">999</span><span class="token punctuation">;</span>
        <span class="token literal-property property">position</span><span class="token operator">:</span> absolute<span class="token punctuation">;</span>
        <span class="token literal-property property">left</span><span class="token operator">:</span> 100px<span class="token punctuation">;</span>
        <span class="token literal-property property">top</span><span class="token operator">:</span> 100px<span class="token punctuation">;</span>
        <span class="token literal-property property">transform</span><span class="token operator">:</span> <span class="token function">translateZ</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token punctuation">.</span>box2 <span class="token punctuation">{</span>
        <span class="token literal-property property">width</span><span class="token operator">:</span> 100px<span class="token punctuation">;</span>
        <span class="token literal-property property">height</span><span class="token operator">:</span> 100px<span class="token punctuation">;</span>
        background<span class="token operator">-</span>color<span class="token operator">:</span> #<span class="token number">666</span><span class="token punctuation">;</span>
        <span class="token literal-property property">position</span><span class="token operator">:</span> absolute<span class="token punctuation">;</span>
        z<span class="token operator">-</span>index<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token literal-property property">left</span><span class="token operator">:</span> 180px<span class="token punctuation">;</span>
        <span class="token literal-property property">top</span><span class="token operator">:</span> 180px<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>style<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>

<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>body<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>box1<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>a<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>div<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>box2<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>b<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>div<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>body<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>

<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>html<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0372a570c10c4b6f9e983e8085debc12~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>上图中 a 提升到合成层 ，因为 a 层级低，为了保持原有的层级关系 会把b也提成为合成层。</p><p>我搞了个极端的例子 以手淘的网站为例 控制台给所有元素都提升到合成层</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">*</span><span class="token punctuation">{</span>
	 <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1434e6b2b2214eb688f2de25e1aff488~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>试想一下如果我们不小把层级较低的元素提成为合成层 ，有可能造成大量的无意义的提升的合成层，虽然浏览器有层压缩机制，但是也有很多情况无法压缩，合成过多导致层爆炸浏览器崩溃，卡顿等等情况。</p><p>如果你现有项目 在一些低端或者终端移动设备不是那么流畅，可以排查一些是不是因为隐式合成导致的，可以结合调试工具看一下</p><p>是不是有很多黄色的块，如果存在大量的合成层肯定是不合理的，可以结合合成原因排查一下。</p><h4 id="使用-requestanimationframe" tabindex="-1"><a class="header-anchor" href="#使用-requestanimationframe" aria-hidden="true">#</a> 使用 requestAnimationFrame</h4><p><strong><code>window.requestAnimationFrame()</code></strong> 告诉浏览器——你希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。该方法需要传入一个回调函数作为参数，该回调函数会在浏览器下一次重绘之前执行</p><p>使用 requestAnimationFrame 替代 setTimeout 或 setInterval 来执行动画之类的视觉变化，避免轻易造成丢帧导致卡顿。</p><p>&gt; 注意：不要在回调函数里调用会触发强制同步布局的属性或者方法</p><h4 id="使用-requestidlecallback" tabindex="-1"><a class="header-anchor" href="#使用-requestidlecallback" aria-hidden="true">#</a> 使用 requestIdleCallback</h4><p><code>window.requestIdleCallback()</code> 方法将在浏览器的空闲时段内调用的函数排队。这使开发者能够在主事件循环上执行后台和低优先级工作，而不会影响延迟关键事件，如动画和输入响应。函数一般会按先进先调用的顺序执行，然而，如果回调函数指定了执行超时时间 <code> timeout</code>，则有可能为了在超时前执行函数而打乱执行顺序。</p><p>在 <code>requestIdleCallback</code> 的回调中构建 Document Fragment，然后在下一帧的 <code>requestAnimationFrame</code> 回调进行真实的 DOM 变动。</p><h4 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h4><p>还有很多就不一一举例了，这里简单列举一下：</p><ul><li>将动画效果应用到 position 属性为 absolute 或 fixed 的元素上，给 z-index 层级变高一点。</li><li>top left 使用 transform 代替。</li><li>避免使用 CSS 表达式/如：calc。</li><li>使用性能更高的选择器，如类选择器。同时可以选择性使用 BEM（块、元素、修饰符）规范。</li></ul><h1 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> <strong>总结</strong></h1><p>本文从浏览器渲染流程的角度讲述了回流和重绘的原理，通过 performance 调试工具更直观的感受到像素管道的五大关键路径，文末有提到常见的优化回流和重绘的例子，希望对你有帮助，有不正确不严谨的地方，欢迎指正！</p><p>参考连接</p>`,47),v={href:"https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/#Render_tree_construction",target:"_blank",rel:"noopener noreferrer"},g={href:"https://developers.google.cn/web/fundamentals/performance/rendering/",target:"_blank",rel:"noopener noreferrer"},f={href:"https://juejin.cn/post/6844903779700047885",target:"_blank",rel:"noopener noreferrer"},y={href:"https://segmentfault.com/a/1190000014520786",target:"_blank",rel:"noopener noreferrer"},_=n("h2",{id:"推荐阅读",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#推荐阅读","aria-hidden":"true"},"#"),a(" 推荐阅读")],-1),x={href:"https://juejin.cn/post/7002746459456176158",target:"_blank",rel:"noopener noreferrer"},j={href:"https://juejin.cn/post/6997536906967777316",target:"_blank",rel:"noopener noreferrer"},w={href:"https://juejin.cn/post/7005334860529156109",target:"_blank",rel:"noopener noreferrer"},S={href:"https://juejin.cn/post/6987140782595506189",target:"_blank",rel:"noopener noreferrer"},C=n("h2",{id:"开源作品",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#开源作品","aria-hidden":"true"},"#"),a(" 开源作品")],-1),q=n("ul",null,[n("li",null,"政采云前端小报")],-1),z={href:"https://www.zoo.team/openweekly/",target:"_blank",rel:"noopener noreferrer"},M=n("h2",{id:"招贤纳士",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#招贤纳士","aria-hidden":"true"},"#"),a(" 招贤纳士")],-1),O=n("p",null,"政采云前端团队（ZooTeam），一个年轻富有激情和创造力的前端团队，隶属于政采云产品研发部，Base 在风景如画的杭州。团队现有 50 余个前端小伙伴，平均年龄 27 岁，近 3 成是全栈工程师，妥妥的青年风暴团。成员构成既有来自于阿里、网易的“老”兵，也有浙大、中科大、杭电等校的应届新人。团队在日常的业务对接之外，还在物料体系、工程平台、搭建平台、性能体验、云端应用、数据分析及可视化等方向进行技术探索和实战，推动并落地了一系列的内部技术产品，持续探索前端技术体系的新边界。",-1),L=n("p",null,[a("如果你想改变一直被事折腾，希望开始能折腾事；如果你想改变一直被告诫需要多些想法，却无从破局；如果你想改变你有能力去做成那个结果，却不需要你；如果你想改变你想做成的事需要一个团队去支撑，但没你带人的位置；如果你想改变既定的节奏，将会是“5 年工作时间 3 年工作经验”；如果你想改变本来悟性不错，但总是有那一层窗户纸的模糊… 如果你相信相信的力量，相信平凡人能成就非凡事，相信能遇到更好的自己。如果你希望参与到随着业务腾飞的过程，亲手推动一个有着深入的业务理解、完善的技术体系、技术创造价值、影响力外溢的前端团队的成长历程，我觉得我们该聊聊。任何时间，等着你写点什么，发给 "),n("code",null,"ZooTeam@cai-inc.com")],-1),D=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/98d3aa3d1f8646a8bcda8cfd9e335a4b~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1);function R(I,T){const s=l("ExternalLinkIcon");return o(),c("div",null,[r,u,n("p",null,[a("> 这是第 116 篇不掺水的原创，想获取更多原创好文，请搜索公众号关注我们吧~ 本文首发于政采云前端博客："),n("a",d,[a("浏览器渲染之回流重绘"),p(s)])]),k,n("p",null,[a("> 如果想知道更改任何指定 CSS 属性将触发上述三个版本中的哪一个，请查看 "),n("a",m,[a("CSS 触发器"),p(s)]),a("。如果要快速了解高性能动画，请阅读"),n("a",b,[a("更改仅合成器的属性"),p(s)]),a("部分。")]),h,n("p",null,[n("a",v,[a("浏览器的工作原理：新式网络浏览器幕后揭秘"),p(s)])]),n("p",null,[n("a",g,[a("渲染性能"),p(s)])]),n("p",null,[n("a",f,[a("你真的了解回流和重绘吗"),p(s)])]),n("p",null,[n("a",y,[a("浏览器渲染流程&Composite（渲染层合并）简单总结"),p(s)])]),_,n("p",null,[n("a",x,[a("电商最小存货 - SKU 和 算法实现"),p(s)])]),n("p",null,[n("a",j,[a("你需要知道的项目管理知识"),p(s)])]),n("p",null,[n("a",w,[a("如何从 0 到 1 搭建代码全局检索系统"),p(s)])]),n("p",null,[n("a",S,[a("如何搭建适合自己团队的构建部署平台"),p(s)])]),C,q,n("p",null,[n("strong",null,[a("开源地址 "),n("a",z,[a("www.zoo.team/openweekly/"),p(s)])]),a(" (小报官网首页有微信交流群)")]),M,O,L,D])}const B=e(i,[["render",R],["__file","浏览器渲染之回流重绘.html.vue"]]);export{B as default};
