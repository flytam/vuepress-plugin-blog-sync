import{_ as o,z as p,A as c,Y as n,C as a,U as e,a6 as t,Q as i}from"./framework-cb9358d9.js";const l={},d=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d4eb6a01e6564840817b127265b07edd~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1),r=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ea70ca0040dd450e85cf19ea67f32711~tplv-k3u1fbpfcp-watermark.image?",alt:"伟豪.png"})],-1),u={href:"https://www.zoo.team/article/images-compress",target:"_blank",rel:"noopener noreferrer"},h=n("h2",{id:"前言",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),a(" 前言")],-1),m={href:"https://blog.csdn.net/weixin_42139375/article/details/83001248",target:"_blank",rel:"noopener noreferrer"},k=t('<p>在我经历的多个电商与大屏项目的优化性能的项目后，我发现<code>图片资源</code>的处理在网站性能优化中有着举足轻重的作用。</p><p>一般电商网站请求数据</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c492d3436eb4431b97dc9c306a8d9d09~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>在首屏加载的<code>145</code>个请求中图片资源请求占到了<code>75%</code>以上，在所有请求静态资源中图片也占有着很大的比重。可见图片优化的重要性。</p><p>不过在认识图片优化前我们先了解下<code>二进制位数</code>与<code>色彩呈现</code>的关系。</p><h2 id="二进制位数与色彩" tabindex="-1"><a class="header-anchor" href="#二进制位数与色彩" aria-hidden="true">#</a> 二进制位数与色彩</h2><p>在计算机中，一般用二进制数来表示像素。在不同的图片格式中，像素与二进制位数之间对应的关系是不同的。一个像素对应的二进制位数越多，它能表示的颜色种类就丰富，成像效果也就越精致，图片所需的存储空间相应也会越大。</p><p><img src="https://www.zoo.team/images/upload/upload_6478fe4d6c096355ebf2577e98f63f7e.png" alt=""></p><p>目前市场上优化图片资源的方式有很多，如压缩图片、选择正确格式、CDN加速、懒加载等。</p><h2 id="压缩图片" tabindex="-1"><a class="header-anchor" href="#压缩图片" aria-hidden="true">#</a> 压缩图片</h2>',10),b=n("code",null,"压缩图片",-1),f={href:"https://tinypng.com/",target:"_blank",rel:"noopener noreferrer"},_=t('<p>&gt;When you upload a PNG (Portable Network Graphics) file, similar colors in your image are combined. This technique is called “quantization”. By reducing the number of colors, 24-bit PNG files can be converted to much smaller 8-bit indexed color images.</p><p><img src="https://www.zoo.team/images/upload/upload_4c146c297c3699c8418cf4f12155cf9e.png" alt=""></p><p>下面我们来看下样例：</p><p><img src="https://www.zoo.team/images/upload/upload_9096ae2d18069219acd28040babbb0eb.png" alt=""></p><p>细节展示：</p><p><img src="https://www.zoo.team/images/upload/upload_0313baf15755b2a3e77dc4d8e98cc672.png" alt=""></p><h2 id="图片格式" tabindex="-1"><a class="header-anchor" href="#图片格式" aria-hidden="true">#</a> 图片格式</h2><p><code>压缩图片</code>虽然在一定程度上可以减少我们请求的资源所需要的<code>带宽</code>，但如果是用对了<code>格式</code>在性能上往往会有质的改变。</p><h3 id="jpeg-jpg" tabindex="-1"><a class="header-anchor" href="#jpeg-jpg" aria-hidden="true">#</a> JPEG/JPG</h3><p><code>JPEG</code>是最常用的图像文件格式。</p><h4 id="优势" tabindex="-1"><a class="header-anchor" href="#优势" aria-hidden="true">#</a> 优势</h4><ul><li><p>支持极高的压缩率，可使文件传输、下载、预览速度大大加快。</p></li><li><p>利用可变的压缩比可以控制文件大小。</p></li><li><p>能够轻松地处理 1600 万种颜色，可以很好地再现全彩色的图像。</p></li></ul><h4 id="缺陷" tabindex="-1"><a class="header-anchor" href="#缺陷" aria-hidden="true">#</a> 缺陷</h4><p><code>JPG</code>的有损压缩在<code>轮播图</code>和<code>背景图</code>的展示上确实很难看出破绽，但当它处理矢量图形和 Logo 等线条感较强、颜色对比强烈的图像时，人为压缩导致的<code>图片模糊</code>会相当明显。因此不适宜用该格式来显示<code>高清晰度</code>和<code>线条感较强</code>的图像。</p><p>除此之外，<code>JPG</code>并不支持对有透明度要求的图像进行显示，如果需要显示<code>透明图片</code>还是需要另寻它路。</p><p><img src="https://www.zoo.team/images/upload/upload_3cb0d263dd59537480db7acae5fb1981.png" alt=""></p><h4 id="业务场景" tabindex="-1"><a class="header-anchor" href="#业务场景" aria-hidden="true">#</a> 业务场景</h4><p><code>JPG</code>适用于呈现色彩丰富的图片，在我们日常开发中，<code>JPG</code> 图片经常作为大的<code>背景图</code>、<code>轮播图</code>或<code> 预览图</code>出现。打开某电商网站首页，即可看到大图片的处理几乎都是使用了<code>JPG</code>。</p><p><img src="https://www.zoo.team/images/upload/upload_2bc915f053078e9627494bafe66b2f94.png" alt=""></p><h3 id="png-8-与-png-24" tabindex="-1"><a class="header-anchor" href="#png-8-与-png-24" aria-hidden="true">#</a> PNG-8 与 PNG-24</h3><p>png是一种采用无损压缩算法的位图格式。</p><h4 id="优势-1" tabindex="-1"><a class="header-anchor" href="#优势-1" aria-hidden="true">#</a> 优势</h4><ul><li>无损压缩</li><li>完全支持 alpha 透明度。</li><li>可以重复保存且不降低图像质量。</li></ul><h4 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点</h4><p>体积太大</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1adc38552a9c45909adad7dd816de66c~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><h4 id="业务场景-1" tabindex="-1"><a class="header-anchor" href="#业务场景-1" aria-hidden="true">#</a> 业务场景</h4>',27),g={href:"https://baike.baidu.com/item/PNG/174154?fr=aladdin",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"PNG",-1),w=n("code",null,"PNG",-1),j=n("code",null,"PNG-8",-1),x=t('<p>亦或者需要处理有透明度或线条明显的图片时，也会采用<code>PNG</code>。如网站主logo：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4c8e4014ecdb4af0974a4eaa4e5ba605~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><h3 id="svg" tabindex="-1"><a class="header-anchor" href="#svg" aria-hidden="true">#</a> SVG</h3><p>严格来说应该是一种开放标准的矢量图形语言。</p><h4 id="优点" tabindex="-1"><a class="header-anchor" href="#优点" aria-hidden="true">#</a> 优点</h4><ul><li>可缩放,可支持无限放大</li><li>可编程</li></ul><h4 id="缺点-1" tabindex="-1"><a class="header-anchor" href="#缺点-1" aria-hidden="true">#</a> 缺点</h4><ul><li><p>不是所有的浏览器都支持SVG，IE8和早期版本都需要一个插件。</p></li><li><p>复杂的图片会降低渲染速度(只支持小图)。</p></li></ul><p><img src="https://www.zoo.team/images/upload/upload_55ba9f0f02672eb12268de6833f31374.png" alt=""></p><h4 id="业务场景-2" tabindex="-1"><a class="header-anchor" href="#业务场景-2" aria-hidden="true">#</a> 业务场景</h4>',10),y={href:"https://www.iconfont.cn/",target:"_blank",rel:"noopener noreferrer"},z=n("code",null,"fill",-1),P=n("code",null,"font-size",-1),G=t('<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d9aef8c985464e0ca69c200d5ae64a70~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><h3 id="base64" tabindex="-1"><a class="header-anchor" href="#base64" aria-hidden="true">#</a> Base64</h3><p>一种基于64个可打印字符来表示二进制数据的方法。</p><h4 id="优点-1" tabindex="-1"><a class="header-anchor" href="#优点-1" aria-hidden="true">#</a> 优点</h4><ul><li>减少网络请求</li><li>对于动态实时生成的图片无需将图片存储在服务器占用服务器资源</li></ul><h4 id="缺点-2" tabindex="-1"><a class="header-anchor" href="#缺点-2" aria-hidden="true">#</a> 缺点</h4><ul><li>只适于小图。</li><li>若需要频繁替换的图片需要整个代码替换，可维护性低。</li></ul><h4 id="业务场景-3" tabindex="-1"><a class="header-anchor" href="#业务场景-3" aria-hidden="true">#</a> 业务场景</h4><p><code>Base64</code>和<code>雪碧图</code>一样，是作为小图标解决方案而存在的。</p><p>&gt;Base64 是一种用于传输 8Bit 字节码的编码方式，通过对图片进行 Base64 编码，我们可以直接将编码结果写入 HTML 或者写入 CSS，从而减少 HTTP 请求的次数。</p><p>在<code>Elements</code>中搜索“base64”关键字，你会发现 <code>Base64</code>也有很多使用的地方。而且它对应的图片占用内存较小。</p><p><img src="https://www.zoo.team/images/upload/upload_3a6cc32e284efc28486576276be17636.png" alt=""></p><p>既然<code>Base64</code>这么棒，我们把所有图片都用<code>Base64</code>好了嘛。</p>',13),S=n("code",null,"Base64",-1),N=n("code",null,"4/3",-1),T={href:"https://blog.csdn.net/wo541075754/article/details/81734770",target:"_blank",rel:"noopener noreferrer"},B=n("code",null,"渲染性能",-1),J=n("code",null,"资源请求性能",-1),C=t('<p>我们可以看到，大多数用Base64编码的图片都是小图。</p><p><img src="https://www.zoo.team/images/upload/upload_b2abbc302382c2189152e376138d78bb.png" alt=""></p><h3 id="webp" tabindex="-1"><a class="header-anchor" href="#webp" aria-hidden="true">#</a> WebP</h3><p>一种同时提供了有损压缩与无损压缩（可逆压缩）的图片文件格式。</p><h4 id="优点-2" tabindex="-1"><a class="header-anchor" href="#优点-2" aria-hidden="true">#</a> 优点</h4><ul><li><p>支持有损无损</p></li><li><p>占用体积小</p></li><li><p>可支持透明</p></li></ul><h4 id="缺点-3" tabindex="-1"><a class="header-anchor" href="#缺点-3" aria-hidden="true">#</a> 缺点</h4><ul><li>兼容性不好</li></ul><p><img src="https://www.zoo.team/images/upload/upload_2314b287d17fa3dd38306359c7d86a56.png" alt=""></p><p><img src="https://www.zoo.team/images/upload/upload_51358861e57972f93f30e468e55fa472.png" alt=""></p><h4 id="业务场景-4" tabindex="-1"><a class="header-anchor" href="#业务场景-4" aria-hidden="true">#</a> 业务场景</h4><p>同<code>JPEG/JPG</code>。因为目前兼容性不好，一般搭配<code>JPEG/JPG</code>一起使用。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/993bae9fa6484238a27c6ac84fe59747~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><h3 id="图片格式小结" tabindex="-1"><a class="header-anchor" href="#图片格式小结" aria-hidden="true">#</a> 图片格式小结</h3><p>给大家整理了<code>思维导图</code>:</p><p><img src="https://www.zoo.team/images/upload/upload_b45ef6097635885d9a0a34c4e948053b.png" alt=""></p><h2 id="oss搭配cdn" tabindex="-1"><a class="header-anchor" href="#oss搭配cdn" aria-hidden="true">#</a> OSS搭配CDN</h2><p>我们原始的方式是将图片等资源一起放入项目中打包上线。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7e98bcbcd5634c828534769c5f60c2c5~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>这样做的缺点在于打包出来的包大不说，用户请求资源的速度也会受到限制。比如我们的服务器在华南，华北的用户请求就会稍慢。当遇到并发量大的情况时，从部署服务器请求接口与资源这无外乎给我们的服务器提供了多余的压力。当我们临时想替换一张图片时，也需要重新打包并发布上线，非常麻烦。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c08444e9f77d4335879b9e9a610fc9d9~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>当我们将图片进行OSS放置并CDN加速后，这个问题就得到了很好的解决。不同地区的用户可以访问就近服务器，重复的请求也会产生缓存，避免OSS流量的浪费。</p>',22),E={href:"https://www.cnblogs.com/jsfh/p/14076992.html",target:"_blank",rel:"noopener noreferrer"},V=n("h2",{id:"图片的懒加载",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#图片的懒加载","aria-hidden":"true"},"#"),a(" 图片的懒加载")],-1),D={href:"https://www.jianshu.com/p/44ecb7e94093?utm_campaign=maleskine&utm_content=note&utm_medium=seo_notes&utm_source=recommendation",target:"_blank",rel:"noopener noreferrer"},H=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取图片列表，即img标签列表</span>
    <span class="token keyword">var</span> imgs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>img<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取到浏览器顶部的距离</span>
    <span class="token keyword">function</span> <span class="token function">getTop</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> e<span class="token punctuation">.</span>offsetTop<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 懒加载实现</span>
    <span class="token keyword">function</span> <span class="token function">lazyload</span><span class="token punctuation">(</span><span class="token parameter">imgs</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 可视区域高度</span>
        <span class="token keyword">var</span> h <span class="token operator">=</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">;</span>
        <span class="token comment">// 滚动区域高度</span>
        <span class="token keyword">var</span> s <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span> imgs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//图片距离顶部的距离大于可视区域和滚动区域之和时懒加载</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>h <span class="token operator">+</span> s<span class="token punctuation">)</span> <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token function">getTop</span><span class="token punctuation">(</span>imgs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 真实情况是页面开始有2秒空白，所以使用setTimeout定时2s</span>
                <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment">// 不加立即执行函数i会等于9</span>
                        <span class="token comment">// 隐形加载图片或其他资源，</span>
                        <span class="token comment">// 创建一个临时图片，这个图片在内存中不会到页面上去。实现隐形加载</span>
                        <span class="token keyword">var</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        temp<span class="token punctuation">.</span>src <span class="token operator">=</span> imgs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>data<span class="token operator">-</span>src<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//只会请求一次</span>
                        <span class="token comment">// onload判断图片加载完毕，真是图片加载完毕，再赋值给dom节点</span>
                        temp<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token comment">// 获取自定义属性data-src，用真图片替换假图片</span>
                            imgs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>src <span class="token operator">=</span> imgs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>data<span class="token operator">-</span>src<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">lazyload</span><span class="token punctuation">(</span>imgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 滚屏函数</span>
    window<span class="token punctuation">.</span><span class="token function-variable function">onscroll</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">lazyload</span><span class="token punctuation">(</span>imgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="尾声" tabindex="-1"><a class="header-anchor" href="#尾声" aria-hidden="true">#</a> 尾声</h2><p><code>性能优化</code>是我们前端开发工程师必须要掌握的一门硬技能。和学习其他新技术不同的是，当你想学习一套新的框架时，阅读文档和源码几乎可以让你在使用过程中游刃有余。但性能优化却不一样，它只能让我们去摸索去领悟去突破，它是一种经验也是一种习惯更是一种嗅觉。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,4),I={href:"https://developer.aliyun.com/article/770616?utm_content=g_1000173381",target:"_blank",rel:"noopener noreferrer"},L={href:"https://juejin.cn/book/6844733750048210957",target:"_blank",rel:"noopener noreferrer"},O={href:"https://wallhaven.cc/",target:"_blank",rel:"noopener noreferrer"},W=n("h2",{id:"推荐阅读",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#推荐阅读","aria-hidden":"true"},"#"),a(" 推荐阅读")],-1),A=n("p",null,'[如何基于 WebComponents 封装 UI 组件库](https://juejin.cn/post/7096265630466670606 "# 如何基于 WebComponents 封装 UI 组件库")',-1),M={href:"https://juejin.cn/post/7091068088975622175",target:"_blank",rel:"noopener noreferrer"},q={href:"https://juejin.cn/post/7085873582588297224",target:"_blank",rel:"noopener noreferrer"},U={href:"https://juejin.cn/post/7078078998357475358",target:"_blank",rel:"noopener noreferrer"},F=n("p",null,'[浅析 Snabbdom 中 vnode 和 diff 算法](https://juejin.cn/post/7067693810918096903 "浅析 Snabbdom 中 vnode 和 diff 算法")',-1),Z=n("h2",{id:"开源作品",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#开源作品","aria-hidden":"true"},"#"),a(" 开源作品")],-1),Q=n("ul",null,[n("li",null,"政采云前端小报")],-1),Y={href:"https://www.zoo.team/openweekly/",target:"_blank",rel:"noopener noreferrer"},K=n("ul",null,[n("li",null,"商品选择 sku 插件")],-1),R={href:"https://github.com/zcy-inc/skuPathFinder-back",target:"_blank",rel:"noopener noreferrer"},X=n("h2",{id:"招贤纳士",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#招贤纳士","aria-hidden":"true"},"#"),a(" 招贤纳士")],-1),$=n("p",null,"政采云前端团队（ZooTeam），一个年轻富有激情和创造力的前端团队，隶属于政采云产品研发部，Base 在风景如画的杭州。团队现有 60 余个前端小伙伴，平均年龄 27 岁，近 4 成是全栈工程师，妥妥的青年风暴团。成员构成既有来自于阿里、网易的“老”兵，也有浙大、中科大、杭电等校的应届新人。团队在日常的业务对接之外，还在物料体系、工程平台、搭建平台、性能体验、云端应用、数据分析及可视化等方向进行技术探索和实战，推动并落地了一系列的内部技术产品，持续探索前端技术体系的新边界。",-1),nn=n("p",null,[a("如果你想改变一直被事折腾，希望开始能折腾事；如果你想改变一直被告诫需要多些想法，却无从破局；如果你想改变你有能力去做成那个结果，却不需要你；如果你想改变你想做成的事需要一个团队去支撑，但没你带人的位置；如果你想改变既定的节奏，将会是“5 年工作时间 3 年工作经验”；如果你想改变本来悟性不错，但总是有那一层窗户纸的模糊… 如果你相信相信的力量，相信平凡人能成就非凡事，相信能遇到更好的自己。如果你希望参与到随着业务腾飞的过程，亲手推动一个有着深入的业务理解、完善的技术体系、技术创造价值、影响力外溢的前端团队的成长历程，我觉得我们该聊聊。任何时间，等着你写点什么，发给 "),n("code",null,"ZooTeam@cai-inc.com")],-1),an=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/98d3aa3d1f8646a8bcda8cfd9e335a4b~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1);function sn(en,tn){const s=i("ExternalLinkIcon");return p(),c("div",null,[d,r,n("p",null,[a("> 这是第 143 篇不掺水的原创，想获取更多原创好文，请搜索公众号关注我们吧~ 本文首发于政采云前端博客："),n("a",u,[a(" 性能优化——图片压缩、加载和格式选择"),e(s)])]),h,n("p",null,[a('相信大家都听说过"'),n("a",m,[a("258原则"),e(s)]),a('"，一个网站的性能好坏很大程度上会影响到用户的体验。')]),k,n("p",null,[b,a("相信是大家第一时间想到的方案。像我们比较熟悉的 "),n("a",f,[a("tinpng"),e(s)]),a('，他的原理是通过有"选择性"地减少图像所要存储的颜色数量，来减少图片所要存储的内存。')]),_,n("p",null,[a("理论上来说，当你追求最佳的显示效果(详情展示图、图片有放大需求、摄影作品等)，并且不在意存储大小或所需带宽时，可以使用"),n("a",g,[a("PNG-24"),e(s)]),a("。但实践当中，为了避免文件体积过大的问题，我们一般不用"),v,a("去处理较复杂的图像。当我们遇到适合 "),w,a("的场景时，也会优先选择更为小巧的 "),j,a("。")]),x,n("p",null,[a("SVG 是文本文件，我们既可以像写代码一样定义 SVG，把它写在 HTML 里、成为 DOM 的一部分。用的比较多的就是"),n("a",y,[a("iconfont"),e(s)]),a("。 我们可以通过设置模块的"),z,a("属性轻松适配图标的换肤功能，并通过"),P,a("调节其大小。")]),G,n("p",null,[S,a("编码后，图片大小会膨胀为原文件的"),N,a("（"),n("a",T,[a("Base64编码原理"),e(s)]),a("）。如果我们把大图也编码到 HTML 或 CSS 文件中，后者的体积会明显增加，即便我们减少了 HTTP 请求，也无法弥补这庞大的体积带来的性能开销。也就是说我们牺牲的"),B,a("大于"),J,a("，这样做不太值得。")]),C,n("p",null,[n("a",E,[a("《OSS和CDN的区别》"),e(s)]),a("大家也可以参考这篇文章进行细看。")]),V,n("p",null,[a("相信大家一定会遇到首屏数据过多加载缓慢的情况。在这个情况下我们就需要考虑懒加载了。当用户滚动到预览位置时，在进行图片数据的请求。期间用"),n("a",D,[a("骨架屏"),e(s)]),a("或缩略图代替。")]),H,n("p",null,[n("a",I,[a("最佳实践：使用阿里云CDN加速OSS访问"),e(s)])]),n("p",null,[n("a",L,[a("掘金小册: 前端性能优化原理与实践"),e(s)])]),n("p",null,[n("a",O,[a("壁纸网站: wellhaven"),e(s)])]),W,A,n("p",null,[n("a",M,[a("Web Worker"),e(s)])]),n("p",null,[n("a",q,[a("如何落地一个智能机器人"),e(s)])]),n("p",null,[n("a",U,[a("一名练习时长 2 年零 8 个月的前端练习生自述"),e(s)])]),F,Z,Q,n("p",null,[n("strong",null,[a("开源地址 "),n("a",Y,[a("www.zoo.team/openweekly/"),e(s)])]),a(" (小报官网首页有微信交流群)")]),K,n("p",null,[n("strong",null,[a("开源地址 "),n("a",R,[a("https://github.com/zcy-inc/skuPathFinder-back/"),e(s)])])]),X,$,nn,an])}const pn=o(l,[["render",sn],["__file","性能优化——图片压缩、加载和格式选择.html.vue"]]);export{pn as default};
