import{_ as t,z as c,A as o,Y as a,C as n,U as e,a6 as p,Q as r}from"./framework-cb9358d9.js";const i={},l=a("p",null,[a("img",{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bfefad3ee3474e3a8a461251aaddceb4~tplv-k3u1fbpfcp-watermark.image?",alt:"政采云技术团队.png"})],-1),d=a("p",null,[a("img",{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/70253e0ef87045d29397163c2220f829~tplv-k3u1fbpfcp-watermark.image?",alt:"伟豪.png"})],-1),u={href:"https://www.zoo.team/article/regexp",target:"_blank",rel:"noopener noreferrer"},k=a("h2",{id:"前言",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),n(" 前言")],-1),m=a("h3",{id:"为什么要学正则表达式",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#为什么要学正则表达式","aria-hidden":"true"},"#"),n(" 为什么要学正则表达式？")],-1),g=a("strong",null,"搜索引擎",-1),b={href:"https://blog.csdn.net/weixin_33994444/article/details/93408973",target:"_blank",rel:"noopener noreferrer"},f=p('<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b714067b4b6d46fdb57c76c98be5b87e~tplv-k3u1fbpfcp-watermark.image?" alt="RegEx.jpeg"></p><h3 id="什么是正则表达式" tabindex="-1"><a class="header-anchor" href="#什么是正则表达式" aria-hidden="true">#</a> 什么是正则表达式？</h3><p>1951年,一位名叫史蒂芬·克林（Stephen Kleene）的数学科学家，发表了一篇名叫《神经网事件的表示法》的论文。论文中引入了<code>正则表达式</code>的概念。直至七十多年后的今天，<code>正则表达式</code>仍然影响着我们互联网生活的方方面面。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b167206d89e242f9a661cc59c93ad426~tplv-k3u1fbpfcp-watermark.image?" alt="创建密码：.jpg"></p><p>比如需要填入<strong>符合特定规则</strong>的密码、手机号、邮箱等。 <img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/25e9d40b63f24cd9b212307eb61e0470~tplv-k3u1fbpfcp-watermark.image?" alt="9f78f90f4fc7eea055079baf1e0b608d.jpg"><img src="https://www.zoo.team/images/upload/upload_9fbf19e559132e6fca267dfc8d7d18cf.png" alt=""></p><p>又比如我们需要对输入框加一个中文、英文或价格等<strong>输入限制</strong>。</p><p>不过在我们学习正则表达式之前，我们需要先熟悉下它的<strong>调试工具</strong>。</p><h2 id="怎么检测我的正则对不对呢" tabindex="-1"><a class="header-anchor" href="#怎么检测我的正则对不对呢" aria-hidden="true">#</a> 怎么检测我的正则对不对呢？</h2><h3 id="编辑器内置的搜索工具" tabindex="-1"><a class="header-anchor" href="#编辑器内置的搜索工具" aria-hidden="true">#</a> 编辑器内置的搜索工具</h3>',9),h={href:"https://code.visualstudio.com/",target:"_blank",rel:"noopener noreferrer"},v=p('<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/876967e4bafc402c8bff29f5bcfa53bc~tplv-k3u1fbpfcp-watermark.image?" alt="2bd784719bc5b6978b666890e9f11b50.jpg"></p><h3 id="函数调用" tabindex="-1"><a class="header-anchor" href="#函数调用" aria-hidden="true">#</a> 函数调用</h3><p>也可以在自己熟悉的编程语言中调用函数去测试。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e0f190be786b46dfb88707b7295a4232~tplv-k3u1fbpfcp-watermark.image?" alt="eba976de552d2f27a5fa4488610a6fd4.jpg"></p><h3 id="在线测试网站" tabindex="-1"><a class="header-anchor" href="#在线测试网站" aria-hidden="true">#</a> 在线测试网站</h3>',5),x={href:"https://c.runoob.com/front-end/854/",target:"_blank",rel:"noopener noreferrer"},j=p('<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1c13d65c761147c5853c768b9f04d61b~tplv-k3u1fbpfcp-watermark.image?" alt="9bc0825470062a225ba48862618cef84.jpg"></p><p>了解了调试工具后我们开始从<strong>基础</strong>学习吧。</p><h2 id="基础" tabindex="-1"><a class="header-anchor" href="#基础" aria-hidden="true">#</a> 基础</h2><h3 id="限定符-quantifiers" tabindex="-1"><a class="header-anchor" href="#限定符-quantifiers" aria-hidden="true">#</a> 限定符(Quantifiers)</h3><h4 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a> ?</h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c1b3cd91275b4a5286cf7b8a4011362f~tplv-k3u1fbpfcp-watermark.image?" alt="782b5df53d9f928c3665e4ad921432d1.jpg"></p><p>“?”表示前面的字符可以出现<strong>1次或者0次</strong>。说简单点就是&quot;co&quot;中的&quot;o&quot;这个字母可有可无。</p><h4 id="-1" tabindex="-1"><a class="header-anchor" href="#-1" aria-hidden="true">#</a> +</h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/14d0f357912546cc84875e3ead58dfd3~tplv-k3u1fbpfcp-watermark.image?" alt="5f90add12862e68dac52415793a22110.jpg"></p><p>“+”表示前面的字符至少匹配<strong>1次或多次</strong>。比如上列中”poverty“、“poor”得到了匹配。“premier”却没有匹配。</p><h4 id="-2" tabindex="-1"><a class="header-anchor" href="#-2" aria-hidden="true">#</a> *</h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/78bd71544370478786636c99b6e41e24~tplv-k3u1fbpfcp-watermark.image?" alt="729092bb5629b191be2acc9a44d14cf7.jpg"></p><p>“*”可以匹配<strong>0个或者多个字符</strong>。可以看到出现 0 次的“pr”和 2 次的“poor”得到了匹配。我们如何匹配<strong>固定次数</strong>或<strong>一定范围</strong>的字符呢？</p><h4 id="-3" tabindex="-1"><a class="header-anchor" href="#-3" aria-hidden="true">#</a> {...}</h4><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f53c57710857488ca85a605edce12172~tplv-k3u1fbpfcp-watermark.image?" alt="39a63a55e7025e5452963a83ce2aafed.jpg"></p><p>“{...}”可以用来匹配<strong>固定数量</strong>的字符或<strong>某个范围</strong>内的字符。</p><p>如上图所示：</p><ul><li><p>“{2}”当只有一个参数时，只匹配固定数量。</p></li><li><p>“{2,3}”当有两个参数时，匹配范围内的。</p></li><li><p>“{2,}”当后面的参数为空时，匹配n个及以上。</p></li></ul><h4 id="-4" tabindex="-1"><a class="header-anchor" href="#-4" aria-hidden="true">#</a> (...)</h4><p>以上都讲的是匹配单个字符，当我们想匹配<strong>多个字符</strong>该怎么办呢？</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fca190b218074c41b87664584c161f7e~tplv-k3u1fbpfcp-watermark.image?" alt="104f053573d0205258cc98118a8b2619.jpg"></p><p>我们可以将我们需要匹配的字符用“(...)”括起来，可以看到“(...)”搭配我们上文所学的“+“成功匹配了”banana“和”anna“。</p><h3 id="或运算符-or-operator" tabindex="-1"><a class="header-anchor" href="#或运算符-or-operator" aria-hidden="true">#</a> 或运算符(OR Operator)</h3><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c76abd55b57e45afab60ff7dd3fda25d~tplv-k3u1fbpfcp-watermark.image?" alt="c5dae76af93356ac4ed278c7815e1f59.jpg"></p><p>当我们需要匹配<strong>两个或多个条件</strong>时我们就需要使用&quot;|&quot;(或运算符)。图中我们匹配了拥有“an”或“na”的单词。值得注意的是这里的“｜”最外层的&quot;()&quot;是必不可少的。</p><h3 id="字符类-character-class" tabindex="-1"><a class="header-anchor" href="#字符类-character-class" aria-hidden="true">#</a> 字符类(Character class)</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bb2fdedc07fb495c91e9db088db355cf~tplv-k3u1fbpfcp-watermark.image?" alt="1458bf56eb5d965823ace88ef27a91ec.jpg"></p><p>比如我们要匹配<strong>拥有“123”中任意字符</strong>的字符串则需要使用“[...]”,需要匹配的字符只能取自方括号中的内容。另外我们也可以使用字符类去匹配指定范围，如[a-z]、[0-9]、[\\u4e00-\\u9fa5]等。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/87b18c140cf94e26a80dfaa65ff6b7bf~tplv-k3u1fbpfcp-watermark.image?" alt="708c3df8641ef81355556e12cceae373.jpg"></p><p>另外我们也可以在前面加”^“用来匹配<strong>非此范围</strong>的字符串，如上我们就匹配了非英文的字符串。</p><p>另外正则表达式也提供了很多<code>元字符</code>可以让我们简写我们的正则表达式。</p><h3 id="元字符-meta-character" tabindex="-1"><a class="header-anchor" href="#元字符-meta-character" aria-hidden="true">#</a> 元字符(Meta character)</h3><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7b5339b063a94173acbdf72a7c5be3d7~tplv-k3u1fbpfcp-watermark.image?" alt="b7f5812a8a3593cb255f3540f0f372bf.jpg"></p><p>我们可以使用“\\d”代替我们之前的“[0-9]”,这里还有两个特殊字符“^”会匹配<strong>开始</strong>(这里要注意与我们前面讲到的<code>字符类</code>中的运用要区分)，“$“会匹配结束。</p><p>&gt;* \\d,\\w,\\s - 匹配数字、字符、空格(分别代表着：digit、word、space)。 &gt;* \\D,\\W,\\S - 匹配非数字、非字符、非空格。 &gt;* . - 除换行符以外的所有字符(句号句子的结束符)。 &gt;* ^ - 字符串开头。 &gt;* $ - 字符串结尾。</p><p>接下来我们来学习一下正则表达式的<strong>高级概念</strong>。</p><h2 id="高级概念" tabindex="-1"><a class="header-anchor" href="#高级概念" aria-hidden="true">#</a> 高级概念</h2><h3 id="懒惰匹配和贪婪匹配-lazy-and-greed" tabindex="-1"><a class="header-anchor" href="#懒惰匹配和贪婪匹配-lazy-and-greed" aria-hidden="true">#</a> 懒惰匹配和贪婪匹配(Lazy and Greed)</h3><p>当我们想要匹配文本中的HTML时我们会写下如下正则表达式。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/65ddfa578cd241bf8608aaff781c342d~tplv-k3u1fbpfcp-watermark.image?" alt="b75cdf169ee888acb769c77838b8dd80.jpg"></p><p>根据前面的知识我们知道，此正则将会匹配&lt;开头&gt;结尾中间可以有至少1个任意字符。但结果是匹配了“&lt;”和“&gt;” 标签包含的所有内容。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e3e6d077fc2b41c18c50e2c5f7c154b3~tplv-k3u1fbpfcp-watermark.image?" alt="cc5d409da9aa40792ba90e5b537ebb35.jpg"></p><p>我们可以在正则表达式中加“?”来开启<code>懒惰匹配</code>。开启懒惰匹配后，正则会<strong>尽可能少的匹配</strong>。所以当匹配的时候发现标签 “ &amp;lt;div&gt; ”已经是符合要求的，所以会匹配&amp;lt;div&gt;标签，然后继续向下匹配，发现&amp;lt;/div&gt;标签也是符合要求的，继续向下匹配，发现文字不符合要求，继续向下，发现&amp;lt;span&gt;和&amp;lt;/span&gt;标签都是符合要求的，所以最后会匹配 &amp;lt;div&gt;, &amp;lt;/div&gt;, &amp;lt;span&gt;, &amp;lt;/span&gt;四个标签。</p><h3 id="分组-group" tabindex="-1"><a class="header-anchor" href="#分组-group" aria-hidden="true">#</a> 分组(Group)</h3><p>前面我们认识了“(...)”的用法，将其结合我们后面所学的知识就是正则的<code>分组</code>。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/36f87aae91f14a2fade79b94a66e7ca8~tplv-k3u1fbpfcp-watermark.image?" alt="a7392ff6dd264803a4452a4df3e8f920.jpg"></p><p>如上图所示第一个分组中我们匹配 4 个数字，第二个分组中我们匹配 7 个数字。中间使用“-”进行连接，便很容易匹配到了文本中出现的座机电话号。</p><h3 id="非捕获分组-non-capture-group" tabindex="-1"><a class="header-anchor" href="#非捕获分组-non-capture-group" aria-hidden="true">#</a> 非捕获分组(Non-capture Group)</h3><p>非捕获分组：<code>(?:表达式)</code>，分组匹配之后，不需要的用“?: ”语法过滤子表达式内容。也就是代码匹配，但是不保存。</p><p>在使用非捕获前:</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/57a0d0e49c2d4e8f9f4b25638ecca651~tplv-k3u1fbpfcp-watermark.image?" alt="bd7414a425996817887ea8ff34768dec.jpg"></p><p>在使用非捕获后:</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c95603ad5fd04ac49c0f0f4418ed666a~tplv-k3u1fbpfcp-watermark.image?" alt="29711c018bc8d6c196613e0ed930e554.jpg"></p><p>通过<code>.exec</code>方法并没有捕获到月份。</p><h3 id="回溯-flash-back" tabindex="-1"><a class="header-anchor" href="#回溯-flash-back" aria-hidden="true">#</a> 回溯(Flash Back)</h3><p>当我们想匹配一个正确的HTML标签时，使用&quot;&lt;[\\w]+&gt;.*&lt;\\/[\\w]+&gt;&quot;。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f03bd385d1374e40bcffde5d39f2a619~tplv-k3u1fbpfcp-watermark.image?" alt="d974356d2305441e19234b3de6a402e0.jpg"></p><p>可以看到虽然可以匹配HTML开始和结束标签，但是<strong>却不能校验前后的一致性</strong>。如“&amp;lt;/span&gt;”并不是“&amp;lt;div&gt;”的结束标签。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c45f27b04bf34b2c8569910a08793ea3~tplv-k3u1fbpfcp-watermark.image?" alt="38a9b1c3218a7a0642d44772f0e63d90.jpg"></p><p>我们可以把后面的部分改成“&lt;\\/\\1&gt;”其中“\\1”就是引用第一个<code>分组</code>。这样一来我们就可以匹配正确的HTML标签了。</p><h3 id="断言-assertion" tabindex="-1"><a class="header-anchor" href="#断言-assertion" aria-hidden="true">#</a> 断言(Assertion)</h3>',61),_=a("strong",null,"断言",-1),y={href:"https://blog.csdn.net/lxcnn/article/details/4304754",target:"_blank",rel:"noopener noreferrer"},w=p(`<h4 id="正向先行断言" tabindex="-1"><a class="header-anchor" href="#正向先行断言" aria-hidden="true">#</a> 正向先行断言</h4><p>正向先行断言：<code>(?=表达式)</code>，指在某个位置往右看，所在的位置右侧必须匹配<code>表达式</code>。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c2f48fef68a94b02a31e54ed9dd7012a~tplv-k3u1fbpfcp-watermark.image?" alt="c16a1e3118f7225c9c5b109c4a1df01f.jpg"></p><p>我们可以看到“/喜欢(?=你)”正确匹配到了“你”前面有“喜欢”的文本。</p><h5 id="实现一个密码强度校验" tabindex="-1"><a class="header-anchor" href="#实现一个密码强度校验" aria-hidden="true">#</a> 实现一个密码强度校验</h5><p>&gt;至少有一个大写字母。 &gt;至少有一个小写字母。 &gt;至少有一个数字。 &gt;至少有8个字符。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f1f1b58d921a4d889f1f48210cf355b3~tplv-k3u1fbpfcp-watermark.image?" alt="3b6d35aa5cefc456ebc5ef02b412f44a.jpg"></p><h4 id="反向先行断言" tabindex="-1"><a class="header-anchor" href="#反向先行断言" aria-hidden="true">#</a> 反向先行断言</h4><p>反向先行断言：<code>(?!表达式)</code>，指在某个位置往右看，不能存在<code>表达式</code>中的内容。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f07f3125eca34d70ae9a38ec93296c19~tplv-k3u1fbpfcp-watermark.image?" alt="f324acb154bd9b76c8f3e05f8167e23e.jpg"></p><p>如上就排除了“喜欢”后面有“你”的字符串。</p><h4 id="正向后行断言" tabindex="-1"><a class="header-anchor" href="#正向后行断言" aria-hidden="true">#</a> 正向后行断言</h4><p>正向后行断言：<code>(?&amp;lt;=表达式)</code>，指在某个位置往左看，存在<code>表达式</code>中的内容。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/280a1be38d1e4b3899bbf31ce39e0001~tplv-k3u1fbpfcp-watermark.image?" alt="84cea0dfb73d0222db6baec62fbeb2be.jpg"></p><p>如上就匹配了“喜欢”前面有“我”的字符串。</p><h4 id="反向后行断言" tabindex="-1"><a class="header-anchor" href="#反向后行断言" aria-hidden="true">#</a> 反向后行断言</h4><p>反向后行断言：<code>(?&amp;lt;!表达式)</code>，指在某个位置往左看，不能存在<code>表达式</code>中的内容。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cd0d2ed15b1f4523893862c63d37dd44~tplv-k3u1fbpfcp-watermark.image?" alt="d853e7b39730aa7648879a717647ad66.jpg"></p><p>如上就排除了“喜欢”前面有“我”的字符串。</p><p>至此正则表达式的<strong>高级部分</strong>学完啦，接下来我们学习正则提供的<strong>方法</strong>。</p><h2 id="方法" tabindex="-1"><a class="header-anchor" href="#方法" aria-hidden="true">#</a> 方法</h2><p>在JavaScript中，<code>RegExp</code>对象是一个预定义了属性和方法的正则表达式对象。</p><h3 id="test" tabindex="-1"><a class="header-anchor" href="#test" aria-hidden="true">#</a> test()</h3><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/67e6e27ea7ba445d9cef33dacc93dbc7~tplv-k3u1fbpfcp-watermark.image?" alt="640.png"></p><p>该方法用于检测一个字符串是否匹配某个正则表达式，<strong>匹配</strong>返回 true，<strong>不匹配</strong>返回 false。</p><h3 id="exec" tabindex="-1"><a class="header-anchor" href="#exec" aria-hidden="true">#</a> exec()</h3><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a665ff5356584716808c7a87337a3253~tplv-k3u1fbpfcp-watermark.image?" alt="94254b2d0aa9579258f63de420322fd4.jpg"></p><p>该方法用于检测字符串中对正则表达式的匹配。</p><p>该函数返回一个<strong>数组</strong>，其中存放匹配的结果。如果未找到匹配，则返回值为 null。</p><p>除了正则自身携带的方法，配合 <strong>String 对象</strong>的方法一起使用也会有额外的效果。</p><h2 id="配合string提供的方法" tabindex="-1"><a class="header-anchor" href="#配合string提供的方法" aria-hidden="true">#</a> 配合String提供的方法</h2><h3 id="match" tabindex="-1"><a class="header-anchor" href="#match" aria-hidden="true">#</a> match</h3><p><strong>match</strong> 这个方法主要用来提取数据，它配合分组的（）一起使用，可以很方便的提取数据。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token number">2022</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">22</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(\\d{4})-(\\d{2})-(\\d{2})$</span><span class="token regex-delimiter">/</span></span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//  [&amp;#39;2022-04-22&amp;#39;, &amp;#39;2022&amp;#39;, &amp;#39;04&amp;#39;, &amp;#39;22&amp;#39;, index: 0, input: &amp;#39;2022-04-22&amp;#39;, groups: undefined]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="replace" tabindex="-1"><a class="header-anchor" href="#replace" aria-hidden="true">#</a> replace</h3><p><strong>replace</strong>这个api主要用于替换数据，多用于字符串的处理和转义。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>贾维斯：您今天共产生了<span class="token number">8</span>个<span class="token constant">BUG</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\w{3}</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>Beautiful Code<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 贾维斯：您今天共产生了8个Beautiful Code</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="什么是-1-2" tabindex="-1"><a class="header-anchor" href="#什么是-1-2" aria-hidden="true">#</a> 什么是 $1 $2</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>前端<span class="token number">1</span>组<span class="token operator">-</span>开发部<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(.{4})-(.{3})</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>$2 $1<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 开发部 前端1组</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>$1</strong>,<strong>$2</strong>上就是按顺序对应小括号里面的<strong>分组</strong> 捕获到的内容。这里我们将 2组和1组进行内容替换，就得到了替换后的内容。</p><h3 id="split" tabindex="-1"><a class="header-anchor" href="#split" aria-hidden="true">#</a> split</h3><p><strong>split</strong>主要用于来切分字符串为数组，它的第一个参数也可以为正则的形式。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> str1 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token number">2022</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">21</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> str2 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token number">2022.04</span><span class="token number">.22</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> str3 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token number">2022</span><span class="token operator">/</span><span class="token number">04</span><span class="token operator">/</span><span class="token number">23</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> regsSplit <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\.\\-\\/]</span><span class="token regex-delimiter">/</span></span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>regsSplit<span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>regsSplit<span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str3<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>regsSplit<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// [&amp;#39;2022&amp;#39;, &amp;#39;04&amp;#39;, &amp;#39;21&amp;#39;]</span>
<span class="token comment">// [&amp;#39;2022&amp;#39;, &amp;#39;04&amp;#39;, &amp;#39;22&amp;#39;]</span>
<span class="token comment">// [&amp;#39;2022&amp;#39;, &amp;#39;04&amp;#39;, &amp;#39;23&amp;#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>了解完了结合String用法，我们再来了解一下<strong>兼容性问题</strong>。</p><h2 id="正则表达式兼容性调研" tabindex="-1"><a class="header-anchor" href="#正则表达式兼容性调研" aria-hidden="true">#</a> 正则表达式兼容性调研</h2><p>在我们日常使用中，一定会遇到兼容性问题。这里主要对一些不完全兼容的方法进行调研。</p><h3 id="split-1" tabindex="-1"><a class="header-anchor" href="#split-1" aria-hidden="true">#</a> @@split</h3><p><code>@@split</code> 方法切割String对象为一个其子字符串的数组 。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> re <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">-</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> result <span class="token operator">=</span> re<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>split<span class="token punctuation">]</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// [&amp;quot;2022&amp;quot;, &amp;quot;01&amp;quot;, &amp;quot;02&amp;quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>兼容性</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ebb1364abb5d471ebefda975ba67da77~tplv-k3u1fbpfcp-watermark.image?" alt="5c998fd1bb7ed1f4f1edf47892b674bc.jpg"></p><h3 id="match-1" tabindex="-1"><a class="header-anchor" href="#match-1" aria-hidden="true">#</a> @@match</h3><p>对正则表达式匹配字符串时，<code>@@match</code> 方法用于获取匹配结果。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> re <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[0-9]+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> result <span class="token operator">=</span> re<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>match<span class="token punctuation">]</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// [&amp;quot;2022&amp;quot;, &amp;quot;01&amp;quot;, &amp;quot;02&amp;quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>兼容性</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1ac9f44299564576bfd06a28e5931b78~tplv-k3u1fbpfcp-watermark.image?" alt="fb392fd5814bd1a403776ff6cd3947fe.jpg"></p><h3 id="search" tabindex="-1"><a class="header-anchor" href="#search" aria-hidden="true">#</a> @@search</h3><p><code>@@search</code> 方法执行了一个在给定字符串中的一个搜索以取得匹配正则模式的项。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> re <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">-</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token number">2016</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> result <span class="token operator">=</span> re<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>search<span class="token punctuation">]</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>兼容性</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7f4ec4fecf114dbc88b9eb1c4baf1f6f~tplv-k3u1fbpfcp-watermark.image?" alt="01a09f895f172c2492ec4c70901e20aa.jpg"></p><h3 id="replace-1" tabindex="-1"><a class="header-anchor" href="#replace-1" aria-hidden="true">#</a> @@replace</h3><p><code>@@replace</code> 方法会在一个字符串中用给定的替换器，替换所有符合正则模式的匹配项，并返回替换后的新字符串结果。用来替换的参数可以是一个字符串或是一个针对每次匹配的回调函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> re <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">-</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span> 
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token number">2016</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> newstr <span class="token operator">=</span> re<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>replace<span class="token punctuation">]</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newstr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 2016.01.01</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>兼容性</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4ef1f3c04c554a29b6d53e0d6c93f00e~tplv-k3u1fbpfcp-watermark.image?" alt="6529acfb1c3fd4665e0bf9ddfe2ce6b6.jpg"></p><h3 id="flags" tabindex="-1"><a class="header-anchor" href="#flags" aria-hidden="true">#</a> flags</h3><p><code>flags</code> 属性返回一个字符串，由当前正则表达式对象的标志组成。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">foo</span><span class="token regex-delimiter">/</span><span class="token regex-flags">ig</span></span><span class="token punctuation">.</span>flags<span class="token punctuation">;</span>   <span class="token comment">// &amp;quot;gi&amp;quot;</span>
<span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">bar</span><span class="token regex-delimiter">/</span><span class="token regex-flags">myu</span></span><span class="token punctuation">.</span>flags<span class="token punctuation">;</span>  <span class="token comment">// &amp;quot;muy&amp;quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>兼容性</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7928bf17b7ab49e9a616641128bb8db6~tplv-k3u1fbpfcp-watermark.image?" alt="921a751282a73cda11768b842bbbd01b.jpg"></p><h3 id="dotall" tabindex="-1"><a class="header-anchor" href="#dotall" aria-hidden="true">#</a> dotAll</h3><p>正则中的点匹配就是 <code>dotAll</code> ，都是匹配任意字符，但是很多字符是无法匹配的。例如：</p><ul><li>四个字节的 <code>UTF-16</code> 的字符</li><li>行终止符 <code>\\n</code> <code>\\r</code> 换行 回车</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">foo.bar</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>foo\\nbar<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">foo.bar</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>fooabar<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>加上 <code>s</code> 可以匹配换行符</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">foo.bar</span><span class="token regex-delimiter">/</span><span class="token regex-flags">s</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>foo\\nbar<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>兼容性</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d182be57ac0d4d8d97bb02f953f57699~tplv-k3u1fbpfcp-watermark.image?" alt="cfda85f9c82bb1c904951d7744167fb6.jpg"></p><p>最后我们让来点<strong>干货</strong>吧</p><h2 id="干货" tabindex="-1"><a class="header-anchor" href="#干货" aria-hidden="true">#</a> 干货</h2><h3 id="保留两位小数的价格输入框" tabindex="-1"><a class="header-anchor" href="#保留两位小数的价格输入框" aria-hidden="true">#</a> 保留两位小数的价格输入框</h3><p>具体代码如下：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>
<span class="token comment">// 输入限制</span>
<span class="token keyword">const</span> changePiece <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span><span class="token punctuation">{</span>
      e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\D*(\\d*(?:\\.\\d{0,2})?).*$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token entity" title="&#39;">&amp;#39;</span>$1<span class="token entity" title="&#39;">&amp;#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token entity named-entity" title="&lt;">&amp;lt;</span>div<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
       <span class="token entity named-entity" title="&lt;">&amp;lt;</span>input type<span class="token operator">=</span><span class="token entity named-entity" title="&quot;">&amp;quot;</span>text<span class="token entity named-entity" title="&quot;">&amp;quot;</span> onKeyUp<span class="token operator">=</span><span class="token punctuation">{</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span> <span class="token punctuation">{</span><span class="token function">changePiece</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span> 
    <span class="token entity named-entity" title="&lt;">&amp;lt;</span><span class="token operator">/</span>div<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="常用正则表达式" tabindex="-1"><a class="header-anchor" href="#常用正则表达式" aria-hidden="true">#</a> 常用正则表达式</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 手机号码的校验</span>
<span class="token keyword">const</span> phoneReg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[1][3,4,5,6,7,8,9][0-9]{9}$</span><span class="token regex-delimiter">/</span></span>
<span class="token comment">// 身份证的校验</span>
<span class="token keyword">const</span> idCardReg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[1-9]\\d{5}(18|19|([23]\\d))\\d{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\\d{3}[0-9Xx]$</span><span class="token regex-delimiter">/</span></span>
<span class="token comment">// URL的校验</span>
<span class="token keyword">const</span> urlReg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^((https?|ftp|file):\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$</span><span class="token regex-delimiter">/</span></span>
<span class="token comment">// 邮箱的校验</span>
<span class="token keyword">const</span> emailReg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^([A-Za-z0-9_\\-\\.])+\\@([A-Za-z0-9_\\-\\.])+\\.([A-Za-z]{2,4})$</span><span class="token regex-delimiter">/</span></span>
<span class="token comment">// 日期 YYYY-MM-DD 校验</span>
<span class="token keyword">const</span> dateReg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\d{4}(\\-)\\d{1,2}\\1\\d{1,2}$</span><span class="token regex-delimiter">/</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上<strong>干货</strong>大家也可以通过上文所学的知识自己尝试实现，自己实践才会有更深刻的印象和更深度的认知。</p><h3 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h3>`,88),q={href:"https://caniuse.com/?search=RegExp",target:"_blank",rel:"noopener noreferrer"},z={href:"https://juejin.cn/post/7016871226899431431",target:"_blank",rel:"noopener noreferrer"},S={href:"https://www.bilibili.com/video/BV1da4y1p7iZ?spm_id_from=333.337.search-card.all.click",target:"_blank",rel:"noopener noreferrer"},$=a("h2",{id:"推荐阅读",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#推荐阅读","aria-hidden":"true"},"#"),n(" 推荐阅读")],-1),R={href:"https://www.zoo.team/article/http-referer",target:"_blank",rel:"noopener noreferrer"},T={href:"https://juejin.cn/post/7127440050937151525",target:"_blank",rel:"noopener noreferrer"},B={href:"https://juejin.cn/post/7124839474575441934",target:"_blank",rel:"noopener noreferrer"},L={href:"https://juejin.cn/post/7122240814108901406",target:"_blank",rel:"noopener noreferrer"},A={href:"https://juejin.cn/post/7119639489567260686",target:"_blank",rel:"noopener noreferrer"},C=a("h2",{id:"开源作品",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#开源作品","aria-hidden":"true"},"#"),n(" 开源作品")],-1),M=a("ul",null,[a("li",null,"政采云前端小报")],-1),E={href:"https://www.zoo.team/openweekly/",target:"_blank",rel:"noopener noreferrer"},U=a("ul",null,[a("li",null,"商品选择 sku 插件")],-1),V={href:"https://github.com/zcy-inc/skuPathFinder-back",target:"_blank",rel:"noopener noreferrer"},Z=a("h2",{id:"招贤纳士",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#招贤纳士","aria-hidden":"true"},"#"),n(" 招贤纳士")],-1),H=a("p",null,"政采云前端团队（ZooTeam），一个年轻富有激情和创造力的前端团队，隶属于政采云产品研发部，Base 在风景如画的杭州。团队现有 90 余个前端小伙伴，平均年龄 27 岁，近 4 成是全栈工程师，妥妥的青年风暴团。成员构成既有来自于阿里、网易的“老”兵，也有浙大、中科大、杭电等校的应届新人。团队在日常的业务对接之外，还在物料体系、工程平台、搭建平台、性能体验、云端应用、数据分析及可视化等方向进行技术探索和实战，推动并落地了一系列的内部技术产品，持续探索前端技术体系的新边界。",-1),N=a("p",null,[n("如果你想改变一直被事折腾，希望开始能折腾事；如果你想改变一直被告诫需要多些想法，却无从破局；如果你想改变你有能力去做成那个结果，却不需要你；如果你想改变你想做成的事需要一个团队去支撑，但没你带人的位置；如果你想改变既定的节奏，将会是“5 年工作时间 3 年工作经验”；如果你想改变本来悟性不错，但总是有那一层窗户纸的模糊… 如果你相信相信的力量，相信平凡人能成就非凡事，相信能遇到更好的自己。如果你希望参与到随着业务腾飞的过程，亲手推动一个有着深入的业务理解、完善的技术体系、技术创造价值、影响力外溢的前端团队的成长历程，我觉得我们该聊聊。任何时间，等着你写点什么，发给 "),a("code",null,"ZooTeam@cai-inc.com")],-1),P=a("p",null,[a("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/98d3aa3d1f8646a8bcda8cfd9e335a4b~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1);function Y(D,F){const s=r("ExternalLinkIcon");return c(),o("div",null,[l,d,a("p",null,[n("> 这是第 156 篇不掺水的原创，想获取更多原创好文，请搜索公众号关注我们吧~ 本文首发于政采云前端博客："),a("a",u,[n("厉害！这篇正则表达式竟写的如此详尽"),e(s)])]),k,m,a("p",null,[n("作为一个菜鸟程序员，遇到复杂的正则时往往会求助"),g,n("。虽然能够解决燃眉之急，但往往会有"),a("a",b,[n("边界值"),e(s)]),n("和团队正则不统一的问题。而这种问题往往会被细测测出来，造成不必要的麻烦。对于这种情况，最好的解决方式就是去吃透它，最终能将它手写出来。所谓知其然，也要知其所以然。")]),f,a("p",null,[n("我们可以使用"),a("a",h,[n("Vscode"),e(s)]),n("提供的正则的搜索方法，来使用正则匹配我们需要搜索的内容。")]),v,a("p",null,[n("亦或是使用我这边推荐的一个"),a("a",x,[n("在线测试网站"),e(s)])]),j,a("p",null,[_,n("有些地方也叫"),a("a",y,[n("环视(Lookaround)"),e(s)]),n("，它只进行子表达式的匹配，不占有字符，匹配到的内容不保存到最终的匹配结果。")]),w,a("p",null,[a("a",q,[n("《Can I Use——正则表达式》"),e(s)])]),a("p",null,[a("a",z,[n("《有了这25个正则表达式，代码效率提高80%》"),e(s)])]),a("p",null,[a("a",S,[n("《10分钟快速掌握正则表达式》"),e(s)])]),$,a("p",null,[a("a",R,[n("学习 HTTP Referer"),e(s)])]),a("p",null,[a("a",T,[n("浅谈低代码平台远程组件加载方案"),e(s)])]),a("p",null,[a("a",B,[n("前端富文本基础及实现"),e(s)])]),a("p",null,[a("a",L,[n("可视化搭建系统之数据源"),e(s)])]),a("p",null,[a("a",A,[n("表单数据形式配置化设计"),e(s)])]),C,M,a("p",null,[a("strong",null,[n("开源地址 "),a("a",E,[n("www.zoo.team/openweekly/"),e(s)])]),n(" (小报官网首页有微信交流群)")]),U,a("p",null,[a("strong",null,[n("开源地址 "),a("a",V,[n("https://github.com/zcy-inc/skuPathFinder-back/"),e(s)])])]),Z,H,N,P])}const I=t(i,[["render",Y],["__file","厉害！这篇正则表达式竟写的如此详尽.html.vue"]]);export{I as default};
