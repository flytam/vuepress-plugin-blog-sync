import{_ as e,z as o,A as c,Y as n,C as s,U as t,a6 as p,Q as l}from"./framework-cb9358d9.js";const i={},u=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e24013c5e9ce44479ee8f7bdb3e40a7b~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1),r={href:"https://zoo.team/article/flutter-and-provider",target:"_blank",rel:"noopener noreferrer"},k=n("p",null,[n("img",{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4952aa11e84b43b3952b1db4fe4fd8de~tplv-k3u1fbpfcp-watermark.image",alt:""})],-1),d=n("h2",{id:"前言",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),s(" 前言")],-1),m=n("p",null,"Provider，Google 官方推荐的一种 Flutter 页面状态管理组件，它的实质其实就是对 InheritedWidget 的包装，使它们更易于使用和重用。关于 InheritedWidget 不做过多介绍，本篇文章主要较全面地介绍 Provider 的相关用法，能在业务场景中有所运用。",-1),v={href:"https://github.com/xiaomanzijia/FlutterProvider",target:"_blank",rel:"noopener noreferrer"},b=p(`<h2 id="用法" tabindex="-1"><a class="header-anchor" href="#用法" aria-hidden="true">#</a> 用法</h2><h3 id="step1-添加依赖" tabindex="-1"><a class="header-anchor" href="#step1-添加依赖" aria-hidden="true">#</a> Step1:添加依赖</h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>dependencies<span class="token punctuation">:</span>
  flutter<span class="token punctuation">:</span>
    sdk<span class="token punctuation">:</span> flutter
  # <span class="token class-name">The</span> following adds the <span class="token class-name">Cupertino</span> <span class="token class-name">Icons</span> font to your application<span class="token punctuation">.</span>
  # <span class="token class-name">Use</span> <span class="token keyword">with</span> the <span class="token class-name">CupertinoIcons</span> <span class="token keyword">class</span> <span class="token keyword">for</span> iOS style icons<span class="token punctuation">.</span>
  provider<span class="token punctuation">:</span> <span class="token operator">^</span><span class="token number">4.0</span><span class="token number">.4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="step2-观察结构" tabindex="-1"><a class="header-anchor" href="#step2-观察结构" aria-hidden="true">#</a> Step2:观察结构</h3><p>执行<code>flutter pub get</code>后，可以在工程看到 provider 的 sdk 源码，结构如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/44711db9a2ba4573b3f094f609ac0e13~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><h3 id="step3-示例简介" tabindex="-1"><a class="header-anchor" href="#step3-示例简介" aria-hidden="true">#</a> Step3:示例简介</h3><p>本示例将讲解 Provider 基础组件的使用，包括但不限于 ChangeNotifier, NotifierProvider, Consumer, Selector, ProxyProvider, FutureProvider, StreamProvider。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4d713b7679ca481c8632787a4ddb2739~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><h3 id="step4-创建一个changenotifier" tabindex="-1"><a class="header-anchor" href="#step4-创建一个changenotifier" aria-hidden="true">#</a> Step4:创建一个ChangeNotifier</h3><p>我们先新建一个 Model1，继承 ChangeNotifier，使之成为我们的数据提供者之一。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Model1</span> <span class="token keyword">extends</span> <span class="token class-name">ChangeNotifier</span> <span class="token punctuation">{</span>
  int _count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  int <span class="token keyword">get</span> count <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> _count<span class="token punctuation">;</span>
  <span class="token keyword">set</span> <span class="token function">count</span><span class="token punctuation">(</span>int value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    _count <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token function">notifyListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>追踪 ChangeProvider 源码，我们发现它并不属于 Provider，它其实是定义在 Flutter SDK foundation 下面的 change_provider.dart 文件。ChangeNotifier 实现了 Listenable 抽象类，里面维护了一个 ObserverList。 Listenable 类源码：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Listenable</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token class-name">Listenable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">factory</span> <span class="token class-name">Listenable</span><span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">Listenable</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> listenables<span class="token punctuation">)</span> <span class="token operator">=</span> _MergingListenable<span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token function">addListener</span><span class="token punctuation">(</span><span class="token class-name">VoidCallback</span> listener<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token function">removeListener</span><span class="token punctuation">(</span><span class="token class-name">VoidCallback</span> listener<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出，主要提供了 addListener 和 removeListener 两个方法。 ChangeNotifier 类源码：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">ChangeNotifier</span> <span class="token keyword">implements</span> <span class="token class-name">Listenable</span> <span class="token punctuation">{</span>
  <span class="token class-name">ObserverList</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">VoidCallback</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> _listeners <span class="token operator">=</span> <span class="token class-name">ObserverList</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">VoidCallback</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  bool <span class="token function">_debugAssertNotDisposed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>_listeners <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token class-name">FlutterError</span><span class="token punctuation">.</span><span class="token function">fromParts</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">DiagnosticsNode</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">[</span>
          <span class="token class-name">ErrorSummary</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token class-name">A</span> $runtimeType was used after being disposed<span class="token punctuation">.</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token class-name">ErrorDescription</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token class-name">Once</span> you have called <span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">on</span> a $runtimeType<span class="token punctuation">,</span> it can no longer be used<span class="token punctuation">.</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token metadata function">@protected</span>
  bool <span class="token keyword">get</span> hasListeners <span class="token punctuation">{</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token function">_debugAssertNotDisposed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> _listeners<span class="token punctuation">.</span>isNotEmpty<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">void</span> <span class="token function">addListener</span><span class="token punctuation">(</span><span class="token class-name">VoidCallback</span> listener<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token function">_debugAssertNotDisposed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    _listeners<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">removeListener</span><span class="token punctuation">(</span><span class="token class-name">VoidCallback</span> listener<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token function">_debugAssertNotDisposed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    _listeners<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token metadata function">@mustCallSuper</span>
  <span class="token keyword">void</span> <span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token function">_debugAssertNotDisposed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    _listeners <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token metadata function">@protected</span>
  <span class="token metadata function">@visibleForTesting</span>
  <span class="token keyword">void</span> <span class="token function">notifyListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token function">_debugAssertNotDisposed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>_listeners <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">VoidCallback</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> localListeners <span class="token operator">=</span> <span class="token class-name">List</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">VoidCallback</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>_listeners<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">VoidCallback</span> listener <span class="token keyword">in</span> localListeners<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>_listeners<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token function">listener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>exception<span class="token punctuation">,</span> stack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token class-name">FlutterError</span><span class="token punctuation">.</span><span class="token function">reportError</span><span class="token punctuation">(</span><span class="token class-name">FlutterErrorDetails</span><span class="token punctuation">(</span>
            exception<span class="token punctuation">:</span> exception<span class="token punctuation">,</span>
            stack<span class="token punctuation">:</span> stack<span class="token punctuation">,</span>
            <span class="token keyword">library</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>foundation <span class="token keyword">library</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
            context<span class="token punctuation">:</span> <span class="token class-name">ErrorDescription</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token keyword">while</span> dispatching notifications <span class="token keyword">for</span> $runtimeType<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            informationCollector<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">sync*</span> <span class="token punctuation">{</span>
              <span class="token keyword">yield</span> <span class="token class-name">DiagnosticsProperty</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">ChangeNotifier</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">(</span>
                <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token class-name">The</span> $runtimeType sending notification was<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
                <span class="token keyword">this</span><span class="token punctuation">,</span>
                style<span class="token punctuation">:</span> <span class="token class-name">DiagnosticsTreeStyle</span><span class="token punctuation">.</span>errorProperty<span class="token punctuation">,</span>
              <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了实现 addListener 和 removeListener 外，还提供了 dispose 和 notifyListeners 两个方法。Model1 中，当我们更改 count 值时，就会调用 notifyListeners 方法通知UI更新。</p><h3 id="step5-创建changenotifierprovider" tabindex="-1"><a class="header-anchor" href="#step5-创建changenotifierprovider" aria-hidden="true">#</a> Step5:创建ChangeNotifierProvider</h3><p>示例简介</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ef40ad1cd11e4c328600aa633fa5202f~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><h4 id="方式一-通过changenotifierprovider" tabindex="-1"><a class="header-anchor" href="#方式一-通过changenotifierprovider" aria-hidden="true">#</a> 方式一：通过ChangeNotifierProvider</h4><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">return</span> <span class="token class-name">ChangeNotifierProvider</span><span class="token punctuation">(</span>
      create<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Model1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      child<span class="token punctuation">:</span> <span class="token class-name">MaterialApp</span><span class="token punctuation">(</span>
        theme<span class="token punctuation">:</span> <span class="token class-name">ArchSampleTheme</span><span class="token punctuation">.</span>theme<span class="token punctuation">,</span>
        home<span class="token punctuation">:</span> <span class="token class-name">SingleStatsView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里通过 ChangeNotifierProvider 的 create 把 ChangeNotifier（即 Model1）建立联系，作用域的范围在 child 指定的 MaterialApp，这里我们将 SingleStatsView 作为首页，SingleStatsView 里面使用了 Model1 作为数据源。需要注意的是，不要把所有状态的作用域都放在 MaterialApp，根据实际业务需求严格控制作用域范围，全局状态多了会严重影响应用的性能。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">SingleStatsView</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>
  <span class="token metadata function">@override</span>
  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>
      child<span class="token punctuation">:</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>
        mainAxisAlignment<span class="token punctuation">:</span> <span class="token class-name">MainAxisAlignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>
        children<span class="token punctuation">:</span> <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">Widget</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">[</span>
          <span class="token class-name">FlatButton</span><span class="token punctuation">(</span>
            color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>blue<span class="token punctuation">,</span>
            child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token class-name">Model1</span> count<span class="token operator">++</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token class-name">Provider</span><span class="token punctuation">.</span>of<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">Model1</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> listen<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token class-name">Padding</span><span class="token punctuation">(</span>
            padding<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">only</span><span class="token punctuation">(</span>bottom<span class="token punctuation">:</span> <span class="token number">8.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token class-name">Model</span> count值变化监听<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
                style<span class="token punctuation">:</span> <span class="token class-name">Theme</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>textTheme<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token class-name">Padding</span><span class="token punctuation">(</span>
            padding<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">only</span><span class="token punctuation">(</span>bottom<span class="token punctuation">:</span> <span class="token number">8.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token class-name">Model1</span> count<span class="token punctuation">:</span>$<span class="token punctuation">{</span><span class="token class-name">Provider</span><span class="token punctuation">.</span>of<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">Model1</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
                style<span class="token punctuation">:</span> <span class="token class-name">Theme</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>
                    <span class="token punctuation">.</span>textTheme
                    <span class="token punctuation">.</span>subhead
                    <span class="token punctuation">.</span><span class="token function">copyWith</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>green<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="方式二-通过changenotifierprovider-value" tabindex="-1"><a class="header-anchor" href="#方式二-通过changenotifierprovider-value" aria-hidden="true">#</a> 方式二：通过ChangeNotifierProvider.value</h4><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">return</span> <span class="token class-name">ChangeNotifierProvider</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span>
        value<span class="token punctuation">:</span> <span class="token class-name">Model1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        child<span class="token punctuation">:</span> <span class="token class-name">MaterialApp</span><span class="token punctuation">(</span>
          theme<span class="token punctuation">:</span> <span class="token class-name">ArchSampleTheme</span><span class="token punctuation">.</span>theme<span class="token punctuation">,</span>
          home<span class="token punctuation">:</span> <span class="token class-name">SingleStatsView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
     <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出，和方式一相差无几，方式一用的 create 创建的 ChangeNotifier，这里用的 value 创建。追溯 ChangeNotifierProvider 源码：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">ChangeNotifierProvider</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">ChangeNotifier</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token keyword">extends</span> <span class="token class-name">ListenableProvider</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">T</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">_dispose</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> <span class="token class-name">ChangeNotifier</span> notifier<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    notifier<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token class-name">ChangeNotifierProvider</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token class-name">Key</span> key<span class="token punctuation">,</span>
    <span class="token metadata function">@required</span> <span class="token class-name">Create</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">T</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> create<span class="token punctuation">,</span>
    bool lazy<span class="token punctuation">,</span>
    <span class="token class-name">Widget</span> child<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>
          key<span class="token punctuation">:</span> key<span class="token punctuation">,</span>
          create<span class="token punctuation">:</span> create<span class="token punctuation">,</span>
          dispose<span class="token punctuation">:</span> _dispose<span class="token punctuation">,</span>
          lazy<span class="token punctuation">:</span> lazy<span class="token punctuation">,</span>
          child<span class="token punctuation">:</span> child<span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        
  <span class="token class-name">ChangeNotifierProvider</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token class-name">Key</span> key<span class="token punctuation">,</span>
    <span class="token metadata function">@required</span> <span class="token class-name">T</span> value<span class="token punctuation">,</span>
    <span class="token class-name">Widget</span> child<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span>
          key<span class="token punctuation">:</span> key<span class="token punctuation">,</span>
          value<span class="token punctuation">:</span> value<span class="token punctuation">,</span>
          child<span class="token punctuation">:</span> child<span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="step6-在页面中监听状态变更-其他使用方式" tabindex="-1"><a class="header-anchor" href="#step6-在页面中监听状态变更-其他使用方式" aria-hidden="true">#</a> Step6:在页面中监听状态变更，其他使用方式</h3><p>示例</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/de96dd1d5d9f48b09d04f7f62bfbb9a0~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>我们先了解下 ValueListenableBuilder，它可以监听指定值的变化进行 UI 更新，用法如下：</p><h4 id="valuenotifier" tabindex="-1"><a class="header-anchor" href="#valuenotifier" aria-hidden="true">#</a> ValueNotifier</h4><p>1.新建ValueNotifier</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">final</span> <span class="token class-name">ValueNotifier</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>int<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> _counter <span class="token operator">=</span> <span class="token class-name">ValueNotifier</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>int<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在 builder 方法将之指定到 Model1 的 count ，这样当 Model1 中的 count 变化时 _counter 也能监听到。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>_counter<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token class-name">Provider</span><span class="token punctuation">.</span>of<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">Model1</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.关联ValueListenableBuilder ValueListenableBuilder 的 valueListenable 可以绑定一个 ValueNotifier，用于监听 ValueNotifier 的值变化。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">ValueListenableBuilder</span><span class="token punctuation">(</span>
            valueListenable<span class="token punctuation">:</span> _counter<span class="token punctuation">,</span>
            builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> count<span class="token punctuation">,</span> child<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>
                <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token class-name">ValueListenableBuilder</span> count<span class="token punctuation">:</span>$count<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ValueNotifier源码：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">ValueNotifier</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">T</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token keyword">extends</span> <span class="token class-name">ChangeNotifier</span> <span class="token keyword">implements</span> <span class="token class-name">ValueListenable</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">T</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
  <span class="token class-name">ValueNotifier</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token metadata function">@override</span>
  <span class="token class-name">T</span> <span class="token keyword">get</span> value <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> _value<span class="token punctuation">;</span>
  <span class="token class-name">T</span> _value<span class="token punctuation">;</span>
  <span class="token keyword">set</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token class-name">T</span> newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>_value <span class="token operator">==</span> newValue<span class="token punctuation">)</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    _value <span class="token operator">=</span> newValue<span class="token punctuation">;</span>
    <span class="token function">notifyListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token metadata function">@override</span>
  <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>$<span class="token punctuation">{</span><span class="token function">describeIdentity</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">(</span>$value<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出，ValueNotifer 也是继承 ChangeNotifier，并实现了 ValueListenable，特别之处是在 set value 的时候调用了 notifyListeners，从而实现了状态变更监听。</p><h4 id="multiprovider" tabindex="-1"><a class="header-anchor" href="#multiprovider" aria-hidden="true">#</a> MultiProvider</h4><p>示例简介</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fa931c73557f448fa3c7d3bd98e723aa~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>一旦业务场景复杂，我们的页面可能需要监听多个 ChangeNotifier 的数据源，这时候MultiProvider 就派上用场了。该示例在 SingleStatsView 上进行了扩展，这里我们新建一个 MultiStatsView，监听 Model1 和 Model2 的数据变化。</p><p>Model2</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Model2</span> <span class="token keyword">extends</span> <span class="token class-name">ChangeNotifier</span> <span class="token punctuation">{</span>
  int _count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  int <span class="token keyword">get</span> count <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> _count<span class="token punctuation">;</span>
  <span class="token keyword">set</span> <span class="token function">count</span><span class="token punctuation">(</span>int value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    _count <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token function">notifyListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>MultiStatsView</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">MultiStatsView</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>
  <span class="token metadata function">@override</span>
  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>
      child<span class="token punctuation">:</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>
        mainAxisAlignment<span class="token punctuation">:</span> <span class="token class-name">MainAxisAlignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>
        children<span class="token punctuation">:</span> <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">Widget</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">[</span>
          <span class="token class-name">FlatButton</span><span class="token punctuation">(</span>
            color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>blue<span class="token punctuation">,</span>
            child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token class-name">Model1</span> count<span class="token operator">++</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token class-name">Provider</span><span class="token punctuation">.</span>of<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">Model1</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> listen<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token class-name">FlatButton</span><span class="token punctuation">(</span>
            color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>blue<span class="token punctuation">,</span>
            child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token class-name">Model2</span> count<span class="token operator">++</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token class-name">Provider</span><span class="token punctuation">.</span>of<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">Model2</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> listen<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token class-name">Padding</span><span class="token punctuation">(</span>
            padding<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">only</span><span class="token punctuation">(</span>bottom<span class="token punctuation">:</span> <span class="token number">8.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token class-name">Model</span> count值变化监听<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
                style<span class="token punctuation">:</span> <span class="token class-name">Theme</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>textTheme<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token class-name">Padding</span><span class="token punctuation">(</span>
            padding<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">only</span><span class="token punctuation">(</span>bottom<span class="token punctuation">:</span> <span class="token number">8.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token class-name">Model1</span> count<span class="token punctuation">:</span>$<span class="token punctuation">{</span><span class="token class-name">Provider</span><span class="token punctuation">.</span>of<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">Model1</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
                style<span class="token punctuation">:</span> <span class="token class-name">Theme</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>
                    <span class="token punctuation">.</span>textTheme
                    <span class="token punctuation">.</span>subhead
                    <span class="token punctuation">.</span><span class="token function">copyWith</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>green<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token class-name">Padding</span><span class="token punctuation">(</span>
            padding<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">only</span><span class="token punctuation">(</span>bottom<span class="token punctuation">:</span> <span class="token number">24.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token class-name">Model2</span> count<span class="token punctuation">:</span>$<span class="token punctuation">{</span><span class="token class-name">Provider</span><span class="token punctuation">.</span>of<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">Model2</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
                style<span class="token punctuation">:</span> <span class="token class-name">Theme</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>
                    <span class="token punctuation">.</span>textTheme
                    <span class="token punctuation">.</span>subhead
                    <span class="token punctuation">.</span><span class="token function">copyWith</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 MultiProvider 关联 MultiStatsView，可以看出 MultiProvider 提供了 providers 数组，我们可以把 ChangeNotifierProvider 放进去。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">return</span> <span class="token class-name">MultiProvider</span><span class="token punctuation">(</span>
      providers<span class="token punctuation">:</span> <span class="token punctuation">[</span>
        <span class="token class-name">ChangeNotifierProvider</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token class-name">Model1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token class-name">ChangeNotifierProvider</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token class-name">Model2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
      child<span class="token punctuation">:</span> <span class="token class-name">MaterialApp</span><span class="token punctuation">(</span>
        theme<span class="token punctuation">:</span> <span class="token class-name">ArchSampleTheme</span><span class="token punctuation">.</span>theme<span class="token punctuation">,</span>
        localizationsDelegates<span class="token punctuation">:</span> <span class="token punctuation">[</span>
          <span class="token class-name">ArchSampleLocalizationsDelegate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token class-name">ProviderLocalizationsDelegate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
        home<span class="token punctuation">:</span> <span class="token class-name">MultiStatsView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>若针对 MultiStatsView 仅提供 Model1 关联的 ChangeNotifierProvider，你会看到如下报错：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>══╡ EXCEPTION CAUGHT BY WIDGETS LIBRARY ╞═══════════════════════════════════════════════════════════
<span class="token class-name">The</span> following <span class="token class-name">ProviderNotFoundException</span> was thrown building <span class="token class-name">MultiStatsView</span><span class="token punctuation">(</span>dirty<span class="token punctuation">,</span> dependencies<span class="token punctuation">:</span>
<span class="token punctuation">[</span>_LocalizationsScope<span class="token operator">-</span><span class="token punctuation">[</span><span class="token class-name">GlobalKey</span>#<span class="token number">48</span>c61<span class="token punctuation">]</span><span class="token punctuation">,</span> _InheritedTheme<span class="token punctuation">,</span> _DefaultInheritedProviderScope<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">Model1</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token class-name">Error</span><span class="token punctuation">:</span> <span class="token class-name">Could</span> not find the correct <span class="token class-name">Provider</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">Model2</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> above <span class="token keyword">this</span> <span class="token class-name">MultiStatsView</span> <span class="token class-name">Widget</span>
<span class="token class-name">To</span> fix<span class="token punctuation">,</span> please<span class="token punctuation">:</span>
  <span class="token operator">*</span> <span class="token class-name">Ensure</span> the <span class="token class-name">Provider</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">Model2</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token operator">is</span> an ancestor to <span class="token keyword">this</span> <span class="token class-name">MultiStatsView</span> <span class="token class-name">Widget</span>
  <span class="token operator">*</span> <span class="token class-name">Provide</span> types to <span class="token class-name">Provider</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">Model2</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
  <span class="token operator">*</span> <span class="token class-name">Provide</span> types to <span class="token class-name">Consumer</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">Model2</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
  <span class="token operator">*</span> <span class="token class-name">Provide</span> types to <span class="token class-name">Provider</span><span class="token punctuation">.</span>of<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">Model2</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token operator">*</span> <span class="token class-name">Ensure</span> the correct \`context\` <span class="token operator">is</span> being used<span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是因为 Model2 没有注册导致。</p><h4 id="proxyprovider" tabindex="-1"><a class="header-anchor" href="#proxyprovider" aria-hidden="true">#</a> ProxyProvider</h4><p>从3.0.0开始，开始提供<code>ProxyProvider</code>。<code>ProxyProvider</code>可以将其他 provider 的值聚合为一个新对象，并且将结果传递给<code>Provider</code>。新对象会在其依赖的宿主 provider 更新后被更新。</p><p>新建一个 User 类</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> name<span class="token punctuation">;</span>
  <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们把 Model1 通过<code>ProxyProvider</code>聚合成 User 对象，然后取 User 对象中的<code>name</code>进行渲染。s</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">ProxyProvider</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">Model1</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">(</span>
              update<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> value<span class="token punctuation">,</span> previous<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>change value $<span class="token punctuation">{</span>value<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
              builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> child<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>
                  <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token class-name">ProxyProvider</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token class-name">Provider</span><span class="token punctuation">.</span>of<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">User</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
                  style<span class="token punctuation">:</span> <span class="token class-name">Theme</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>textTheme<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出，通过<code>ProxyProvider</code>方式，我们直接调用<code>Provider.of&amp;lt;User&amp;gt;(context)</code>取值，关联<code>User</code>的Provider我们并没有注册，也能有效运行。</p><h4 id="futureprovider" tabindex="-1"><a class="header-anchor" href="#futureprovider" aria-hidden="true">#</a> FutureProvider</h4><p>通过名字可以看出，这个 Provider 和异步执行有关，用法类似于<code>FutureBuilder</code>。这里用<code>FutureProvider</code>模拟2秒后更新 Model1 的初始值。可以在<code>initialData</code>指定初始值，create 方法指定具体的异步任务，builder 方法中可以用<code>Provider.of</code>取出异步任务执行返回的值进行页面渲染。还可以定义<code>catchError</code>捕获异常，<code>updateShouldNotify</code>比较新旧值是否 rebuild，新的 create/update 回调函数是懒加载的，也就是说它们在对应的值第一次被读取的时候才被调用，而非 provider 首次被创建时。如果不需要这个特性，可以将<code>lazy</code>属性值置为 false。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">FutureProvider</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">Model1</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">(</span>
              create<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">delayed</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token class-name">Model1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span><span class="token punctuation">,</span>
              initialData<span class="token punctuation">:</span> <span class="token class-name">Model1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
              builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> child<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>
                  <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token class-name">FutureProvider</span> $<span class="token punctuation">{</span><span class="token class-name">Provider</span><span class="token punctuation">.</span>of<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">Model1</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
                  style<span class="token punctuation">:</span> <span class="token class-name">Theme</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>textTheme<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token punctuation">)</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="streamprovider" tabindex="-1"><a class="header-anchor" href="#streamprovider" aria-hidden="true">#</a> StreamProvider</h4><p>通过名字可以看出，<code>StreamProvider</code>也是一个异步执行有关的 Provider，用法类似于 StreamBuilder。这里用<code>StreamProvider</code>模拟每隔1秒更新 Model1 的初始值。其余参数和<code>FutureProvider</code>用法类似。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">StreamProvider</span><span class="token punctuation">(</span>create<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token keyword">return</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">periodic</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token class-name">Model1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span>count <span class="token operator">=</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
              initialData<span class="token punctuation">:</span> <span class="token class-name">Model1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
              builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> child<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>
                  <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token class-name">StreamProvider</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token class-name">Provider</span><span class="token punctuation">.</span>of<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">Model1</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
                  style<span class="token punctuation">:</span> <span class="token class-name">Theme</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>textTheme<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token punctuation">)</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="consumer" tabindex="-1"><a class="header-anchor" href="#consumer" aria-hidden="true">#</a> Consumer</h4><p>具体用法如下，builder 中的参数分别是 Context context， T value, Widget child，value 即Model1，<strong>value 的类型和 Model1 类型一致</strong>，builder 方法返回的是 Widget，也就是被 Consumer 包裹的 widget，当监听的 model 值发生改变，此 widget 会被 Rebuild。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Consumer</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">Model1</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">(</span>
        builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> model<span class="token punctuation">,</span> child<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token class-name">Model1</span> count<span class="token punctuation">:</span>$<span class="token punctuation">{</span>model<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
 <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="selector" tabindex="-1"><a class="header-anchor" href="#selector" aria-hidden="true">#</a> Selector</h4><p>可以看出，Selector 和 Consumer 很相似，唯一不同的是，Selector 可以自定义返回类型，如下 Selector，我们这里监听 Model1 中的 count 变化，所以这里返回类型定义为 Int 类型。其中 builder 方法中的参数分别是 Context context, T value, Widget child，<strong>这里的 value 的类型和 Selector 中定义的返回类型一致</strong>。builder 方法返回的是 Widget，也就是被 Selector 包裹的 widget，我们可以指定监听 ChangeNotifier 中的某个值的变化，从而可触发此 widget Rebuild。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Selector</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">Model1</span><span class="token punctuation">,</span> int<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">(</span>
  builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> count<span class="token punctuation">,</span> child<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>
    <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token class-name">Selector</span>示例演示<span class="token punctuation">:</span> $count<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span>
    style<span class="token punctuation">:</span> <span class="token class-name">Theme</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>textTheme<span class="token punctuation">.</span>title<span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">,</span>
  selector<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> model<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> model<span class="token punctuation">.</span>count<span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>源码：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Selector</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token class-name">S</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token keyword">extends</span> <span class="token class-name">Selector0</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">S</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
  <span class="token class-name">Selector</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token class-name">Key</span> key<span class="token punctuation">,</span>
    <span class="token metadata function">@required</span> <span class="token class-name">ValueWidgetBuilder</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">S</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> builder<span class="token punctuation">,</span>
    <span class="token metadata function">@required</span> <span class="token class-name">S</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span><span class="token punctuation">,</span> <span class="token class-name">A</span><span class="token punctuation">)</span> selector<span class="token punctuation">,</span>
    <span class="token class-name">ShouldRebuild</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">S</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> shouldRebuild<span class="token punctuation">,</span>
    <span class="token class-name">Widget</span> child<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">:</span> <span class="token keyword">assert</span><span class="token punctuation">(</span>selector <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>
          key<span class="token punctuation">:</span> key<span class="token punctuation">,</span>
          shouldRebuild<span class="token punctuation">:</span> shouldRebuild<span class="token punctuation">,</span>
          builder<span class="token punctuation">:</span> builder<span class="token punctuation">,</span>
          selector<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token function">selector</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token class-name">Provider</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          child<span class="token punctuation">:</span> child<span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出 Selector 继承自 Selector0，追踪 Selector0 源码，它通过 buildWithChild 创建 Widget</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> _Selector0State<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">T</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token keyword">extends</span> <span class="token class-name">SingleChildState</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">Selector0</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">T</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
  <span class="token class-name">T</span> value<span class="token punctuation">;</span>
  <span class="token class-name">Widget</span> cache<span class="token punctuation">;</span>
  <span class="token class-name">Widget</span> oldWidget<span class="token punctuation">;</span>
  <span class="token metadata function">@override</span>
  <span class="token class-name">Widget</span> <span class="token function">buildWithChild</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> <span class="token class-name">Widget</span> child<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> selected <span class="token operator">=</span> widget<span class="token punctuation">.</span><span class="token function">selector</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> shouldInvalidateCache <span class="token operator">=</span> oldWidget <span class="token operator">!=</span> widget <span class="token operator">||</span>
        <span class="token punctuation">(</span>widget<span class="token punctuation">.</span>_shouldRebuild <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> widget<span class="token punctuation">.</span>_shouldRebuild<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> selected<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span>
        <span class="token punctuation">(</span>widget<span class="token punctuation">.</span>_shouldRebuild <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> <span class="token operator">!</span><span class="token keyword">const</span> <span class="token class-name">DeepCollectionEquality</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> selected<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>shouldInvalidateCache<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      value <span class="token operator">=</span> selected<span class="token punctuation">;</span>
      oldWidget <span class="token operator">=</span> widget<span class="token punctuation">;</span>
      cache <span class="token operator">=</span> widget<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>
        context<span class="token punctuation">,</span>
        selected<span class="token punctuation">,</span>
        child<span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> cache<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的 A，S，可以看出 A 是 selector 函数的入参，S 是函数的返回值，这里将 A 通过Provider.of(context) 转换成了 Provider。对比上述 Selector 的例子，这里的A对应 Model1，S 对应 count。这里还有一个 shouldRebuild，看看函数的定义：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">typedef</span> <span class="token class-name">ShouldRebuild</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">T</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token operator">=</span> bool <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token class-name">T</span> previous<span class="token punctuation">,</span> <span class="token class-name">T</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过比较前一个值和当前值，决定是否重新 rebuild 页面，如果返回 true，则页面会被重新渲染一次，返回 false，页面不会被重新渲染。具体判断逻辑可以参考 _Selector0State 的 buildWithChild 方法。</p><p><strong>可以看出，相对于 Consumer ，Selector 缩小了数据监听的范围，并且可以根据自身的业务逻辑自定义是否刷新页面，从而避免了很多不必要的页面刷新，从而提高了性能。</strong></p><p>在 Provider SDK 代码结构的 selector.dart 文件里，可以看出还定义了 Selector2、Selector3、Selector4、Selector5、Selector6。这里以 Selector2 做示例讲解其用法：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Selector2</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token class-name">B</span><span class="token punctuation">,</span> <span class="token class-name">S</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token keyword">extends</span> <span class="token class-name">Selector0</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">S</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
  <span class="token class-name">Selector2</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token class-name">Key</span> key<span class="token punctuation">,</span>
    <span class="token metadata function">@required</span> <span class="token class-name">ValueWidgetBuilder</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">S</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> builder<span class="token punctuation">,</span>
    <span class="token metadata function">@required</span> <span class="token class-name">S</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span><span class="token punctuation">,</span> <span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token class-name">B</span><span class="token punctuation">)</span> selector<span class="token punctuation">,</span>
    <span class="token class-name">ShouldRebuild</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">S</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> shouldRebuild<span class="token punctuation">,</span>
    <span class="token class-name">Widget</span> child<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">:</span> <span class="token keyword">assert</span><span class="token punctuation">(</span>selector <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>
          key<span class="token punctuation">:</span> key<span class="token punctuation">,</span>
          shouldRebuild<span class="token punctuation">:</span> shouldRebuild<span class="token punctuation">,</span>
          builder<span class="token punctuation">:</span> builder<span class="token punctuation">,</span>
          selector<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token function">selector</span><span class="token punctuation">(</span>
            context<span class="token punctuation">,</span>
            <span class="token class-name">Provider</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">Provider</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token punctuation">)</span><span class="token punctuation">,</span>
          child<span class="token punctuation">:</span> child<span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出，Selector2 同样也是继承了 Selector0，不同的是 selector 函数有了两个入参 A 和B，S 是函数的返回值。也就是说可以通过 Selector2 监听2个 Provider，可以从这2个 Provider 中自定义 S 的值变化监听。其他 Selector 只是监听的 Provider 更多罢了。 如果大于6个 Provider 需要监听，就需要自定义 Selector 方法了。 示例中我们用 Selector2 同时监听 Model1 和 Model2 的变化，对两个 Model 中的 count 进行加和计算。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Selector2</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">Model1</span><span class="token punctuation">,</span> <span class="token class-name">Model2</span><span class="token punctuation">,</span> int<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">(</span>
              selector<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> model1<span class="token punctuation">,</span> model2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> model1<span class="token punctuation">.</span>count <span class="token operator">+</span> model2<span class="token punctuation">.</span>count<span class="token punctuation">;</span>
              <span class="token punctuation">}</span><span class="token punctuation">,</span>
              builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> totalCount<span class="token punctuation">,</span> child<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>
                    <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token class-name">Model1</span>和<span class="token class-name">Model2</span> count合计<span class="token punctuation">:</span>$totalCount<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Selector3, Selector4…，还有 Consumer2，Consumer3…，这里就不做赘述了。</p><h4 id="consumer和selector性能验证" tabindex="-1"><a class="header-anchor" href="#consumer和selector性能验证" aria-hidden="true">#</a> Consumer和Selector性能验证</h4><p>经过上面的示例，我们已经对 Consumer 和 Selector 有所了解。Consumer 可以避免 widget 多余的 rebuild，当 Consumer 中监听的 value 不发生变化，其包裹的 widget 不会 Rebuild。 Selector 在 Consumer 基础上提供了更加精确的监听，还支持自定义 rebuild，可以更加灵活地控制 widget rebuild 问题。</p><p>下面我们一起来验证下 Consumer 和 Selector rebuild 的情况。Step3 图示中，我们定义了两个按钮，一个用于累加 Model1 中的 count，一个用于累加 Model2 中的 count；同时演示了 Selector2 和 Consumer 的用法；定义了 Widget1，Widget2，带 Selector 的 Widget4，用于验证 rebuild 情况。Model1的 count 值用绿色标识，Model2 的 count 值用红色标识。</p>`,90),g={href:"https://github.com/xiaomanzijia/FlutterProvider",target:"_blank",rel:"noopener noreferrer"},h=p(`<p>Widget1,在 build 方法中打印 “Widget1 build”。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Widget1</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>
  <span class="token metadata function">@override</span>
  <span class="token class-name">State</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">StatefulWidget</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token class-name">StateWidget1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">StateWidget1</span> <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">Widget1</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
  <span class="token metadata function">@override</span>
  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token class-name">Widget1</span> build<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token class-name">Widget1</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token class-name">Theme</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>textTheme<span class="token punctuation">.</span>subhead<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Widget2, 在 build 方法中打印 &quot;Widget2 build&quot;。 Widget3, 监听了 Model2 count 变化，在 builder 方法中打印 “Widget3 build”。</p><p>Widget4，在 build 方法中打印 &quot;Widget4 build&quot;，build 方法返回一个 Selector，在 Selector 的 builder 方法中打印 “Widget4 Selector build”，Selector 监听 Model1 count 变化。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Widget4</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>
  <span class="token metadata function">@override</span>
  <span class="token class-name">State</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">StatefulWidget</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token class-name">StateWidget4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">StateWidget4</span> <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">Widget4</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
  <span class="token metadata function">@override</span>
  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token class-name">Widget4</span> build<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">Selector</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">Model1</span><span class="token punctuation">,</span> int<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">(</span>
      builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> count<span class="token punctuation">,</span> child<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token class-name">Widget4</span> <span class="token class-name">Selector</span> build<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token class-name">Widget4</span> <span class="token class-name">Model1</span> count<span class="token punctuation">:</span>$count<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token class-name">Theme</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>textTheme<span class="token punctuation">.</span>subhead<span class="token punctuation">.</span><span class="token function">copyWith</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>green<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      selector<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> model<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> model<span class="token punctuation">.</span>count<span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所有条件具备，我们运行 StatsView 页面，日志打印如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Selector2</span> build
<span class="token class-name">Model1</span> <span class="token class-name">Consumer</span> build
<span class="token class-name">Model2</span> <span class="token class-name">Consumer</span> build
<span class="token class-name">Widget1</span> build
<span class="token class-name">Widget2</span> build
<span class="token class-name">Widget3</span> build
<span class="token class-name">Widget4</span> build
<span class="token class-name">Widget4</span> <span class="token class-name">Selector</span> build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出，widget 渲染顺序是根据页面元素布局顺序从上到下开始渲染。 点击 Model1 count++ 按钮，可以看到所有绿色标识的地方，count 已更新。日志打印如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Selector2</span> build
<span class="token class-name">Model1</span> <span class="token class-name">Consumer</span> build
<span class="token class-name">Model2</span> <span class="token class-name">Consumer</span> build
<span class="token class-name">Widget1</span> build
<span class="token class-name">Widget2</span> build
<span class="token class-name">Widget3</span> build
<span class="token class-name">Widget4</span> build
<span class="token class-name">Widget4</span> <span class="token class-name">Selector</span> build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>啥！！！怎么和第一次加载页面日志一样，更新 Model1 的 count，不应该只 build 监听 Model1 相关的 widget 吗？我们改下代码，把 Widget4 作为全局变量，在 initState 的时候初始化。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">StateStatsView</span> <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">StatsView</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
  <span class="token keyword">final</span> <span class="token class-name">ValueNotifier</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>int<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> _counter <span class="token operator">=</span> <span class="token class-name">ValueNotifier</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>int<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> widget4<span class="token punctuation">;</span>
  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    widget4 <span class="token operator">=</span> <span class="token class-name">Widget4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token metadata function">@override</span>
  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    _counter<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token class-name">Provider</span><span class="token punctuation">.</span>of<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">Model1</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>
      child<span class="token punctuation">:</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>
        mainAxisAlignment<span class="token punctuation">:</span> <span class="token class-name">MainAxisAlignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>
        children<span class="token punctuation">:</span> <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">Widget</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">[</span>
          <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token comment">//此处省略部分实例源码</span>
          <span class="token class-name">Widget1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token class-name">Widget2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token class-name">Widget3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          widget4<span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行后再次点击 Model1 count++ 按钮，日志打印如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Selector2</span> build
<span class="token class-name">Model1</span> <span class="token class-name">Consumer</span> build
<span class="token class-name">Model2</span> <span class="token class-name">Consumer</span> build
<span class="token class-name">Widget1</span> build
<span class="token class-name">Widget2</span> build
<span class="token class-name">Widget3</span> build
<span class="token class-name">Widget4</span> <span class="token class-name">Selector</span> build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，“Widget4 build” 的日志不会再打印，但是 “Widget4 Selector build” 的日志仍在打印。我们再改下代码，把 Widget4 中的 selector 作为全局变量，在 initState 的时候初始化。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Widget4</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>
  <span class="token metadata function">@override</span>
  <span class="token class-name">State</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">StatefulWidget</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token class-name">StateWidget4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">StateWidget4</span> <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">Widget4</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
  <span class="token class-name">Selector</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">Model1</span><span class="token punctuation">,</span> int<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> selector<span class="token punctuation">;</span>
  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    selector <span class="token operator">=</span> <span class="token function">buildSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token metadata function">@override</span>
  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token class-name">Widget4</span> build<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> selector<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token class-name">Selector</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">Model1</span><span class="token punctuation">,</span> int<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token function">buildSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Selector</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">Model1</span><span class="token punctuation">,</span> int<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">(</span>
    builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> count<span class="token punctuation">,</span> child<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">print</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token class-name">Widget4</span> <span class="token class-name">Selector</span> build<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token class-name">Widget4</span> <span class="token class-name">Model1</span> count<span class="token punctuation">:</span>$count<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token class-name">Theme</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>textTheme<span class="token punctuation">.</span>subhead<span class="token punctuation">.</span><span class="token function">copyWith</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>green<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    selector<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> model<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> model<span class="token punctuation">.</span>count<span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行后再次点击Model1 count++按钮，日志打印如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Selector2</span> build
<span class="token class-name">Model1</span> <span class="token class-name">Consumer</span> build
<span class="token class-name">Model2</span> <span class="token class-name">Consumer</span> build
<span class="token class-name">Widget1</span> build
<span class="token class-name">Widget2</span> build
<span class="token class-name">Widget3</span> build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，“Widget4 Selector build” 的日志没有打印了，Widget4 中监听的 Model1 中的 count 也正常更新了。 通过前面3步的验证，我们可以得知<strong>当 ChangeNotifier（这里即 Model1）通知更新（notifyListener）时，在 Model1 作用域下的 Widget 都会触发 build，Selector，Consumer 实质也就是一个Widget，当我们的数据需要 Selector 或 Consumer 包裹时，建议在 initState 的时候先把 widget 创建好，可以避免不必要的 build。</strong></p><h3 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h3><h4 id="_1-listen" tabindex="-1"><a class="header-anchor" href="#_1-listen" aria-hidden="true">#</a> 1.listen</h4><p>如果我们把 “Model1 count++” 按钮点击事件代码改下</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">FlatButton</span><span class="token punctuation">(</span>
            color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>blue<span class="token punctuation">,</span>
            child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token class-name">Model1</span> count<span class="token operator">++</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token class-name">Provider</span><span class="token punctuation">.</span>of<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">Model1</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">)</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>区别在于少了 listen:false，点击按钮你会看到下面的错误日志：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Tried</span> to listen to a value exposed <span class="token keyword">with</span> provider<span class="token punctuation">,</span> from outside of the widget <span class="token class-name"><span class="token namespace">tree<span class="token punctuation">.</span></span>
This</span> <span class="token operator">is</span> likely caused by an event handler <span class="token punctuation">(</span>like a button<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>s onPressed<span class="token punctuation">)</span> that called
<span class="token class-name">Provider</span><span class="token punctuation">.</span>of without passing \`listen<span class="token punctuation">:</span> <span class="token boolean">false</span>\`<span class="token punctuation">.</span>
<span class="token class-name">To</span> fix<span class="token punctuation">,</span> write<span class="token punctuation">:</span>
<span class="token class-name">Provider</span><span class="token punctuation">.</span>of<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token class-name">Model1</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> listen<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">It</span> <span class="token operator">is</span> unsupported because may pointlessly rebuild the widget associated to the
event handler<span class="token punctuation">,</span> when the widget tree doesn<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>t care about the value<span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>官方注释页对 listen 做了说明，listen=true，意味着被监听的 ChangeNotifier 中的值发生变化，对应的 widget 就会被 rebuild，listen=false，则不会被 rebuild。在 widget 树外调用 Provider.of 方法，必须加上 listen:false。</p><h4 id="_2-扩展" tabindex="-1"><a class="header-anchor" href="#_2-扩展" aria-hidden="true">#</a> 2.扩展</h4>`,26),f={href:"https://pub.flutter-io.cn/packages/provider/changelog",target:"_blank",rel:"noopener noreferrer"},y=p('<table><thead><tr><th>before</th><th>after</th></tr></thead><tbody><tr><td>Provider.of(context, listen: false)</td><td>context.read()</td></tr><tr><td>Provider.of(context)</td><td>context.watch</td></tr></tbody></table><h3 id="其他状态管理组件" tabindex="-1"><a class="header-anchor" href="#其他状态管理组件" aria-hidden="true">#</a> 其他状态管理组件</h3>',2),x=n("thead",null,[n("tr",null,[n("th",null,"组件"),n("th",null,"介绍")])],-1),w={href:"https://pub.dev/packages/provider",target:"_blank",rel:"noopener noreferrer"},S=n("td",null,"官方推荐，基于 InheritedWidget 实现",-1),_={href:"https://pub.dev/packages/scoped_model",target:"_blank",rel:"noopener noreferrer"},P={href:"https://pub.dev/packages/provider",target:"_blank",rel:"noopener noreferrer"},M={href:"https://pub.dev/packages/flutter_bloc",target:"_blank",rel:"noopener noreferrer"},C=n("td",null,[s("基于 Stream 实现的 ，该模式需要对响应式编程（比如 RxDart，RxJava）有一定的理解。核心概念：输入事件"),n("code",null,"Sink&lt;Event&gt; input"),s("，输出事件"),n("code",null,"Stream&lt;Data&gt; output")],-1),W={href:"https://pub.flutter-io.cn/packages/flutter_redux",target:"_blank",rel:"noopener noreferrer"},T=n("td",null,[s("Web 开发中 React 生态链中 Redux 包的 Flutter 实现，在前端比较流行，一种单向数据流架构。核心概念：存储对象"),n("code",null,"Store"),s("、事件操作"),n("code",null,"Action"),s("、处理和分发事件"),n("code",null,"Reducer"),s("、组件刷新"),n("code",null,"View")],-1),N={href:"https://pub.dev/packages/flutter_mobx",target:"_blank",rel:"noopener noreferrer"},V=n("td",null,[s("本来是一个 JavaScript 的状态管理库，后迁移到 dart 版本。核心概念："),n("code",null,"Observables"),s("、"),n("code",null,"Actions"),s("、"),n("code",null,"Reactions")],-1),L=n("p",null,"这里不对其他组件做赘述，读者有兴趣可以研究一下，了解其他组件的实现原理。",-1),A=n("h3",{id:"总结",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#总结","aria-hidden":"true"},"#"),s(" 总结")],-1),B={href:"https://pub.dev/packages/provider",target:"_blank",rel:"noopener noreferrer"},F=n("h2",{id:"推荐阅读",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#推荐阅读","aria-hidden":"true"},"#"),s(" 推荐阅读")],-1),D={href:"https://juejin.cn/post/6917022255180414984",target:"_blank",rel:"noopener noreferrer"},E={href:"https://juejin.cn/post/6901210381574733832",target:"_blank",rel:"noopener noreferrer"},R=n("h2",{id:"招贤纳士",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#招贤纳士","aria-hidden":"true"},"#"),s(" 招贤纳士")],-1),I=n("p",null,"政采云前端团队（ZooTeam），一个年轻富有激情和创造力的前端团队，隶属于政采云产品研发部，Base 在风景如画的杭州。团队现有 40 余个前端小伙伴，平均年龄 27 岁，近 3 成是全栈工程师，妥妥的青年风暴团。成员构成既有来自于阿里、网易的“老”兵，也有浙大、中科大、杭电等校的应届新人。团队在日常的业务对接之外，还在物料体系、工程平台、搭建平台、性能体验、云端应用、数据分析及可视化等方向进行技术探索和实战，推动并落地了一系列的内部技术产品，持续探索前端技术体系的新边界。",-1),j=n("p",null,[s("如果你想改变一直被事折腾，希望开始能折腾事；如果你想改变一直被告诫需要多些想法，却无从破局；如果你想改变你有能力去做成那个结果，却不需要你；如果你想改变你想做成的事需要一个团队去支撑，但没你带人的位置；如果你想改变既定的节奏，将会是“5 年工作时间 3 年工作经验”；如果你想改变本来悟性不错，但总是有那一层窗户纸的模糊… 如果你相信相信的力量，相信平凡人能成就非凡事，相信能遇到更好的自己。如果你希望参与到随着业务腾飞的过程，亲手推动一个有着深入的业务理解、完善的技术体系、技术创造价值、影响力外溢的前端团队的成长历程，我觉得我们该聊聊。任何时间，等着你写点什么，发给 "),n("code",null,"ZooTeam@cai-inc.com")],-1),z=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8d61907dd8864796953695279a9e5f4a~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1);function $(q,U){const a=l("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("> 这是第 86 篇不掺水的原创，想获取更多原创好文，请搜索公众号关注我们吧~ 本文首发于政采云前端博客："),n("a",r,[s("【Flutter 技能篇】你不得不会的状态管理 Provider"),t(a)])]),k,d,m,n("p",null,[s("本篇文章示例源码："),n("a",v,[s("https://github.com/xiaomanzijia/FlutterProvider"),t(a)])]),b,n("p",null,[s("本篇文章示例源码："),n("a",g,[s("https://github.com/xiaomanzijia/FlutterProvider"),t(a)])]),h,n("p",null,[s("Provider 从 4.1.0 版本开始支持了扩展方法，当前示例基于 4.0.5+1 讲解，这里暂不做赘述，具体可看"),n("a",f,[s("Changelog"),t(a)]),s("。")]),y,n("table",null,[x,n("tbody",null,[n("tr",null,[n("td",null,[n("a",w,[s("Provider"),t(a)])]),S]),n("tr",null,[n("td",null,[n("a",_,[s("ScopedModel"),t(a)])]),n("td",null,[s("基于 InheritedWidget 实现，和 "),n("a",P,[s("Provider"),t(a)]),s(" 原理和写法都很类似")])]),n("tr",null,[n("td",null,[n("a",M,[s("BLoC"),t(a)])]),C]),n("tr",null,[n("td",null,[n("a",W,[s("Redux"),t(a)])]),T]),n("tr",null,[n("td",null,[n("a",N,[s("Mobx"),t(a)])]),V])])]),L,A,n("p",null,[s("本篇文章主要介绍了官方推荐使用的 "),n("a",B,[s("Provider"),t(a)]),s(" 组件，结合源码和平时业务开发过程中遇到的问题，介绍了几种常用的使用方式，希望大家能熟练使用，在业务场景中能灵活运用。")]),F,n("p",null,[n("a",D,[s("结合React源码，五分钟带你掌握优先队列"),t(a)])]),n("p",null,[n("a",E,[s("编写高质量可维护的代码：组件的抽象与粒度"),t(a)])]),R,I,j,z])}const O=e(i,[["render",$],["__file","【Flutter 技能篇】你不得不会的状态管理 Provider.html.vue"]]);export{O as default};
