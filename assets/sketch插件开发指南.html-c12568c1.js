import{_ as p,z as o,A as c,Y as n,C as s,U as t,a6 as e,Q as i}from"./framework-cb9358d9.js";const l={},u=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d4eb6a01e6564840817b127265b07edd~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1),r=n("p",null,[n("img",{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/08bbe3a394af405db4168f208d93a7cd~tplv-k3u1fbpfcp-watermark.image?",alt:"沫沫.png"})],-1),d={href:"https://zoo.team/article/sketch",target:"_blank",rel:"noopener noreferrer"},k=e('<h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h2><p>​ 先抛个问题，众所周知，Sketch 是 UED 设计工具，大多数 Sketch 插件都是用于提升设计人员工作效率。那么，作为前端研发的我们为什么要学习 Sketch 插件开发呢？</p><p>​ 纵观整个前端研发流程，PRD =&gt; Design =&gt; Code =&gt; Release。目前我们的研发提效方式主要集中在 Code =&gt; Release 环节，通过 Low Code 低代码开发平台（组件化 + 配置化 + 搭建能力）来提升交付效率。当搭建能力趋于成熟的情况下，前端研发提效的下一个突破口在哪儿？是的，就是 Design to Code，通过解析 Sketch 设计稿来完成 UI 层代码的生成，让前端研发同学更专注于业务逻辑代码。这也是我学习 Sketch 插件开发的初衷。当然今天分享不是 D2C 相关，所以主要篇幅还是集中在 “如何帮助大家快速掌握 Sketch 插件开发”。</p><h2 id="前期知识储备" tabindex="-1"><a class="header-anchor" href="#前期知识储备" aria-hidden="true">#</a> 前期知识储备</h2><ul><li><p>开发语言：JavaScript + CocoaScript（为 JS 访问内部 Sketch API 和 macOS 框架提供了桥梁）</p></li><li><p>其他技术补充：Sketch 插件支持 WebView，可使用 React、Vue 等框架开发</p></li><li><p>工程化工具：前端打包工具 <code>webpack</code>、脚手架工具 <code>skpm</code></p></li></ul><p>如果你是一枚前端研发工程师，那么这一切对你而言就不陌生了。</p><h2 id="快速上手" tabindex="-1"><a class="header-anchor" href="#快速上手" aria-hidden="true">#</a> 快速上手</h2><h3 id="使用-skpm-快速创建-sketch-插件" tabindex="-1"><a class="header-anchor" href="#使用-skpm-快速创建-sketch-插件" aria-hidden="true">#</a> 使用 skpm 快速创建 Sketch 插件</h3>',8),m={href:"https://github.com/skpm/skpm/",target:"_blank",rel:"noopener noreferrer"},v=e(`<h4 id="_1-安装-skpm" tabindex="-1"><a class="header-anchor" href="#_1-安装-skpm" aria-hidden="true">#</a> 1. 安装 skpm</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> skpm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-使用脚手架模板创建插件" tabindex="-1"><a class="header-anchor" href="#_2-使用脚手架模板创建插件" aria-hidden="true">#</a> 2. 使用脚手架模板创建插件</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>skpm create <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>project-name<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token parameter variable">--template</span><span class="token operator">=</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>skpm-template<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,4),b={href:"https://github.com/skpm/skpm/tree/master/template",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"skpm/skpm",-1),g={href:"https://github.com/skpm/with-actions/tree/master/template",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"skpm/with-actions",-1),y={href:"https://github.com/skpm/with-prettier",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"skpm/with-prettier",-1),_={href:"https://github.com/skpm/with-webview",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"skpm/with-webview",-1),x=e(`<h4 id="_3-安装依赖" tabindex="-1"><a class="header-anchor" href="#_3-安装依赖" aria-hidden="true">#</a> 3. 安装依赖</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>说明：这一步不仅会安装三方依赖包，并且会自动创建 Symbolic Link，将开发目录下构建的插件实时同步到 Sketch 插件安装目录下，便于开发调试。</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/991b421b7f5e42e4b196add12eb1596f~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><h4 id="_4-本地开发热更新" tabindex="-1"><a class="header-anchor" href="#_4-本地开发热更新" aria-hidden="true">#</a> 4. 本地开发热更新</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> run <span class="token function">watch</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>说明：<code>watch</code> 命令会监听插件 src 目录的文件，一旦文件变更，会触发重新编译构建。再通过上面提到的 Symbolic Link，将重新编译构建的插件同步到 Sketch 插件的安装目录下，即可实时查看到插件修改的效果。</li></ul><h4 id="_5-打包构建" tabindex="-1"><a class="header-anchor" href="#_5-打包构建" aria-hidden="true">#</a> 5. 打包构建</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> run build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="详解" tabindex="-1"><a class="header-anchor" href="#详解" aria-hidden="true">#</a> 详解</h2><p>至此，你应该已经得到了一个完整的 Sketch 插件工程，那我们一起来看下它都包含了哪些内容。</p><h3 id="工程目录结构" tabindex="-1"><a class="header-anchor" href="#工程目录结构" aria-hidden="true">#</a> 工程目录结构</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>├── assets // 静态资源
│   └── icon.png // 插件显示的Icon图标
├── sketch-plugin-demo.sketchplugin   // skpm构建后生成的插件安装包
│   └── Contents
│       ├── Resources
│       │   └── _webpack_resources
│       │   └── resources_webview.js
│       │   └── resources_webview.js.map
│       └── Sketch
│           ├── manifest.json
│           ├── __my-command.js
│           └── __my-command.js.map
├── package.json
├── webpack.skpm.config.js // webpack配置文件
├── resources // Webview相关资源文件
│  ├── style.css
│  ├── webview.html
│  └── webview.js
└── src
    ├── manifest.json // 插件的清单文件
    └── my-command.js // 命令对应的执行脚本js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="manifest-json" tabindex="-1"><a class="header-anchor" href="#manifest-json" aria-hidden="true">#</a> manifest.json</h3><p><code>manifest.json</code> 清单文件是 Sketch 插件最核心的一个文件。主要包括插件名称、描述、作者信息、调用菜单项 <code>menu</code>、定义的命令 <code>commands</code> 、事件监听 <code>Actions</code> 等等。Sketch 插件支持定义一个或多个菜单项 <code>menu</code>，菜单项关联相应的命令 <code>command</code>，命令功能由对应的 JS 脚本来实现。</p><h4 id="_1-基础配置" tabindex="-1"><a class="header-anchor" href="#_1-基础配置" aria-hidden="true">#</a> 1. 基础配置</h4><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// 基础配置示例</span>
<span class="token punctuation">{</span>
  &amp;quot;compatibleVersion&amp;quot;<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token comment">// 兼容版本号</span>
  &amp;quot;bundleVersion&amp;quot;<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  &amp;quot;commands&amp;quot;<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token comment">// 定义命令</span>
    <span class="token punctuation">{</span>
      &amp;quot;name&amp;quot;<span class="token operator">:</span> &amp;quot;生成随机色&amp;quot;<span class="token punctuation">,</span>
      &amp;quot;identifier&amp;quot;<span class="token operator">:</span> &amp;quot;sketch-plugin-demo.generate-random-color&amp;quot;<span class="token punctuation">,</span>
      &amp;quot;shortcut&amp;quot;<span class="token operator">:</span> &amp;quot;ctrl shift r&amp;quot;<span class="token punctuation">,</span>
      &amp;quot;script&amp;quot;<span class="token operator">:</span> &amp;quot;./generateColor.js&amp;quot;<span class="token punctuation">,</span>
      &amp;quot;handlers&amp;quot;<span class="token operator">:</span> <span class="token punctuation">{</span>
        &amp;quot;run&amp;quot;<span class="token operator">:</span> &amp;quot;onRun&amp;quot;<span class="token punctuation">,</span>
        &amp;quot;actions&amp;quot;<span class="token operator">:</span> <span class="token punctuation">{</span>
          &amp;quot;OpenDocument&amp;quot;<span class="token operator">:</span> &amp;quot;onOpenDocument&amp;quot;
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  &amp;quot;menu&amp;quot;<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 定义菜单项</span>
    &amp;quot;title&amp;quot;<span class="token operator">:</span> &amp;quot;sketch-plugin-demo&amp;quot;<span class="token punctuation">,</span> 
    &amp;quot;items&amp;quot;<span class="token operator">:</span> <span class="token punctuation">[</span>
      &amp;quot;my-plugin-with-webview.my-command-identifier&amp;quot; <span class="token comment">// 对应上面命令的identifier</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>详细释义如下：</p><ul><li><code>commands</code><ul><li>name：命令对应菜单项的显示名称</li><li>identifier：命令的唯一标识，建议命名规则 <code>\${PluginName}.xxx-xxx-xxx</code></li><li>shortcut：调用命令的快捷键</li><li>script：实现命令功能的函数所在的脚本</li><li>handlers：定义处理程序，包含触发命令时调用的函数方法名（默认为 onRun），以及定义 <code>Action</code> 事件监听</li></ul></li><li><code>menu</code><ul><li>title：插件在菜单栏显示的名称</li><li>items：定义菜单的集合，对应命令的 identifier</li></ul></li></ul><h4 id="_2-菜单项支持多级配置" tabindex="-1"><a class="header-anchor" href="#_2-菜单项支持多级配置" aria-hidden="true">#</a> 2. 菜单项支持多级配置</h4><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  &amp;quot;commands&amp;quot;<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      &amp;quot;name&amp;quot;<span class="token operator">:</span> &amp;quot;第三级菜单项&amp;quot;<span class="token punctuation">,</span>
      &amp;quot;identifier&amp;quot;<span class="token operator">:</span> &amp;quot;my-plugin-with-webview.my-command-identifier&amp;quot;<span class="token punctuation">,</span>
      &amp;quot;script&amp;quot;<span class="token operator">:</span> &amp;quot;./my-command.js&amp;quot;<span class="token punctuation">,</span>
      &amp;quot;handlers&amp;quot;<span class="token operator">:</span> <span class="token punctuation">{</span>
        &amp;quot;run&amp;quot;<span class="token operator">:</span> &amp;quot;onRun&amp;quot;<span class="token punctuation">,</span>
        &amp;quot;actions&amp;quot;<span class="token operator">:</span> <span class="token punctuation">{</span>
          &amp;quot;Shutdown&amp;quot;<span class="token operator">:</span> &amp;quot;onShutdown&amp;quot;
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  &amp;quot;menu&amp;quot;<span class="token operator">:</span> <span class="token punctuation">{</span>
    &amp;quot;title&amp;quot;<span class="token operator">:</span> &amp;quot;my-plugin-with-webview&amp;quot;<span class="token punctuation">,</span>
    &amp;quot;items&amp;quot;<span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        &amp;quot;title&amp;quot;<span class="token operator">:</span> &amp;quot;第一级菜单项&amp;quot;<span class="token punctuation">,</span>
        &amp;quot;items&amp;quot;<span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token punctuation">{</span>
            &amp;quot;title&amp;quot;<span class="token operator">:</span> &amp;quot;第二级菜单项&amp;quot;<span class="token punctuation">,</span>
            &amp;quot;items&amp;quot;<span class="token operator">:</span> <span class="token punctuation">[</span>
              &amp;quot;my-plugin-with-webview.my-command-identifier&amp;quot;
            <span class="token punctuation">]</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">]</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2ca9192969df4fe3aba0e01d179ac359~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><h2 id="开发辅助工具-devtools" tabindex="-1"><a class="header-anchor" href="#开发辅助工具-devtools" aria-hidden="true">#</a> <a href="">开发辅助工具：DevTools</a></h2><ul><li>为提升开发效率，可安装 Sketch 插件 DevTools，便于查看 Sketch 文档结构、Network、Action 执行情况等等，并且支持 Console。</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/01b9b2f174324032a5e4127bc57000f1~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><h2 id="api-reference" tabindex="-1"><a class="header-anchor" href="#api-reference" aria-hidden="true">#</a> API Reference</h2>`,26),j={id:"javascript-api",tabindex:"-1"},S=n("a",{class:"header-anchor",href:"#javascript-api","aria-hidden":"true"},"#",-1),A={href:"https://developer.sketch.com/plugins/javascript-api",target:"_blank",rel:"noopener noreferrer"},I=e(`<p>虽然 Sketch 应用是使用 Objective-C 开发的，但官方团队为 Sketch 插件提供了一套 JavaScript API，支持访问和修改 Sketch 文档、获取用户自定义设置、提供数据源等等。主要包含以下五个模块：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 访问和修改Sketch文档</span>
<span class="token keyword">import</span> SketchDom from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>sketch<span class="token operator">/</span>dom<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token comment">// 处理异步操作。在插件开发中，无法使用ES6的async，需sketch提供async</span>
<span class="token keyword">import</span> Async from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>sketch<span class="token operator">/</span>async<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token comment">// 提供图像或文本数据，直接与Sketch用户界面集成，使内容在整个设计过程中随时可用</span>
<span class="token keyword">import</span> DataSupplier from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>sketch<span class="token operator">/</span>data<span class="token operator">-</span>supplier<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token comment">// 常用的UI操作，例如：展示message/alert提示信息、获取用户输入等等</span>
<span class="token keyword">import</span> <span class="token constant">UI</span> from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>sketch<span class="token operator">/</span>ui<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token comment">// 获取/保存用户的自定义数据</span>
<span class="token keyword">import</span> Settings from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>sketch<span class="token operator">/</span>settings<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token comment">// 包含以上5个模块的所有内容</span>
<span class="token keyword">import</span> Sketch from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>sketch<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>注意：sketch package 涵盖了所有内容，体积比较大，不建议直接引用。大家可根据实际场景按需引入以上 5 个独立的模块。</li></ul><h4 id="js-api-使用示例" tabindex="-1"><a class="header-anchor" href="#js-api-使用示例" aria-hidden="true">#</a> JS API 使用示例</h4>`,4),C={href:"https://github.com/Angela-Chen/sketch-plugin-demo",target:"_blank",rel:"noopener noreferrer"},V=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> SketchDom from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>sketch<span class="token operator">/</span>dom<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token constant">UI</span> from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>sketch<span class="token operator">/</span>ui<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> strArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 递归获取每个层级图层中的文本内容，并存储到strArray数组中</span>
<span class="token keyword">const</span> getTextValue <span class="token operator">=</span> <span class="token punctuation">(</span>layers<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>layers<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    layers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>layer <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> <span class="token literal-property property">layers</span><span class="token operator">:</span> subLayers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token operator">=</span> layer<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>Text<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        strArray<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>layer<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>subLayers<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">getTextValue</span><span class="token punctuation">(</span>subLayers<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 用message提示信息的方式展示获取到的文本内容</span>
<span class="token keyword">const</span> print <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
  <span class="token constant">UI</span><span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>已选择的文本内容：<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span> <span class="token operator">+</span> strArray<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> doc <span class="token operator">=</span> SketchDom<span class="token punctuation">.</span><span class="token function">getSelectedDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取已选中的文档</span>
  <span class="token keyword">const</span> layers <span class="token operator">=</span> doc<span class="token punctuation">.</span>selectedLayers<span class="token punctuation">.</span>layers<span class="token punctuation">;</span> <span class="token comment">// 获取已选中的图层</span>
  <span class="token function">getTextValue</span><span class="token punctuation">(</span>layers<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">print</span><span class="token punctuation">(</span>strArray<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),W={id:"actions",tabindex:"-1"},U=n("a",{class:"header-anchor",href:"#actions","aria-hidden":"true"},"#",-1),L={href:"https://developer.sketch.com/reference/action/",target:"_blank",rel:"noopener noreferrer"},D=e(`<p>在 Sketch 3.8 中，引入了 Action API，实现了插件对用户行为事件的监听。目前已支持 300+ 的 Action，以下列举了日常我们用到最多的几个 Action：</p><table><thead><tr><th>Action</th><th>触发条件</th><th>应用场景</th></tr></thead><tbody><tr><td>StartUp</td><td>插件安装/启动时</td><td>文档预处理、读取用户配置、拉初始化数据等</td></tr><tr><td>ShutDown</td><td>插件被禁用/卸载时</td><td>清理插件的缓存数据，功能不可用提示信息等</td></tr><tr><td>SelectionChanged</td><td>用户选择的Layers发生改变时</td><td>重新获取/处理Layers的相关数据信息</td></tr><tr><td>Open/CloseDocument</td><td>打开/关闭文档时</td><td>提示引导信息</td></tr></tbody></table><h4 id="action-api-使用示例" tabindex="-1"><a class="header-anchor" href="#action-api-使用示例" aria-hidden="true">#</a> Action API 使用示例</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 在 manifest.json 文件中注册 Action</span>
<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>commands<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>name<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">:</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>Actions<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span>
      <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>identifier<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">:</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>sketch<span class="token operator">-</span>plugin<span class="token operator">-</span>demo<span class="token punctuation">.</span>actions<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span>
      <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>script<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">:</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token operator">/</span>actions<span class="token punctuation">.</span>js<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span>
      <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>handlers<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>actions<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>StartUp<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">:</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>onStartUp<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span>
          <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>Shutdown<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">:</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>onShutdown<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">]</span>

<span class="token comment">// 2. 在命令对应的js文件中，定义Action的回调函数	</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> onStartUp <span class="token operator">=</span> context <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
  <span class="token constant">UI</span><span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>Sketch<span class="token operator">-</span>plugin<span class="token operator">-</span>demo 插件已启动<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> onShutdown <span class="token operator">=</span> context <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
  <span class="token constant">UI</span><span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>Sketch<span class="token operator">-</span>plugin<span class="token operator">-</span>demo 插件已被禁用<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="context" tabindex="-1"><a class="header-anchor" href="#context" aria-hidden="true">#</a> Context</h3><p>仔细的同学会发现，在上述 <code>Action</code> 使用示例中，回调函数默认接收了一个 <code>Context</code> 的对象，也就是当前操作的上下文，在实际开发中非常有用。我们将 <code>Context</code> 打印到控制台，可以发现它包含以下字段：</p><ul><li>action：当前执行的 Action 以及所处的阶段，分为2个阶段 begin 和 finish</li><li>scriptPath：当前执行脚本的绝对路径</li><li>command：当前执行的命令</li><li>document：当前操作的 Sketch 文档</li><li>selection：当前选中的所有图层</li></ul><h2 id="webview" tabindex="-1"><a class="header-anchor" href="#webview" aria-hidden="true">#</a> WebView</h2><p>Sketch 插件开发，除了使用 JS API 访问和修改文档外，还有一块很重要的能力，就是支持 WebView 开发。我们可以使用 skpm 快速创建一个包含 WebView 的插件。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>skpm create my-plugin-with-webview <span class="token parameter variable">--template</span><span class="token operator">=</span>skpm/with-webview
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>关于目录结构，前面也有提到过，WebView 相关文件都是存放在 resources 目录下统一管理。但这边有个小坑，通过 Webpack 编译构建后的 JS 文件会自动加上 <code>resources_</code> 前缀。例如：webview.js 编译后会变成 resources_webview.js。所以，在 HTML 中引用 JS 时，也特别要注意这个点。</p><p>接下去，我们详细来看一下刚才创建的插件工程代码。</p><h4 id="新建-webview" tabindex="-1"><a class="header-anchor" href="#新建-webview" aria-hidden="true">#</a> 新建 WebView</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> createWebView <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
  <span class="token comment">// options配置信息</span>
  <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">identifier</span><span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>my<span class="token operator">-</span>plugin<span class="token operator">-</span><span class="token keyword">with</span><span class="token operator">-</span>webview<span class="token punctuation">.</span>webview<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>This is a WebView<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">600</span><span class="token punctuation">,</span>
    <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span> 
    <span class="token literal-property property">resizable</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token comment">// 新建WebView窗口</span>
  <span class="token keyword">const</span> browserWindow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrowserWindow</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 页面载入完成后才显示弹窗，避免窗口白屏</span>
  browserWindow<span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>ready<span class="token operator">-</span>to<span class="token operator">-</span>show<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
    browserWindow<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> webContents <span class="token operator">=</span> browserWindow<span class="token punctuation">.</span>webContents<span class="token punctuation">;</span>
  <span class="token comment">// 页面载入完成后提示信息</span>
  webContents<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>did<span class="token operator">-</span>finish<span class="token operator">-</span>load<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
    <span class="token constant">UI</span><span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token constant">UI</span> loaded<span class="token operator">!</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 装载HTML页面</span>
  browserWindow<span class="token punctuation">.</span><span class="token function">loadURL</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>resources<span class="token operator">/</span>webview<span class="token punctuation">.</span>html<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="webview和插件之间的通信" tabindex="-1"><a class="header-anchor" href="#webview和插件之间的通信" aria-hidden="true">#</a> WebView和插件之间的通信</h4><ul><li>插件发送消息到 WebView</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// On the plugin</span>
webContents
	<span class="token punctuation">.</span><span class="token function">executeJavaScript</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">setRandomNumber(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>error<span class="token punctuation">)</span>

<span class="token comment">// On the WebView</span>
window<span class="token punctuation">.</span>setRandomNumber <span class="token operator">=</span> <span class="token punctuation">(</span>randomNumber<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>answer<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>Random number from the plugin<span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span> <span class="token operator">+</span> randomNumber
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>WebView 发送消息给插件</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// On the webview</span>
window<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>nativeLog<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>Called from the webview<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// On the plugin</span>
<span class="token keyword">import</span> <span class="token constant">UI</span> from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>sketch<span class="token operator">/</span>ui<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
webContents<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>nativeLog<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> s <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
  <span class="token constant">UI</span><span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="webview-调试" tabindex="-1"><a class="header-anchor" href="#webview-调试" aria-hidden="true">#</a> WebView 调试</h4><ul><li>可通过以下配置开启调试功能。开启调试功能后，可右键唤起工作台。</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>defaults <span class="token function">write</span> com.bohemiancoding.sketch3 WebKitDeveloperExtras <span class="token parameter variable">-bool</span> YES
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0f248aca4035476092f25ce5bdcf3cf6~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><h2 id="动手实践" tabindex="-1"><a class="header-anchor" href="#动手实践" aria-hidden="true">#</a> 动手实践</h2>`,24),R={href:"https://github.com/Angela-Chen/sketch-plugin-demo",target:"_blank",rel:"noopener noreferrer"},P=e(`<h4 id="场景-1" tabindex="-1"><a class="header-anchor" href="#场景-1" aria-hidden="true">#</a> 场景 1</h4><p>矩形色块和文本内容成组，要求随机生成 RGB 色值并更新矩形颜色和对应文本内容。效果如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/437af3569a6847f28d95285b16bcf9f5~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><ul><li>测试文件可直接使用示例工程中的 ./test-file/test.sketch，其图层元素结构如下：</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3ac520210f5f4e9db877b20eaa5d7364~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><ul><li>通过 DevTools 插件快速查看 sketch 文件的元素结构，直接对元素属性进行操作即可。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> SketchDom from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>sketch<span class="token operator">/</span>dom<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token constant">UI</span> from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>sketch<span class="token operator">/</span>ui<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> Mock from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>mockjs<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> Random <span class="token operator">=</span> Mock<span class="token punctuation">.</span>Random<span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> doc <span class="token operator">=</span> SketchDom<span class="token punctuation">.</span><span class="token function">getSelectedDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取已选中文档</span>
  <span class="token keyword">const</span> layers <span class="token operator">=</span> doc<span class="token punctuation">.</span>selectedLayers<span class="token punctuation">.</span>layers<span class="token punctuation">;</span> <span class="token comment">// 获取已选择图层</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>layers<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    layers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>layer <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> <span class="token literal-property property">layers</span><span class="token operator">:</span> subLayers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token operator">=</span> layer<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>Group<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        subLayers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>subLayer <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> randomColor <span class="token operator">=</span> Random<span class="token punctuation">.</span><span class="token function">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 随机生成RGB色值</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>subLayer<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>ShapePath<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            subLayer<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fills<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>color <span class="token operator">=</span> randomColor<span class="token punctuation">;</span> <span class="token comment">// 更新矩形颜色</span>
          <span class="token punctuation">}</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>subLayer<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>Text<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            subLayer<span class="token punctuation">.</span>text <span class="token operator">=</span> randomColor<span class="token punctuation">;</span> <span class="token comment">// 更新文本内容为RGB色值</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token constant">UI</span><span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>当前没有元素被选中，请选择<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="场景-2" tabindex="-1"><a class="header-anchor" href="#场景-2" aria-hidden="true">#</a> 场景 2</h4><p>基于 Umi + Antd 实现一个嵌在 WebView 里的登录页。效果如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1ab19256a3964c7ca5b23e06e0a27605~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><ul><li><p>首先，我们需要在 Sketch 插件工程中集成 Umi + Antd</p><ul><li>在插件工程的根目录下，新建 webview 文件夹</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">mkdir</span> webview <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> <span class="token builtin class-name">cd</span> webview
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>基于 Umi 模板新建工程，这边我选择的脚手架类型是 app，引入框架包括 antd 和 dva</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> create umi
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>在 .umirc.js 文件中，添加以下配置</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>outputPath:‘../src/dist‘, // 打包构建输出的目录
exportStatic: {
  dynamicRoot: true // 静态自由部署
},
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在 webview/src/pages 目录下，新建 document.ejs 文件，Umi 约定默认以这个文件作为模板</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token entity named-entity" title="&lt;">&amp;lt;</span>!doctype html<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
<span class="token entity named-entity" title="&lt;">&amp;lt;</span>html<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
  <span class="token entity named-entity" title="&lt;">&amp;lt;</span>head<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
    <span class="token entity named-entity" title="&lt;">&amp;lt;</span>meta charset=<span class="token entity named-entity" title="&quot;">&amp;quot;</span>utf-8<span class="token entity named-entity" title="&quot;">&amp;quot;</span> /<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
    <span class="token entity named-entity" title="&lt;">&amp;lt;</span>title<span class="token entity named-entity" title="&gt;">&amp;gt;</span>Your App<span class="token entity named-entity" title="&lt;">&amp;lt;</span>/title<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
  <span class="token entity named-entity" title="&lt;">&amp;lt;</span>/head<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
  <span class="token entity named-entity" title="&lt;">&amp;lt;</span>body<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
    <span class="token entity named-entity" title="&lt;">&amp;lt;</span>div id=<span class="token entity named-entity" title="&quot;">&amp;quot;</span>root<span class="token entity named-entity" title="&quot;">&amp;quot;</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span><span class="token entity named-entity" title="&lt;">&amp;lt;</span>/div<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
  <span class="token entity named-entity" title="&lt;">&amp;lt;</span>/body<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
<span class="token entity named-entity" title="&lt;">&amp;lt;</span>/html<span class="token entity named-entity" title="&gt;">&amp;gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>为便于开发调试，可本地启动 web 服务，然后 webview 装载此服务的页面，本地 web 代码更新会实时编译同步到 webview 中</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> webPage <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">http://localhost:8000#</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
browserWindow<span class="token punctuation">.</span><span class="token function">loadURL</span><span class="token punctuation">(</span>webPage<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>这样一来，我们就可以愉快的使用 Umi 和 Ant Design 了</p></li></ul><div class="language-react line-numbers-mode" data-ext="react"><pre class="language-react"><code>import styles from &amp;#39;./index.css&amp;#39;;
import { Input, Button } from &amp;#39;antd&amp;#39;;
import { EyeInvisibleOutlined, EyeTwoTone } from &amp;#39;@ant-design/icons&amp;#39;;

export default function () {
  return (
    &amp;lt;div className={styles.normal}&amp;gt;
      &amp;lt;div&amp;gt;
        &amp;lt;Input
          className={styles.antdInput}
          placeholder=&amp;quot;请输入用户名&amp;quot;
        /&amp;gt;
        &amp;lt;Input.Password
          className={styles.antdInput}
          placeholder=&amp;quot;请输入密码&amp;quot;
          iconRender={visible =&amp;gt; (visible ? &amp;lt;EyeTwoTone /&amp;gt; : &amp;lt;EyeInvisibleOutlined /&amp;gt;)}
        /&amp;gt;
        &amp;lt;Button className={styles.antdBtn} type=&amp;quot;primary&amp;quot;&amp;gt;登录&amp;lt;/Button&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>以上是关于 Sketch 插件开发的主要内容，它为我们提供了向前端上游探索的能力，大家可以结合自己公司的情况，研发一些 Sketch 插件帮助 UED 和前端提效。例如，UI 设计规范、Sketch Symbol 组件库以及与下游前端组件库关联映射、Sketch to Code 等等。重要的不是会什么技术，而是想做成什么事情。如何让业务交付更快，让业务有更低的试错成本，这是我们需要一直思考的问题。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,15),T={href:"https://developer.sketch.com/",target:"_blank",rel:"noopener noreferrer"},E={href:"https://www.jianshu.com/p/4ac13efb6154?ivk_sa=1024320u",target:"_blank",rel:"noopener noreferrer"},z=n("h2",{id:"推荐阅读",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#推荐阅读","aria-hidden":"true"},"#"),s(" 推荐阅读")],-1),N=n("p",null,'[在 Vue 中为什么不推荐用 index 做 key](https://juejin.cn/post/7026119446162997261 "在 Vue 中为什么不推荐用 index 做 key")',-1),B=n("p",null,'[浅析Web录屏技术方案与实现](https://juejin.cn/post/7028723258019020836 "浅析Web录屏技术方案与实现")',-1),J=n("h2",{id:"开源作品",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#开源作品","aria-hidden":"true"},"#"),s(" 开源作品")],-1),O=n("ul",null,[n("li",null,"政采云前端小报")],-1),M={href:"https://www.zoo.team/openweekly/",target:"_blank",rel:"noopener noreferrer"},G=n("ul",null,[n("li",null,"商品选择 sku 插件")],-1),H={href:"https://github.com/zcy-inc/skuPathFinder-back",target:"_blank",rel:"noopener noreferrer"},$=n("h2",{id:"招贤纳士",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#招贤纳士","aria-hidden":"true"},"#"),s(" 招贤纳士")],-1),Y=n("p",null,"政采云前端团队（ZooTeam），一个年轻富有激情和创造力的前端团队，隶属于政采云产品研发部，Base 在风景如画的杭州。团队现有 60 余个前端小伙伴，平均年龄 27 岁，近 4 成是全栈工程师，妥妥的青年风暴团。成员构成既有来自于阿里、网易的“老”兵，也有浙大、中科大、杭电等校的应届新人。团队在日常的业务对接之外，还在物料体系、工程平台、搭建平台、性能体验、云端应用、数据分析及可视化等方向进行技术探索和实战，推动并落地了一系列的内部技术产品，持续探索前端技术体系的新边界。",-1),F=n("p",null,[s("如果你想改变一直被事折腾，希望开始能折腾事；如果你想改变一直被告诫需要多些想法，却无从破局；如果你想改变你有能力去做成那个结果，却不需要你；如果你想改变你想做成的事需要一个团队去支撑，但没你带人的位置；如果你想改变既定的节奏，将会是“5 年工作时间 3 年工作经验”；如果你想改变本来悟性不错，但总是有那一层窗户纸的模糊… 如果你相信相信的力量，相信平凡人能成就非凡事，相信能遇到更好的自己。如果你希望参与到随着业务腾飞的过程，亲手推动一个有着深入的业务理解、完善的技术体系、技术创造价值、影响力外溢的前端团队的成长历程，我觉得我们该聊聊。任何时间，等着你写点什么，发给 "),n("code",null,"ZooTeam@cai-inc.com")],-1),Z=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/98d3aa3d1f8646a8bcda8cfd9e335a4b~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1);function K(Q,X){const a=i("ExternalLinkIcon");return o(),c("div",null,[u,r,n("p",null,[s("> 这是第 123 篇不掺水的原创，想获取更多原创好文，请搜索公众号关注我们吧~ 本文首发于政采云前端博客："),n("a",d,[s("sketch插件开发指南"),t(a)])]),k,n("p",null,[s("脚手架工具 "),n("a",m,[s("skpm"),t(a)]),s(" 提供了插件创建、打包、发布等功能，以及丰富的脚手架模板。分分钟可以出创建一个 Sketch 插件工程。")]),v,n("ul",null,[n("li",null,[s("常用的脚手架模板 "),n("ul",null,[n("li",null,[n("a",b,[h,t(a)]),s(" 默认的基础模板")]),n("li",null,[n("a",g,[f,t(a)]),s(" 包含 Action 的模板")]),n("li",null,[n("a",y,[w,t(a)]),s(" 包含 Eslint 校验的模板")]),n("li",null,[n("a",_,[q,t(a)]),s(" 包含 WebView 的模板")])])])]),x,n("h3",j,[S,s(),n("a",A,[s("JavaScript API"),t(a)])]),I,n("p",null,[s("接下去，我们使用 JS API 实现一个小功能 “获取所选图层中的文本内容”。"),n("a",C,[s("完整代码见Github"),t(a)]),s("。")]),V,n("h3",W,[U,s(),n("a",L,[s("Actions"),t(a)])]),D,n("p",null,[s("为了避免眼睛会了，手没会的情况。下面来 2 个示例给大家练练手。"),n("a",R,[s("示例代码见GitHub"),t(a)]),s("。")]),P,n("ul",null,[n("li",null,[n("a",T,[s("Sketch Plugin 开发官方文档"),t(a)])]),n("li",null,[n("a",E,[s("Sketch WebView 开发"),t(a)])])]),z,N,B,J,O,n("p",null,[n("strong",null,[s("开源地址 "),n("a",M,[s("www.zoo.team/openweekly/"),t(a)])]),s(" (小报官网首页有微信交流群)")]),G,n("p",null,[n("strong",null,[s("开源地址 "),n("a",H,[s("https://github.com/zcy-inc/skuPathFinder-back/"),t(a)])])]),$,Y,F,Z])}const sn=p(l,[["render",K],["__file","sketch插件开发指南.html.vue"]]);export{sn as default};
