import{_ as e,z as o,A as c,Y as n,C as s,U as p,a6 as t,Q as l}from"./framework-cb9358d9.js";const i={},u=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d4eb6a01e6564840817b127265b07edd~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1),r=n("p",null,[n("img",{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/911e3b5370fc4f06b44719cdead4a0d6~tplv-k3u1fbpfcp-watermark.image",alt:"梓安.png"})],-1),k={href:"https://zoo.team/article/checkcode",target:"_blank",rel:"noopener noreferrer"},d=t('<h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h2><p>此前，前端团队的项目有几百个左右，想要查找某个接口 API 或者某个 NPM 包以及一些关键词在哪些项目中使用到，需要每个开发同学在自己维护的项目里全局搜索一遍或者写个脚本跑一遍，然后统计上去，实际上，这是一个比较耗费人力和时间的事情。于是，代码全局检索系统——千寻，应运而生。</p><h3 id="千寻是什么" tabindex="-1"><a class="header-anchor" href="#千寻是什么" aria-hidden="true">#</a> 千寻是什么？</h3><p>千寻是代码全局检索系统，可输入某个接口路径或者 NPM 包名等一些关键词搜索出所在项目列表。</p><p>效果图如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0ed84a466a684be38681b86e15fe67cc~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><h3 id="千寻有哪些功能" tabindex="-1"><a class="header-anchor" href="#千寻有哪些功能" aria-hidden="true">#</a> 千寻有哪些功能？</h3><p>主要有<strong>代码检索</strong>和<strong>项目列表</strong>两大功能。其中，代码检索主要是通过输入关键词，展现搜索到的项目文件信息及相关信息。项目列表包括初始化到 Elasticsearch 服务的项目列表信息和同步项目代码至 Elasticsearch 两大功能。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/41e701ae99f04322bec0dfa016a4d6e2~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>刚刚有提到 Elasticsearch，相信有不少小伙伴对它有些陌生。那么 Elasticsearch 到底是个啥呢？</p><p>Elasticsearch，简称 <strong>ES</strong>，是一个分布式可拓展的实时搜索和分析引擎，它的底层是开源库 Apache Lucene，也就是说 Elastic 是 Lucene 的二次封装。如果你想访问 Elasticsearch，可以直接使用 HTTP 的 RestFul API 方式，增删改查。说到增删改查，我们很容易想到关系型数据库。</p><p>这里，有一份<strong>关系型数据库</strong>和 <strong>Elasticsearch</strong> 简单的术语对照表：</p><table><thead><tr><th>关系型数据库</th><th>数据库</th><th>表</th><th>行</th><th>列</th></tr></thead><tbody><tr><td>Elasticsearch</td><td>索引(Index)</td><td>类型(Type)</td><td>文档(Document)</td><td>字段(Fields)</td></tr></tbody></table>',13),m={href:"https://www.kancloud.cn/yiyanan/elasticsearch_7_6/1651637",target:"_blank",rel:"noopener noreferrer"},v=t(`<h3 id="千寻的设计" tabindex="-1"><a class="header-anchor" href="#千寻的设计" aria-hidden="true">#</a> 千寻的设计？</h3><h4 id="设计架构" tabindex="-1"><a class="header-anchor" href="#设计架构" aria-hidden="true">#</a> 设计架构</h4><p>客户端框架用的是 Vue 3.0，也是“尝尝鲜”，用起来还是蛮“香”的，UI 组件库则是 Element Plus，至于服务端部分主要是 Node.js 和 Koa 2.0，其它的下面会细讲。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/be2d8ab050e34d92ac4163e05e0d99dc~tplv-k3u1fbpfcp-zoom-1.image" alt="qianxun.png"></p><h4 id="设计流程" tabindex="-1"><a class="header-anchor" href="#设计流程" aria-hidden="true">#</a> 设计流程</h4><p>大概流程就是通过主服务可执行脚手架命令从 GitLab 服务拉取当前项目文件数据，然后将项目文件数据转换成 JSON 文件数据并同步至 ES，同时部分文件、项目信息等数据会持久化存储。最终，主服务可调用 ES 服务的搜索接口来实现项目文件数据搜索的功能。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c9aee74e332a4828bc774ffa8fb079de~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><h4 id="核心技术" tabindex="-1"><a class="header-anchor" href="#核心技术" aria-hidden="true">#</a> 核心技术</h4><h5 id="_1、node-server-服务" tabindex="-1"><a class="header-anchor" href="#_1、node-server-服务" aria-hidden="true">#</a> 1、Node-server 服务</h5><p>主服务，类似承担中间层的角色，通过它可连接和访问 ES 服务、MySql 服务、GitLab 服务，以及通过调用 NodeJS 的 spawn 开启子进程去执行 Node-fscrawler 脚手架相关命令。</p><p>主服务主要有两大功能点：</p><p>1、调用 Elasticsearch 搜索 API，实现搜索功能。</p><p>核心代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> queryExact <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>index<span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">type</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">fuzzy</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">offset</span><span class="token operator">:</span>number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">size</span><span class="token operator">:</span>number <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">operator</span><span class="token operator">:</span>string <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>and<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> body <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">size</span><span class="token operator">:</span> size<span class="token punctuation">,</span>
    <span class="token literal-property property">from</span><span class="token operator">:</span> offset<span class="token punctuation">,</span> <span class="token comment">// 分页</span>
    <span class="token literal-property property">query</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">multi_match</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">query</span><span class="token operator">:</span> fuzzy<span class="token punctuation">,</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>phrase<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token comment">// type 指定为 phrase</span>
        <span class="token literal-property property">slop</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token comment">// slop  指定每个相邻词之间允许相隔多远。此处设置为0，以实现完全匹配。</span>
        <span class="token literal-property property">max_expansions</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
        operator<span class="token punctuation">,</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">highlight</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 搜索结果高亮</span>
      <span class="token literal-property property">fields</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>content<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">pre_tags</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>font color<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>red<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token literal-property property">post_tags</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>font<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">{</span> index<span class="token punctuation">,</span> type<span class="token punctuation">,</span> body <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2、消息中心设计" tabindex="-1"><a class="header-anchor" href="#_2、消息中心设计" aria-hidden="true">#</a> 2、消息中心设计</h5><p>一些异步任务和操作，比如：文件异步下载、开启子进程等功能，可以放到<strong>消息中心</strong>这个模块，主要是为了降低耦合度，解耦控制器层。</p><p>借助 inversify 和 EventEmitter。</p><ul><li><p>inversify</p><p>&gt; InversityJS 是一个 IoC 框架。IoC ( Inversion of Control ) 包括依赖注入 ( Dependency Injection ) 和依赖查询 ( Dependency Lookup )。相比于类继承的方式，控制反转解耦了父类和子类的联系。</p></li><li><p>EventEmitter</p><p>&gt; Node.js 的内置核心模块，本质上就是观察者模式的实现。这里只用了 emit、on 这两个 API，通过 emit 注册一个事件名并传入参数，然后 on 监听这个事件名并执行回掉函数。</p></li></ul><p>初始化容器</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Container <span class="token punctuation">}</span> from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>inversify<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> messageContainer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token punctuation">{</span> messageContainer <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>初始化消息中心所有插件，并绑定到容器</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code> <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token function">initPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 引入插件文件</span>
    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>files<span class="token punctuation">.</span><span class="token function">loadFile</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token operator">/</span>plugins<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取插件列表</span>
    <span class="token keyword">const</span> plugins <span class="token operator">=</span> messageContainer<span class="token punctuation">.</span>getAll<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>PluginClass<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token constant">PLUGIN_CLASS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> plugin <span class="token keyword">of</span> plugins<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 执行插件初始化方法</span>
      <span class="token keyword">let</span> retValue <span class="token operator">=</span> <span class="token keyword">await</span> plugin<span class="token punctuation">.</span><span class="token function">initPlugin</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>messageContainer<span class="token punctuation">.</span><span class="token function">isBoundNamed</span><span class="token punctuation">(</span><span class="token constant">PLUGIN_INSTANCE</span><span class="token punctuation">,</span> plugin<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        messageContainer
          <span class="token punctuation">.</span><span class="token function">rebind</span><span class="token punctuation">(</span><span class="token constant">PLUGIN_INSTANCE</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">toConstantValue</span><span class="token punctuation">(</span>retValue<span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">whenTargetNamed</span><span class="token punctuation">(</span>plugin<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">messageContainer</span>
          <span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token constant">PLUGIN_INSTANCE</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">toConstantValue</span><span class="token punctuation">(</span>retValue<span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">whenTargetNamed</span><span class="token punctuation">(</span>plugin<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>  
  <span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实现 ExecNodeFscrawler 插件，监听 syncES 事件，通过 spawn 开启子进程，执行 Node-fscrawler 脚手架命令</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> injectable <span class="token punctuation">}</span> from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>inversify<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> plugin <span class="token punctuation">}</span> from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>decorators<span class="token operator">/</span>plugin<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> PluginClass <span class="token punctuation">}</span> from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>types<span class="token operator">/</span>index<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> Message from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>index<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> execCmd <span class="token punctuation">}</span> from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>utils<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token builtin">Promise</span> <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>bluebird<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">plugin</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token decorator"><span class="token at operator">@</span><span class="token function">injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">ExecNodeFscrawler</span> <span class="token keyword">implements</span> <span class="token class-name">PluginClass</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token function">initPlugin</span> <span class="token punctuation">(</span>message<span class="token operator">:</span> Message<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    message<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>syncES<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>projectName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// 执行脚手架命令，项目同步至 ES</span>
        <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">execCmd</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">fscrawler syncES </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>projectName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
        message<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>end<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
        message<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>error<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    
   <span class="token keyword">return</span> message<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span>  ExecNodeFscrawler<span class="token punctuation">;</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>控制器层，依赖注入 ExecNodeFscrawler 插件，从而实现通过 Restful API 形式执行 Node-fscrawler 脚手架项目文件同步至 ES 操作</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> messageContainer <span class="token punctuation">}</span> from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>message<span class="token operator">/</span>inversify<span class="token punctuation">.</span>config<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">PLUGIN_INSTANCE</span> <span class="token punctuation">}</span> from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>message<span class="token operator">/</span>constants<span class="token operator">/</span>index<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> message <span class="token punctuation">}</span> from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>message<span class="token operator">/</span>types<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> EventEmitter <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>events<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>EventEmitter<span class="token punctuation">;</span>

<span class="token keyword">let</span> ExecNodeFscrawler<span class="token operator">:</span> <span class="token keyword">typeof</span> EventEmitter<span class="token punctuation">;</span>
<span class="token keyword">const</span> projectName <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>zcy<span class="token operator">-</span>test<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>

 ExecNodeFscrawler <span class="token operator">=</span> messageContainer<span class="token punctuation">.</span>getNamed<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>message<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token constant">PLUGIN_INSTANCE</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>ExecNodeFscrawler<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 ExecNodeFscrawler<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>syncES<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> projectName<span class="token punctuation">)</span><span class="token punctuation">;</span>
ExecNodeFscrawler<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>end<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token punctuation">(</span>output<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
ExecNodeFscrawler<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>error<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token punctuation">(</span>output<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3、node-fscrawler-脚手架" tabindex="-1"><a class="header-anchor" href="#_3、node-fscrawler-脚手架" aria-hidden="true">#</a> 3、Node-fscrawler 脚手架</h5><p>通过执行相关命令可将下载的项目文件数据转换成一份 JSON 文件，然后再调用 ES 服务的批量导入的 API，将项目文件数据导入到 ES。</p><p>脚手架主要功能有：</p><ul><li>初始化配置信息</li></ul><p>执行 <code>fscrawler init</code></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f640e173f8a84644bc60d065bfcb3cfb~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>执行完会生成 .node-fscrawler 目录，初始化并生成 settings.json 和 _settings.yaml 这两个 ES 服务的配置文件。其中 _settings.json 文件主要是 ES 服务的分词相关的配置， _settings.yaml 是初始化连接 ES 服务的配置。settings.yaml 配置如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token punctuation">---</span>
<span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token important">&amp;quot;test&amp;quot;</span>
<span class="token key atrule">fs</span><span class="token punctuation">:</span>
  <span class="token key atrule">url</span><span class="token punctuation">:</span> <span class="token important">&amp;quot;/tmp/es&amp;quot;</span>
<span class="token key atrule">elasticsearch</span><span class="token punctuation">:</span>
  <span class="token key atrule">nodes</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">url</span><span class="token punctuation">:</span> <span class="token important">&amp;quot;http://10.8.25.131:9200/&amp;quot;</span>
  <span class="token key atrule">bulk_size</span><span class="token punctuation">:</span> <span class="token number">100</span>
  <span class="token key atrule">flush_interval</span><span class="token punctuation">:</span> <span class="token important">&amp;quot;5s&amp;quot;</span>
  <span class="token key atrule">byte_size</span><span class="token punctuation">:</span> <span class="token important">&amp;quot;10mb&amp;quot;</span>
  <span class="token key atrule">ssl_verification</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>项目文件同步至 ES</li></ul><p>执行 <code>fscrawler syncES &amp;lt;projectName&amp;gt;</code></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/266161b262b4432ab3476cd504d99888~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>其中，同步分为<strong>单项同步</strong>和<strong>一键同步</strong>，<strong>一键同步</strong>其实就是遍历项目列表拿到项目名称，然后执行 <code>fscrawler syncES &amp;lt;projectName&amp;gt;</code>。</p><p>核心代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">crawProjectsBluk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> filePath <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">HOME</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">DATA_POOL</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">formatDate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>fsExtra<span class="token punctuation">.</span><span class="token function">pathExistsSync</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">const</span> api <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">fdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withFullPaths</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">normalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>path<span class="token operator">:</span> string<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">{</span>
      <span class="token comment">// 过滤 png、jpg、node_modules、.DS_Store 文件</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">.</span>png<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">!==</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> path<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">.</span>jpg<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">!==</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> path<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">.</span>DS_Store<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">!==</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> path<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>node_modules<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">!==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">crawl</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> files <span class="token operator">=</span> api<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// </span>
    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span>files<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>path<span class="token operator">:</span> string<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chalk<span class="token punctuation">.</span><span class="token function">red</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">【</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">】Writing</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token keyword">const</span> curProjectBluk <span class="token operator">=</span> fsExtra<span class="token punctuation">.</span><span class="token function">readJsonSync</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fsStatAsync</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> <span class="token literal-property property">fileSizeKB</span><span class="token operator">:</span>any <span class="token operator">=</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>size<span class="token operator">/</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>fileSizeKB <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token number">1024</span><span class="token operator">*</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">// 判断文件是否大于19M</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chalk<span class="token punctuation">.</span><span class="token function">yellow</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">当前文件大小：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>fileSizeKB<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">KB</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span>curProjectBluk<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>item<span class="token operator">:</span>string<span class="token punctuation">,</span> <span class="token literal-property property">index</span><span class="token operator">:</span> number<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 偶数</span>
            <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">bluk</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
              <span class="token literal-property property">projectBluk</span><span class="token operator">:</span> <span class="token punctuation">[</span>curProjectBluk<span class="token punctuation">[</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>item<span class="token punctuation">]</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// </span>
            <span class="token keyword">return</span> res<span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chalk<span class="token punctuation">.</span><span class="token function">green</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">【</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">】Writed</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token comment">// remove</span>
        fsExtra<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">bluk</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
          <span class="token literal-property property">projectBluk</span><span class="token operator">:</span> curProjectBluk
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chalk<span class="token punctuation">.</span><span class="token function">green</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">【</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">】Writed</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token comment">// remove</span>
        fsExtra<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，有个细节点，生成的 JSON 文件大小要小于 19M，如果大于则需要遍历数据，然后按偶数项拆分。 JSON 文件数据格式类似如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    index<span class="token operator">:</span><span class="token punctuation">{</span>
      _index<span class="token operator">:</span> &amp;#<span class="token number">39</span>;test&amp;#<span class="token number">39</span>;<span class="token punctuation">,</span>
      _type<span class="token operator">:</span> &amp;#<span class="token number">39</span>;_doc&amp;#<span class="token number">39</span>;<span class="token punctuation">,</span>
      _id<span class="token operator">:</span> <span class="token number">1</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    file<span class="token operator">:</span><span class="token punctuation">{</span>
      filename<span class="token operator">:</span> &amp;#<span class="token number">39</span>;test.js&amp;#<span class="token number">39</span>;<span class="token punctuation">,</span>
      filesize<span class="token operator">:</span> &amp;#<span class="token number">39</span>;1kb&amp;#<span class="token number">39</span>;<span class="token punctuation">,</span>
      projectname<span class="token operator">:</span> &amp;#<span class="token number">39</span>;zcy-test&amp;#<span class="token number">39</span>;<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    path<span class="token operator">:</span><span class="token punctuation">{</span>
      real<span class="token operator">:</span> &amp;#<span class="token number">39</span>;tmp/es/zcy-test/test.js&amp;#<span class="token number">39</span>;<span class="token punctuation">,</span>
      virtual<span class="token operator">:</span> &amp;#<span class="token number">39</span>;zcy-test/test.js&amp;#<span class="token number">39</span>;<span class="token punctuation">,</span>
      content<span class="token operator">:</span> &amp;#<span class="token number">39</span>;hello world&amp;#<span class="token number">39</span>;
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    file<span class="token operator">:</span><span class="token punctuation">{</span>
      filename<span class="token operator">:</span> &amp;#<span class="token number">39</span>;test2.js&amp;#<span class="token number">39</span>;<span class="token punctuation">,</span>
      filesize<span class="token operator">:</span> &amp;#<span class="token number">39</span>;1kb&amp;#<span class="token number">39</span>;<span class="token punctuation">,</span>
      projectname<span class="token operator">:</span> &amp;#<span class="token number">39</span>;zcy-test&amp;#<span class="token number">39</span>;<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    path<span class="token operator">:</span><span class="token punctuation">{</span>
      real<span class="token operator">:</span> &amp;#<span class="token number">39</span>;tmp/es/zcy-test/test2.js&amp;#<span class="token number">39</span>;<span class="token punctuation">,</span>
      virtual<span class="token operator">:</span> &amp;#<span class="token number">39</span>;zcy-test/test2.js&amp;#<span class="token number">39</span>;<span class="token punctuation">,</span>
      content<span class="token operator">:</span> &amp;#<span class="token number">39</span>;hello world2&amp;#<span class="token number">39</span>;
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实就是一个数组，那为什么要这样写呢？下面 Elasticsearch 服务会提到，请继续阅读 ~ ~</p><h5 id="_4、gitlab-服务" tabindex="-1"><a class="header-anchor" href="#_4、gitlab-服务" aria-hidden="true">#</a> 4、GitLab 服务</h5><p>提供 GitLab Restful API，来获取或下载项目文件等数据。这里推荐 gitbeaker，目前完全支持所有 GitLab API 服务的 NodeJS 库。实例化 Gitlab，并传入 host 和 token。</p><p>比如，我们分页获取当前用户下所有项目列表信息。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Gitlab <span class="token punctuation">}</span> from <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>gitlab<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> api <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gitlab</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  host<span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>example<span class="token punctuation">.</span>com<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
  token<span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>personaltoken<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> projects <span class="token operator">=</span> <span class="token keyword">await</span> api<span class="token punctuation">.</span>Projects<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">{</span> perPage<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> maxPages<span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5、elasticsearch-服务" tabindex="-1"><a class="header-anchor" href="#_5、elasticsearch-服务" aria-hidden="true">#</a> 5、Elasticsearch 服务</h5><p>代码全局检索的核心引擎。这里用了 Elasticsearch 的 JavaScript 客户端库的一个包 elasticsearch.js（ Elasticsearch Node.js client ），可以在 NodeJS 和浏览器中使用。ES 服务起来后，实例化 elasticsearch.js 的 Client 方法， 然后传入一些必要的参数，便可通过 NodeJS 服务连接到 ES 服务。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> elasticsearch <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>elasticsearch<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> host <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">ES_HOST</span> <span class="token operator">||</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>elasticsearch<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> port <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">ES_PORT</span>

<span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">elasticsearch<span class="token punctuation">.</span>Client</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>host<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">log</span><span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>error<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">apiVersion</span><span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token number">7.9</span><span class="token number">.3</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token comment">// use the same version of your Elasticsearch instance</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么如何搭建 ES 服务呢？这里不做过多讲解，推荐使用 Docker 搭建部署，贴一份 Docker 部署的 Dockerfile 文件。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">FROM</span> <span class="token literal-property property">elasticsearch</span><span class="token operator">:</span><span class="token number">7.9</span><span class="token number">.3</span>

<span class="token constant">WORKDIR</span> <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>elasticsearch

<span class="token constant">VOLUME</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>elasticsearch<span class="token operator">/</span>config<span class="token operator">/</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>elasticsearch<span class="token operator">/</span>data<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">]</span>

<span class="token constant">COPY</span> config<span class="token operator">/</span>elasticsearch<span class="token punctuation">.</span>yml <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>elasticsearch<span class="token operator">/</span>config<span class="token operator">/</span>elasticsearch<span class="token punctuation">.</span>yml

<span class="token constant">EXPOSE</span> <span class="token number">9200</span> <span class="token number">9300</span>

<span class="token constant">CMD</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>bin<span class="token operator">/</span>elasticsearch<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上千个项目文件数据如何导入至 ES？</p><p>这里用到了 elasticsearch.js 的 bulk 方法，body 的属性值其实就是上面所提到的 JSON 文件数据，其中 content 字段便是我们项目文件的代码。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>client<span class="token punctuation">.</span><span class="token function">bulk</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// action description（新增）</span>
    <span class="token punctuation">{</span><span class="token literal-property property">index</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">_index</span><span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>myindex<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token literal-property property">_type</span><span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>_doc<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token literal-property property">_id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 元信息行</span>
    <span class="token comment">// the document to index</span>
    <span class="token punctuation">{</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>test<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>hellow world<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>test<span class="token punctuation">.</span>js<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 数据行</span>
    
    <span class="token comment">// action description（更新）</span>
    <span class="token punctuation">{</span><span class="token literal-property property">update</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">_index</span><span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>myindex<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token literal-property property">_type</span><span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>mytype<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token literal-property property">_id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 元信息行</span>
    <span class="token comment">// the document to update</span>
    <span class="token punctuation">{</span><span class="token literal-property property">doc</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>test<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 数据行</span>
     
    <span class="token comment">// action description（删除）</span>
    <span class="token punctuation">{</span><span class="token keyword">delete</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">_index</span><span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>myindex<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token literal-property property">_type</span><span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>mytype<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token literal-property property">_id</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 元信息行</span>
  	<span class="token comment">// no document needed for this delete</span>
  <span class="token punctuation">]</span> 
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> resp<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>bulk 即批量导入数据，批量导入可以合并多个操作，如：Index（创建）、Update（更新）、Delete（删除）。</p><h5 id="_6、mysql-服务" tabindex="-1"><a class="header-anchor" href="#_6、mysql-服务" aria-hidden="true">#</a> 6、Mysql 服务</h5><p>持久化存储项目组（ GitLab Group ）数据、项目数据、项目文件数据、搜索结果数据，也就是有 4 张表，大致如下：</p><ul><li><p>项目组：组 ID、组名称、项目组 GitLab 链接、项目组描述、标签</p></li><li><p>项目信息：项目 ID、项目名称、项目 GitLab 链接、默认分支（ master ）、项目描述、同步至 ES 状态、项目组 ID、标签</p></li><li><p>项目文件信息：文件 ID、文件名称、文件 GitLab 链接、文件内容、项目 ID、文件大小</p></li><li><p>搜索结果数据：搜索关键字、搜索结果、IP 等</p></li></ul><h4 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h4><p>至此，千寻设计架构的核心技术点介绍的差不到了，搜索核心引擎 Elasticsearch 服务支撑着我们从几万甚至十几万行代码里搜索出需要的结果，而 Node-server 作为中间层角色调用三方服务起到了数据聚合的作用，Node-fscrawler 作为脚手架把元数据（也就是项目文件数据）通过一层数据格式转化后再导入到 Elasticsearch 服务。每个技术点环环相扣，承担着重要的角色。</p><p>接下来，简单说下项目信息初始化和录入。</p><h4 id="项目信息初始化" tabindex="-1"><a class="header-anchor" href="#项目信息初始化" aria-hidden="true">#</a> 项目信息初始化</h4><p>首先拿到前端 GitLab 通用账号的 token，然后通过调用 gitbeaker 获取所有项目信息方法（ api.Projects.all({ perPage : 1, maxPages : 1000 }) ），并存储到 Mysql 的 projects 表中。</p><h4 id="项目信息录入" tabindex="-1"><a class="header-anchor" href="#项目信息录入" aria-hidden="true">#</a> 项目信息录入</h4><p>针对遗漏的项目或者新增的项目，我们会提供手动录入功能。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/19276b2f80c64b7a89454d73f847803d~tplv-k3u1fbpfcp-zoom-1.image" alt="项目信息录入.png"></p><p>效果图如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/753258ee21cf4c69b34a771945bb8278~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><h2 id="未来-展望" tabindex="-1"><a class="header-anchor" href="#未来-展望" aria-hidden="true">#</a> 未来，展望</h2><p>“千寻”，设计初心是为了提高代码全局检索效率，降低人力成本。未来，“千寻”还会进一步提升检索命中率，支持精确搜索，实现项目文件实时同步至 ES 等等一系列功能。如果你有更好的想法和方案，欢迎在评论区留言。</p><h2 id="推荐阅读" tabindex="-1"><a class="header-anchor" href="#推荐阅读" aria-hidden="true">#</a> 推荐阅读</h2>`,72),b={href:"https://juejin.cn/post/7002746459456176158",target:"_blank",rel:"noopener noreferrer"},y={href:"https://juejin.cn/post/6997536906967777316",target:"_blank",rel:"noopener noreferrer"},h={href:"https://juejin.cn/post/6984547134062198791",target:"_blank",rel:"noopener noreferrer"},f={href:"https://juejin.cn/post/6987140782595506189",target:"_blank",rel:"noopener noreferrer"},g=n("h2",{id:"开源作品",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#开源作品","aria-hidden":"true"},"#"),s(" 开源作品")],-1),w=n("ul",null,[n("li",null,"政采云前端小报")],-1),_={href:"https://www.zoo.team/openweekly/",target:"_blank",rel:"noopener noreferrer"},x=n("h2",{id:"招贤纳士",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#招贤纳士","aria-hidden":"true"},"#"),s(" 招贤纳士")],-1),j=n("p",null,"政采云前端团队（ZooTeam），一个年轻富有激情和创造力的前端团队，隶属于政采云产品研发部，Base 在风景如画的杭州。团队现有 50 余个前端小伙伴，平均年龄 27 岁，近 3 成是全栈工程师，妥妥的青年风暴团。成员构成既有来自于阿里、网易的“老”兵，也有浙大、中科大、杭电等校的应届新人。团队在日常的业务对接之外，还在物料体系、工程平台、搭建平台、性能体验、云端应用、数据分析及可视化等方向进行技术探索和实战，推动并落地了一系列的内部技术产品，持续探索前端技术体系的新边界。",-1),E=n("p",null,[s("如果你想改变一直被事折腾，希望开始能折腾事；如果你想改变一直被告诫需要多些想法，却无从破局；如果你想改变你有能力去做成那个结果，却不需要你；如果你想改变你想做成的事需要一个团队去支撑，但没你带人的位置；如果你想改变既定的节奏，将会是“5 年工作时间 3 年工作经验”；如果你想改变本来悟性不错，但总是有那一层窗户纸的模糊… 如果你相信相信的力量，相信平凡人能成就非凡事，相信能遇到更好的自己。如果你希望参与到随着业务腾飞的过程，亲手推动一个有着深入的业务理解、完善的技术体系、技术创造价值、影响力外溢的前端团队的成长历程，我觉得我们该聊聊。任何时间，等着你写点什么，发给 "),n("code",null,"ZooTeam@cai-inc.com")],-1),N=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/98d3aa3d1f8646a8bcda8cfd9e335a4b~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1);function S(P,z){const a=l("ExternalLinkIcon");return o(),c("div",null,[u,r,n("p",null,[s("> 这是第 114 篇不掺水的原创，想获取更多原创好文，请搜索公众号关注我们吧~ 本文首发于政采云前端博客："),n("a",k,[s("如何从 0 到 1 搭建代码全局检索系统"),p(a)])]),d,n("p",null,[s("即，Elasticsearch 的索引、类型、文档、字段分别类比关系型数据库的数据库、表、行、列。看完之后，是不是对 Elasticsearch 有了初步的概念。为了不损耗大家的脑细胞，点到为止，有兴趣的小伙伴，可以去查阅相关资料，深入了解（ "),n("a",m,[s("Elasticsearch7.6 中文文档"),p(a)]),s(" ）。")]),v,n("p",null,[n("a",b,[s("电商最小存货 - SKU 和 算法实现"),p(a)])]),n("p",null,[n("a",y,[s("你需要知道的项目管理知识"),p(a)])]),n("p",null,[n("a",h,[s("最熟悉的陌生人rc-form"),p(a)])]),n("p",null,[n("a",f,[s("如何搭建适合自己团队的构建部署平台"),p(a)])]),g,w,n("p",null,[n("strong",null,[s("开源地址 "),n("a",_,[s("www.zoo.team/openweekly/"),p(a)])]),s(" (小报官网首页有微信交流群)")]),x,j,E,N])}const I=e(i,[["render",S],["__file","如何从 0 到 1 搭建代码全局检索系统.html.vue"]]);export{I as default};
