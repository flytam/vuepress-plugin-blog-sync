import{_ as o,z as e,A as c,Y as n,C as s,U as p,a6 as t,Q as l}from"./framework-cb9358d9.js";const u={},i=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d4eb6a01e6564840817b127265b07edd~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1),k=n("p",null,[n("img",{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6b9845f2d65f419ba5eb876d2bf56af3~tplv-k3u1fbpfcp-watermark.image",alt:"晴天.png"})],-1),r={href:"https://zoo.team/article/sku-about",target:"_blank",rel:"noopener noreferrer"},d=n("h2",{id:"前言",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),s(" 前言")],-1),m={href:"https://baike.baidu.com/item/%E6%9C%80%E5%B0%8F%E5%AD%98%E8%B4%A7%E5%8D%95%E4%BD%8D/892217?fr=aladdin",target:"_blank",rel:"noopener noreferrer"},v=t('<p>让我们看看实际场景：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc5eb806c3204824b09abe663cd80cf3~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>有了上图规格选中预处理，就能够帮助用户在购买商品时，直观的了解到商品是否可以购买。</p><p>在我们实际开发过程中，商品创建页会先进行规格组装，商品购买页会对规格选择做处理。规格组装通过规格组合成 SKU 集合，规格选择根据规格内容获取库存数据量，计算 SKU 是否可被选择，两者功能在电商流程中缺一不可。</p><h2 id="组装-sku-实践" tabindex="-1"><a class="header-anchor" href="#组装-sku-实践" aria-hidden="true">#</a> 组装 SKU 实践</h2><h4 id="属性描述" tabindex="-1"><a class="header-anchor" href="#属性描述" aria-hidden="true">#</a> 属性描述</h4>',6),b={href:"https://baike.baidu.com/item/%E6%9C%80%E5%B0%8F%E5%AD%98%E8%B4%A7%E5%8D%95%E4%BD%8D/892217?fr=aladdin",target:"_blank",rel:"noopener noreferrer"},h=t(`<ul><li>最小存货单位( Stock Keeping Unit ) 在连锁零售门店中有时称单品为一个 SKU，定义为保存库存控制的最小可用单位，例如纺织品中一个 SKU 通常表示规格、颜色、款式。</li></ul><h4 id="业务场景" tabindex="-1"><a class="header-anchor" href="#业务场景" aria-hidden="true">#</a> 业务场景</h4><ul><li>只要是做电商类相关的产品，比如购物 APP、购物网站等等，都会遇到这么一个场景，每个商品对应着多个规格，用户可以根据不同的规格组合，选择出自己想要的产品。我们自己在生活中也会经常用到这个功能。</li></ul><p>通过上面描述，让我们把概念和实际数据关联起来，下面让我们来举个🌰 ：</p><p>现有规格</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> type <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>男裤<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>女裤<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> color <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>黑色<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>白色<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> size <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token constant">S</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token constant">L</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么根据现有规格，可以得到所有的 SKU 为：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span>
  <span class="token punctuation">[</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>男裤<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>黑色<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token constant">S</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>男裤<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>黑色<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token constant">L</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>男裤<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>白色<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token constant">S</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>男裤<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>白色<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token constant">L</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>女裤<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>黑色<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token constant">S</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>女裤<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>黑色<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token constant">L</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>女裤<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>白色<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token constant">S</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>女裤<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>白色<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token constant">L</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述 SKU 是如何得到的呢，让我们一起看看实现思路，并且通过上面的🌰 来计算一遍。</p><h3 id="sku-组合实现思路" tabindex="-1"><a class="header-anchor" href="#sku-组合实现思路" aria-hidden="true">#</a> SKU 组合实现思路</h3><h4 id="笛卡尔积" tabindex="-1"><a class="header-anchor" href="#笛卡尔积" aria-hidden="true">#</a> 笛卡尔积</h4><p>首先让我们来看看笛卡尔积的描述</p><ul><li>笛卡尔乘积是指在数学中，两个[集合] <em>X</em> 和 <em>Y</em> 的笛卡尔积(Cartesian product)，又称 [ 直积 ] ，表示为 <em>X</em> × <em>Y</em>，第一个对象是 <em>X</em> 的成员而第二个对象是 <em>Y</em> 的所有可能 [ 有序对 ] 的其中一个成员</li><li>假设集合 A = { a, b }，集合 B = { 0, 1, 2 }，则两个集合的笛卡尔积为 { ( a, 0 ), ( a, 1 ), ( a, 2), ( b, 0), ( b, 1), ( b, 2) }</li></ul><p>看来笛卡尔积满足组合计算的条件，那么下面先来一波思维碰撞，先通过导图，看看怎么实现</p><p>&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d8ce8a7ab96f4b48a9f5ea61f6c23102~tplv-k3u1fbpfcp-zoom-1.image&quot; style=&quot;zoom:75%;&quot; /&gt;</p><p>通过上面的思维导图，可以看出这种规格组合是一个经典的排列组合，去组合每一个规格值得到最终 SKU。</p><p>那么让我们来进行代码实现，看看代码如何实现笛卡尔积。</p><h3 id="实现代码" tabindex="-1"><a class="header-anchor" href="#实现代码" aria-hidden="true">#</a> 实现代码</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token doc-comment comment">/**
 * 笛卡尔积组装
 * @param <span class="token class-name"><span class="token punctuation">{</span>Array<span class="token punctuation">}</span></span> <span class="token parameter">list</span>
 * @returns []
 */</span>
<span class="token keyword">function</span> <span class="token function">descartes</span><span class="token punctuation">(</span><span class="token parameter">list</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// parent 上一级索引;count 指针计数</span>
  <span class="token keyword">let</span> point <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 准备移动指针</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 准备返回数据</span>
  <span class="token keyword">let</span> pIndex <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 准备父级指针</span>
  <span class="token keyword">let</span> tempCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 每层指针坐标</span>
  <span class="token keyword">let</span> temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 组装当个 sku 结果</span>

  <span class="token comment">// 一：根据参数列生成指针对象</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token keyword">in</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> list<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>object<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      point<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">parent</span><span class="token operator">:</span> pIndex<span class="token punctuation">,</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
      pIndex <span class="token operator">=</span> index<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 单维度数据结构直接返回</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>pIndex <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> list<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 动态生成笛卡尔积</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 二：生成结果</span>
    <span class="token keyword">let</span> index<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>index <span class="token keyword">in</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      tempCount <span class="token operator">=</span> point<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>count<span class="token punctuation">;</span>
      temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>tempCount<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 压入结果数组</span>
    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment">// 三：检查指针最大值问题，移动指针</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>point<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token operator">=</span> list<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        point<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        pIndex <span class="token operator">=</span> point<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>parent<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>pIndex <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> result<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 赋值 parent 进行再次检查</span>
        index <span class="token operator">=</span> pIndex<span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        point<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们看看实际的输入输出和调用结果。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1164320629884d06ad02dc83f905a52a~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>那么这个经典的排列组合问题就这样解决啦。接下来，让我们再看看，如何在商品购买中，去处理商品多规格选择。</p><h2 id="商品多规格选择" tabindex="-1"><a class="header-anchor" href="#商品多规格选择" aria-hidden="true">#</a> 商品多规格选择</h2><p>开始前回顾下使用场景</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ad5fc81d76af4f8f8d587137ce60babb~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>这个图片已经能很明确的展示业务需求了。结合上述动图可知，在用户每次选择了某一规格后，需要通过程序的计算去处理其他规格情况，以便给用户提供当前情况下可供选择的其他规格。</p><p>那么让我们来看看实现思路，首先在初始化中，提供可选择的 SKU，从可选择的 SKU 中去剔除不包含的规格内容，在剔除后，提供可以进行下一步选择的规格，后续在每次用户点击情况下，处理可能选中的 SKU，最终在全部规格选择完成后，得到选中的 SKU。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/acf9b83f4ab5403fbde268a6c40e0d3c~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><h2 id="商品多规格选择实现思路" tabindex="-1"><a class="header-anchor" href="#商品多规格选择实现思路" aria-hidden="true">#</a> 商品多规格选择实现思路</h2><h4 id="邻接矩阵" tabindex="-1"><a class="header-anchor" href="#邻接矩阵" aria-hidden="true">#</a> 邻接矩阵</h4>`,30),f={href:"https://baike.baidu.com/item/%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5/9796080?fr=aladdin",target:"_blank",rel:"noopener noreferrer"},y=t(`<ul><li>用一个二维数组存放顶点间关系（边或弧）的数据，这个二维数组称为邻接矩阵。</li><li>逻辑结构分为两部分：V 和 E 集合，其中，V 是顶点，E 是边。因此，用一个一维数组存放图中所有顶点数据。</li></ul><p>字面描述可能比较晦涩难懂，那么让我们来看看图片帮助理解，如果两个顶点互通（有连线），那么它们对应下标的值则为 1，否则为 0。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6b1cb4d8707d49aeb0bfc9b7c0063961~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><h4 id="让我们继续前面的🌰-数据来看" tabindex="-1"><a class="header-anchor" href="#让我们继续前面的🌰-数据来看" aria-hidden="true">#</a> 让我们继续前面的🌰 数据来看</h4><p>规格</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> type <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>男裤<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>女裤<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> color <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>黑色<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>白色<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> size <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token constant">S</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token constant">L</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假设总 SKU 的库存值为下面示例，可选为有库存，不可选为某项规格无库存</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span>
  <span class="token punctuation">[</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>男裤<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>黑色<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token constant">S</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// S 无号</span>
  <span class="token punctuation">[</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>男裤<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>黑色<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token constant">L</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>男裤<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>白色<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token constant">S</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// S 无号</span>
  <span class="token punctuation">[</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>男裤<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>白色<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token constant">L</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>女裤<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>黑色<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token constant">S</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// S 无号</span>
  <span class="token punctuation">[</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>女裤<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>黑色<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token constant">L</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>女裤<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>白色<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token constant">S</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// S 无号</span>
  <span class="token punctuation">[</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>女裤<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>白色<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token constant">L</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么根据邻接矩阵思想，可以得到结果图：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ad2e35a3373b4157b6e12737703ad697~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>从图中可以看出，SKU 中每两规格都可选择，那么相对的标志值为 1，否则为 0，当整条规格选中都是 1，才会使整条 SKU 链路可选。</p><p>思路是有了，但是如何通过代码去实现呢，想必大家也有各种方式去实现，那么我就介绍下自己的实现方式：集合。</p><h3 id="计算思路" tabindex="-1"><a class="header-anchor" href="#计算思路" aria-hidden="true">#</a> 计算思路</h3><h4 id="集合" tabindex="-1"><a class="header-anchor" href="#集合" aria-hidden="true">#</a> 集合</h4><p>高中过去好多年了，难免忘记，这里通过集合说明图一起回顾下集合的定义</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cac8a20f759743e4ade09d1275f2c36e~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>上图来自百度图片</p><p>想起集合，那么计算思路算是有了，这边我们需要用集合相等的情况，去处理 SKU 和规格值的计算。</p><p>实现思维导图</p><p>&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0ebef0fe0c67494e990198f9c3a86e3a~tplv-k3u1fbpfcp-zoom-1.image&quot; style=&quot;zoom:65%;&quot; /&gt;</p><ul><li>假设一个集合 A{a, b, c} 和另外一个集合 B{a, e}，如何快速判断 B 是否是 A 的子集。这个问题比较简单的方法是用 B 中所有元素依次和 A 中的元素进行比较，对于集合中的元素，每个元素值都是唯一的。通过这样的特性，我们可以把所有字母转换为一个质数，那么 <strong>集合 A 可以表示为集合元素</strong>(<strong>质数</strong>)**的积，B 同样，**B 是否是 A 的子集，这个只需要将 B 除以 A，看看是否可以整除 ，如果可以那么说明，B 是 A 的子集。</li><li>那么根据邻接矩阵思路，整条 SKU 都会有一个<code>集合值</code>，集合值由所有涉及规格对应<code>乘积</code>得到的结果，在选择规格过程中，每次选择去根据集合值去反向整除规格对应值去判断是否是子集，是否为 1。</li><li>现在根据乘法算法，有了以上的分析，我们可以整理下算法过程： <ul><li>数据预处理，把所有需要处理的规格内容一一对应一个不重复的质数，把 ITEM 组合转换为每个质数的积</li><li>根据用户已经选择的 ITEM 进行扫描所有的 ITEM，如果 ITEM 已经被选中，则退出，如果没有， 则和所有已经选择的 ITEM 进行相乘 (因为一个组合不可能出现两个类目相同的 ITEM，所以选中的 ITEM 需要去掉和当前匹配的 ITEM 在同一个类目中的 ITEM ) ，这个乘机就是上文中的集合 B</li><li>把集合 B 依次和 SKU 组合构成的积 (相当于上文中的集合 A) 进行相除，比较，如果整除，则退出，当前匹配的 SKU 可以被选中，如果一直到最后还没有匹配上，则当前匹配的 SKU 不可被选中。</li></ul></li></ul><p>我们通过集合的思想，看看核心代码吧。</p><h3 id="核心代码" tabindex="-1"><a class="header-anchor" href="#核心代码" aria-hidden="true">#</a> 核心代码</h3><p>计算质数方法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 准备质数
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Int<span class="token punctuation">}</span></span> <span class="token parameter">num</span> 质数范围
 * <span class="token keyword">@returns</span>
 */</span>
<span class="token function-variable function">getPrime</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 从第一个质数 2 开始</span>
  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
   * 检查是否是质数
   * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Int<span class="token punctuation">}</span></span> <span class="token parameter">number</span>
   * <span class="token keyword">@returns</span>
   */</span>
  <span class="token keyword">const</span> isPrime <span class="token operator">=</span> <span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> ii <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> ii <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span> number <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token operator">++</span>ii<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">%</span> ii <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token comment">// 循环判断，质数数量够完成返回</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token punctuation">;</span> arr<span class="token punctuation">.</span>length <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span> total<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPrime</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 返回需要的质数</span>
  <span class="token keyword">return</span> arr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 上述动图入参以及返回结果展示：</span>
<span class="token comment">// getPrime(500) return==&amp;gt; </span>
<span class="token comment">// 0: (8) [2, 3, 5, 7, 11, 13, 17, 19]</span>
<span class="token comment">// 1: (8) [23, 29, 31, 37, 41, 43, 47, 53]</span>
<span class="token comment">// 2: (8) [59, 61, 67, 71, 73, 79, 83, 89]</span>
<span class="token comment">// 3: (8) [97, 101, 103, 107, 109, 113, 127, 131]</span>
<span class="token comment">// 4: (8) [137, 139, 149, 151, 157, 163, 167, 173]</span>
<span class="token comment">// 5: (8) [179, 181, 191, 193, 197, 199, 211, 223]</span>
<span class="token comment">// 6: (8) [227, 229, 233, 239, 241, 251, 257, 263]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>初始化处理，得到第一批邻接矩阵结果：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 初始化，格式需要对比数据，并进行初始化是否可选计算
 */</span>
<span class="token function-variable function">init</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>light <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">cloneTwo</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>maps<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> light <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>light<span class="token punctuation">;</span>

  <span class="token comment">// 默认每个规则都可以选中，即赋值为 1</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span> light<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> l <span class="token operator">=</span> light<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span> l<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>_way<span class="token punctuation">[</span>l<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span><span class="token punctuation">;</span>
      l<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 对应结果值，此处将数据处理的方法对应邻接矩阵的思维导图</span>
  <span class="token comment">// 0: (8) [1, 1, 1, 1, 1, 1, 1, 1]</span>
  <span class="token comment">// 1: (8) [1, 1, 1, 1, 1, 1, 1, 1]</span>
  <span class="token comment">// 2: (8) [1, 1, 1, 1, 1, 1, 1, 1]</span>
  <span class="token comment">// 3: (8) [1, 1, 1, 1, 1, 1, 1, 1]</span>
  <span class="token comment">// 4: (8) [1, 1, 1, 1, 1, 1, 1, 1]</span>
  <span class="token comment">// 5: (8) [1, 1, 1, 1, 1, 1, 1, 1]</span>
  <span class="token comment">// 6: (8) [1, 1, 1, 1, 1, 1, 1, 1]</span>

  <span class="token comment">// 得到每个可操作的 SKU 质数的集合</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>openway<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 计算结果单行示例：</span>
    <span class="token comment">// this.openway[i].join(&amp;#39;*&amp;#39;) ==&amp;gt; eval(2*3*5*7*11*13*17*19)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>openway<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>openway<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// return 初始化得到规格位置，规格默认可选处理，可选 SKU 的规格对应的质数合集</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>计算是否可选方法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 检查是否可以选择，更新邻接矩阵对应结果值
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Boolean<span class="token punctuation">}</span></span> <span class="token parameter">isAdd</span> 是否新增状态
 * <span class="token keyword">@returns</span>
 */</span>
<span class="token function-variable function">_check</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">isAdd</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> light <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>light<span class="token punctuation">;</span>
  <span class="token keyword">var</span> maps <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maps<span class="token punctuation">;</span>
  
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span> light<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> li <span class="token operator">=</span> light<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> selected <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_getSelected</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span> li<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>li<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">//如果是加一个条件，只在是 light 值为 1 的点进行选择</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>isAdd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>li<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            light<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_checkItem</span><span class="token punctuation">(</span>maps<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> selected<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          light<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_checkItem</span><span class="token punctuation">(</span>maps<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> selected<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>light<span class="token punctuation">;</span>
<span class="token punctuation">}</span>，

<span class="token doc-comment comment">/**
 * 检查是否可选内容，更新邻接矩阵对应结果值
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Int<span class="token punctuation">}</span></span> <span class="token parameter">item</span> 当前规格质数
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Array<span class="token punctuation">}</span></span> <span class="token parameter">selected</span>
 * <span class="token keyword">@returns</span>
 */</span>
<span class="token function-variable function">_checkItem</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> selected</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 拿到可以选择的 SKU 内容集合</span>
  <span class="token keyword">var</span> openway <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>openway<span class="token punctuation">;</span>
  <span class="token keyword">var</span> val<span class="token punctuation">;</span>
  <span class="token comment">// 拿到已经选中规格集合*此规格集合值</span>
  val <span class="token operator">=</span> item <span class="token operator">*</span> selected<span class="token punctuation">;</span>
  <span class="token comment">// 可选 SKU 集合反除，查询是否可选</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span> openway<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>openway<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> val <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加规格方法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/** 选择可选规格后处理
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>array<span class="token punctuation">}</span></span> <span class="token parameter">point</span> [x, y]
 */</span>
<span class="token function-variable function">add</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">point</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  point <span class="token operator">=</span> point <span class="token keyword">instanceof</span> <span class="token class-name">Array</span> <span class="token operator">?</span> point <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_way<span class="token punctuation">[</span>point<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token comment">// 得到选中规格对应的质数内容</span>
  <span class="token keyword">var</span> val <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maps<span class="token punctuation">[</span>point<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>point<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token comment">// 检查是否可选中</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>light<span class="token punctuation">[</span>point<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>point<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>
      <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token keyword">this</span> point <span class="token punctuation">[</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span> <span class="token operator">+</span> point <span class="token operator">+</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">]</span> is no availabe<span class="token punctuation">,</span> place choose an other<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 判断是否选中内容已经存在已经选择内容中</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">.</span>selected<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
  
  <span class="token keyword">var</span> isAdd <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_dealChange</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>selected<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 选择后邻接矩阵对应数据修改为 2，以做是否可选区分</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>light<span class="token punctuation">[</span>point<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>point<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_check</span><span class="token punctuation">(</span><span class="token operator">!</span>isAdd<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>移除已选规格方法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 移除已选规格
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Array<span class="token punctuation">}</span></span> <span class="token parameter">point</span> 
 */</span>
<span class="token function-variable function">remove</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">point</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  point <span class="token operator">=</span> point <span class="token keyword">instanceof</span> <span class="token class-name">Array</span> <span class="token operator">?</span> point <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_way<span class="token punctuation">[</span>point<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token comment">// 容错处理</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> val <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maps<span class="token punctuation">[</span>point<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>point<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 在选中内容中，定位取出需要移除规格质数</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>selected<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>selected<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> line <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_way<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>selected<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// 对应邻接矩阵内容更新为可选</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>light<span class="token punctuation">[</span>line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>line<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token comment">// 从已选内容中移除</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>selected<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token comment">// 进行重新计算</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="整体代码" tabindex="-1"><a class="header-anchor" href="#整体代码" aria-hidden="true">#</a> 整体代码</h3><p>开源代码将在 9 月中旬提供。如需，请关注微信公众号：政采云前端团队。回复 sku，即可获取开源地址。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>看来老师没有骗我们，在学习中学到的<strong>经典排列组合</strong>，<strong>邻接矩阵</strong>，<strong>集合</strong>还是很有用处的。其中经典排列组合<strong>笛卡尔积</strong>思想不用死记硬背，通过理解就可以完成递归树状图的大量情况。根据邻接矩阵，可以简化空间复杂程度，通过集合思想，实现选择数据判断。</p><p>相信阅读完本篇文章的你，对于电商规格处理的两个算法已经有了大体了解。</p><h3 id="参考文献" tabindex="-1"><a class="header-anchor" href="#参考文献" aria-hidden="true">#</a> 参考文献</h3>`,39),w={href:"http://git.shepherdwind.com/sku-search-algorithm.html",target:"_blank",rel:"noopener noreferrer"},g={href:"https://gist.github.com/shepherdwind/2141756",target:"_blank",rel:"noopener noreferrer"},q={href:"https://gist.github.com/shepherdwind/2141756",target:"_blank",rel:"noopener noreferrer"},_=n("h2",{id:"推荐阅读",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#推荐阅读","aria-hidden":"true"},"#"),s(" 推荐阅读")],-1),j={href:"https://juejin.cn/post/6997536906967777316",target:"_blank",rel:"noopener noreferrer"},x={href:"https://juejin.cn/post/6984547134062198791",target:"_blank",rel:"noopener noreferrer"},S={href:"https://juejin.cn/post/6987140782595506189",target:"_blank",rel:"noopener noreferrer"},U={href:"https://juejin.cn/post/6961201207964598286",target:"_blank",rel:"noopener noreferrer"},E=n("h2",{id:"开源作品",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#开源作品","aria-hidden":"true"},"#"),s(" 开源作品")],-1),K=n("ul",null,[n("li",null,"政采云前端小报")],-1),A={href:"https://www.zoo.team/openweekly/",target:"_blank",rel:"noopener noreferrer"},B=n("h2",{id:"招贤纳士",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#招贤纳士","aria-hidden":"true"},"#"),s(" 招贤纳士")],-1),I=n("p",null,"政采云前端团队（ZooTeam），一个年轻富有激情和创造力的前端团队，隶属于政采云产品研发部，Base 在风景如画的杭州。团队现有 50 余个前端小伙伴，平均年龄 27 岁，近 3 成是全栈工程师，妥妥的青年风暴团。成员构成既有来自于阿里、网易的“老”兵，也有浙大、中科大、杭电等校的应届新人。团队在日常的业务对接之外，还在物料体系、工程平台、搭建平台、性能体验、云端应用、数据分析及可视化等方向进行技术探索和实战，推动并落地了一系列的内部技术产品，持续探索前端技术体系的新边界。",-1),z=n("p",null,[s("如果你想改变一直被事折腾，希望开始能折腾事；如果你想改变一直被告诫需要多些想法，却无从破局；如果你想改变你有能力去做成那个结果，却不需要你；如果你想改变你想做成的事需要一个团队去支撑，但没你带人的位置；如果你想改变既定的节奏，将会是“5 年工作时间 3 年工作经验”；如果你想改变本来悟性不错，但总是有那一层窗户纸的模糊… 如果你相信相信的力量，相信平凡人能成就非凡事，相信能遇到更好的自己。如果你希望参与到随着业务腾飞的过程，亲手推动一个有着深入的业务理解、完善的技术体系、技术创造价值、影响力外溢的前端团队的成长历程，我觉得我们该聊聊。任何时间，等着你写点什么，发给 "),n("code",null,"ZooTeam@cai-inc.com")],-1),T=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/98d3aa3d1f8646a8bcda8cfd9e335a4b~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1);function L(C,D){const a=l("ExternalLinkIcon");return e(),c("div",null,[i,k,n("p",null,[s("> 这是第 113 篇不掺水的原创，想获取更多原创好文，请搜索公众号关注我们吧~ 本文首发于政采云前端博客："),n("a",r,[s("电商最小存货 - SKU 和 算法实现"),p(a)])]),d,n("p",null,[s("目前电商平台的业务中，只要有商品，不可避免的会遇到 "),n("a",m,[s("SKU"),p(a)]),s(" 方面功能。这篇文章就从理论到实践，从商品创建到商品购买，手把手带你实现 SKU 相关的“核心算法”。")]),v,n("p",null,[s("根据"),n("a",b,[s("百度百科"),p(a)]),s("解释的 SKU")]),h,n("p",null,[s("首先，看下什么是邻接矩阵，来自"),n("a",f,[s("百度百科"),p(a)]),s("的解释")]),y,n("p",null,[s("1.上述集合计算思路借鉴文献， 详情见"),n("a",w,[s("链接"),p(a)]),s("。")]),n("p",null,[s("2.另一种正则匹配实现思路文献借鉴，详情见"),n("a",g,[s("链接"),p(a)]),s("。")]),n("p",null,[s("3.邻接矩阵思路借鉴文献，详情见"),n("a",q,[s("链接"),p(a)]),s("。")]),_,n("p",null,[n("a",j,[s("你需要知道的项目管理知识"),p(a)])]),n("p",null,[n("a",x,[s("最熟悉的陌生人rc-form"),p(a)])]),n("p",null,[n("a",S,[s("如何搭建适合自己团队的构建部署平台"),p(a)])]),n("p",null,[n("a",U,[s("聊聊Deno的那些事"),p(a)])]),E,K,n("p",null,[n("strong",null,[s("开源地址 "),n("a",A,[s("www.zoo.team/openweekly/"),p(a)])]),s(" (小报官网首页有微信交流群)")]),B,I,z,T])}const P=o(u,[["render",L],["__file","电商最小存货 - SKU 和 算法实现.html.vue"]]);export{P as default};
