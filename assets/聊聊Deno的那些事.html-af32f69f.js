import{_ as p,z as o,A as c,Y as n,C as a,U as e,a6 as t,Q as l}from"./framework-cb9358d9.js";const r={},i=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/70ccf0585fc94af6a3e4b2d9206709b3~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1),u={href:"https://zoo.team/article/talk-about-deno",target:"_blank",rel:"noopener noreferrer"},d=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/067ff757920d4a6fa1d0d1f10e85384d~tplv-k3u1fbpfcp-watermark.image",alt:"七彩.png"})],-1),k=n("h1",{id:"deno-是什么",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#deno-是什么","aria-hidden":"true"},"#"),a(" Deno 是什么")],-1),m=n("p",null,[n("img",{src:"https://www.zoo.team/images/upload/upload_c4d1815554a51c1c6836f4f1b09aa88f.png",alt:"deno1"})],-1),v={href:"https://www.javascript.com/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://www.typescriptlang.org/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://webassembly.org/",target:"_blank",rel:"noopener noreferrer"},g=n("p",null,'> Deno 是 Node 的变位词，其发音是恐龙（dinosaur）的缩写读音"蒂诺"。',-1),f=n("p",null,"它是建立在：",-1),_={href:"https://www.rust-lang.org/zh-CN/",target:"_blank",rel:"noopener noreferrer"},w={href:"https://tokio-zh.github.io/",target:"_blank",rel:"noopener noreferrer"},j={href:"https://www.typescriptlang.org/",target:"_blank",rel:"noopener noreferrer"},x={href:"https://v8.dev/",target:"_blank",rel:"noopener noreferrer"},y=n("h1",{id:"deno-的背景",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#deno-的背景","aria-hidden":"true"},"#"),a(" Deno 的背景")],-1),q=n("p",null,[n("img",{src:"https://www.zoo.team/images/upload/upload_238b14bdb1123c7be5b8a3f3ceacf0f7.png",alt:"deno演讲.png"})],-1),D=n("strong",null,"Ryan Dahl",-1),N=n("strong",null,"Dahl",-1),S={href:"https://www.youtube.com/watch?v=M3BM9TB-8yA&vl=en",target:"_blank",rel:"noopener noreferrer"},C=t(`<h1 id="node-的缺陷" tabindex="-1"><a class="header-anchor" href="#node-的缺陷" aria-hidden="true">#</a> Node 的缺陷</h1><h2 id="原生-api-缺少-promise" tabindex="-1"><a class="header-anchor" href="#原生-api-缺少-promise" aria-hidden="true">#</a> 原生 API 缺少 Promise</h2><p>Node 最大的亮点在于事件驱动， 非阻塞 I/O 模型，这使得 Node 具有很强的并发处理能力，非常适合编写网络应用。在 Node 中大部分的 I/O 操作几乎都是异步的，于是乎 Callback Hell 产生了:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// fs.js</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>fs<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> myFile <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token operator">/</span>tmp<span class="token operator">/</span>test<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>

fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>myFile<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>utf8<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> txt<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>myFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>若要实现链式调用，你需要使用 Promise 重新包装下原生 API，如下所示：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>fs<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> myFile <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token operator">/</span>tmp<span class="token operator">/</span>test<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">readFile_promise</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
    fs<span class="token punctuation">.</span><span class="token function">readfile</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>utf<span class="token operator">-</span><span class="token number">8</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">readFile_promise</span><span class="token punctuation">(</span>myFile<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>
    fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>myFile<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="缺少安全性" tabindex="-1"><a class="header-anchor" href="#缺少安全性" aria-hidden="true">#</a> 缺少安全性</h2><p>在 Node 中，可以调用 fs.chmod 来修改文件或目录的读写权限。说明 Node 运行时的权限是很高的。如果你在 Node 中导入一份不受信任的软件包，那么很可能它将删除你计算机上的所有文件，所以说 Node 缺少安全模块化运行时。除非手动提供一个沙箱环境，诸如 Docker 这类的容器环境来解决安全性问题。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>fs<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//删除hello.txt</span>
fs<span class="token punctuation">.</span><span class="token function">unlinkSync</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token operator">/</span>hello<span class="token punctuation">.</span>txt<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 删除css文件夹</span>
fs<span class="token punctuation">.</span><span class="token function">rmdirSync</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token operator">/</span>css<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="构建系统与-chrome-存在差异" tabindex="-1"><a class="header-anchor" href="#构建系统与-chrome-存在差异" aria-hidden="true">#</a> 构建系统与 Chrome 存在差异</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/524c9f24d50e4c73b8d3b5eb1654d007~tplv-k3u1fbpfcp-zoom-1.image" alt="v8编译.png"></p><p>首先我们需要了解构建系统是啥？</p>`,12),T={href:"https://v8.dev/docs/build-gn",target:"_blank",rel:"noopener noreferrer"},A={href:"https://gyp.gsrc.io/",target:"_blank",rel:"noopener noreferrer"},z={href:"https://chromium.googlesource.com/chromium/src/tools/gn/+/48062805e19b4697c5fbd926dc649c78b6aaa138/README.md",target:"_blank",rel:"noopener noreferrer"},X=t('<h2 id="复杂的包管理模式" tabindex="-1"><a class="header-anchor" href="#复杂的包管理模式" aria-hidden="true">#</a> 复杂的包管理模式</h2><p><img src="https://www.zoo.team/images/upload/upload_0868aecff4d064301d0eeb570e69018f.png" alt="deno模块太阳.png"></p><p>Node 自带的 NPM 生态系统中，由于严重依赖语义版本控制和复杂的依赖关系图，少不了要与 package.json、node_modules 打交道。node_modules 的设计虽然能满足大部分的场景，但是其仍然存在着种种缺陷，尤其在前端工程化领域，造成了不少的问题。特别是不同包依赖版本不一致时，各种问题接踵而来，于是乎 yarn lock、npm lock 闪亮登场。</p><p>然而还是有很多场景是 lock 无法覆盖的，比如当我们第一次安装某个依赖的时候，此时即使第三方库里含有 lock 文件，但是 npm install|、yarn install 也不会去读取第三方依赖的 lock，这导致第一次创建项目的时候，还是会可能会触发 bug。而且由于交叉依赖，node_modules 里充满了各种重复版本的包，造成了极大的空间浪费，也导致 install 依赖包很慢，以及 require 读取文件的算法越来越复杂化。</p><h2 id="读取文件复杂化" tabindex="-1"><a class="header-anchor" href="#读取文件复杂化" aria-hidden="true">#</a> 读取文件复杂化</h2>',5),P={href:"https://nodejs.org/api/modules.html#modules_all_together",target:"_blank",rel:"noopener noreferrer"},R=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>当 Node 遇到 <span class="token function">require</span><span class="token punctuation">(</span><span class="token constant">X</span><span class="token punctuation">)</span> 时，按下面的顺序处理。
（<span class="token number">1</span>）如果 <span class="token constant">X</span> 是内置模块（比如 <span class="token function">require</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>http<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>）<span class="token punctuation">)</span>
　　a<span class="token punctuation">.</span> 返回该模块。
　　b<span class="token punctuation">.</span> 不再继续执行。

（<span class="token number">2</span>）如果 <span class="token constant">X</span> 以 <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span> 或者 <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span> 或者 <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span> 开头
　　a<span class="token punctuation">.</span> 根据 <span class="token constant">X</span> 所在的父模块，确定 <span class="token constant">X</span> 的绝对路径。
　　b<span class="token punctuation">.</span> 将 <span class="token constant">X</span> 当成文件，依次查找下面文件，只要其中有一个存在，就返回该文件，不再继续执行。
      <span class="token constant">X</span>
      <span class="token constant">X</span><span class="token punctuation">.</span>js
      <span class="token constant">X</span><span class="token punctuation">.</span>json
      <span class="token constant">X</span><span class="token punctuation">.</span>node
　　c<span class="token punctuation">.</span> 将 <span class="token constant">X</span> 当成目录，依次查找下面文件，只要其中有一个存在，就返回该文件，不再继续执行。
      <span class="token constant">X</span><span class="token operator">/</span><span class="token keyword">package</span><span class="token punctuation">.</span>json（main字段）
      <span class="token constant">X</span><span class="token operator">/</span>index<span class="token punctuation">.</span>js
      <span class="token constant">X</span><span class="token operator">/</span>index<span class="token punctuation">.</span>json
      <span class="token constant">X</span><span class="token operator">/</span>index<span class="token punctuation">.</span>node
      
（<span class="token number">3</span>）如果 <span class="token constant">X</span> 不带路径
　　a<span class="token punctuation">.</span> 根据 <span class="token constant">X</span> 所在的父模块，确定 <span class="token constant">X</span> 可能的安装目录。
　　b<span class="token punctuation">.</span> 依次在每个目录中，将 <span class="token constant">X</span> 当成文件名或目录名加载。

（<span class="token number">4</span>） 抛出 <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>not found<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看得出来，require 的读取逻辑是很复杂的，虽然用起来很可爱，但是没必要。</p><h1 id="deno-的架构" tabindex="-1"><a class="header-anchor" href="#deno-的架构" aria-hidden="true">#</a> Deno 的架构</h1><p><img src="https://www.zoo.team/images/upload/upload_b81b0e34dcf79dbed0dcad2412086336.png" alt="deno源码.png"></p><ol><li><p>Deno 以 Rust 作为启动入口，通过 Rust FFI 去执行 C++ 代码，然后在 C++ 中引入 V8 实例。</p></li><li><p>初始化 V8 对象以及注入外部 C++ 方法，例如 send、recv 等方法。</p></li><li><p>向 V8 全局作用域下注入 Deno 对象，暴露 Deno 的一些基本 API 给 JavaScript。</p></li><li><p>通过绑定在 V8 上的 C++ 方法，调用对应的 Rust 方法，去执行底层逻辑。</p></li></ol><p>不难发现 Deno 其实和 RN、Flutter 这些框架很类似，因为它本质上也是跑了个 JS 引擎，只是这个 JS 引擎是 V8，不负责 UI 的 binding 而已。所以说架构的本质就是思路复刻、模块重组。</p><h1 id="deno-的特点" tabindex="-1"><a class="header-anchor" href="#deno-的特点" aria-hidden="true">#</a> Deno 的特点</h1><h2 id="安全" tabindex="-1"><a class="header-anchor" href="#安全" aria-hidden="true">#</a> 安全</h2><p><img src="https://www.zoo.team/images/upload/upload_2ccea2967bd8c9e926e25a1c1ec16532.png" alt="deno-sec.png"></p><p>与 Node 相反，Deno 默认在沙箱中执行代码，这意味着运行时无法访问以下权限：</p><ul><li>文件系统</li><li>网络</li><li>环境变量</li></ul><p>你可以通过命令行参数形式来开启默认关闭的权限，类似下面这样：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 授予从磁盘读取和侦听网络的权限</span>
deno run <span class="token operator">--</span>allow<span class="token operator">-</span>read <span class="token operator">--</span>allow<span class="token operator">-</span>net https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>deno<span class="token punctuation">.</span>land<span class="token operator">/</span>std<span class="token operator">/</span>http<span class="token operator">/</span>file_server<span class="token punctuation">.</span>ts

<span class="token comment">// 授予从磁盘filepath读取白名单文件的权限</span>
deno run <span class="token operator">--</span>allow<span class="token operator">-</span>read<span class="token operator">=</span><span class="token operator">/</span>etc https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>deno<span class="token punctuation">.</span>land<span class="token operator">/</span>std<span class="token operator">/</span>http<span class="token operator">/</span>file_server<span class="token punctuation">.</span>ts

<span class="token comment">// 授予所有权限</span>
deno run <span class="token operator">--</span>allow<span class="token operator">-</span>all https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>deno<span class="token punctuation">.</span>land<span class="token operator">/</span>std<span class="token operator">/</span>http<span class="token operator">/</span>file_server<span class="token punctuation">.</span>ts

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者通过编程形式控制权限，类似下面这样：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 检测是否有读取权限</span>
<span class="token keyword">const</span> status <span class="token operator">=</span> <span class="token keyword">await</span> Deno<span class="token punctuation">.</span>permissions<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>write<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>status<span class="token punctuation">.</span>state <span class="token operator">!==</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>granted<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>need write permission<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 读取log文件</span>
<span class="token keyword">const</span> log <span class="token operator">=</span> <span class="token keyword">await</span> Deno<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>request<span class="token punctuation">.</span>log<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>a<span class="token operator">+</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 关闭读写权限</span>
<span class="token keyword">await</span> Deno<span class="token punctuation">.</span>permissions<span class="token punctuation">.</span><span class="token function">revoke</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>read<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> Deno<span class="token punctuation">.</span>permissions<span class="token punctuation">.</span><span class="token function">revoke</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>write<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 打印log内容</span>
<span class="token keyword">const</span> encoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> log<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>encoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>hello\\n<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="内置工具" tabindex="-1"><a class="header-anchor" href="#内置工具" aria-hidden="true">#</a> 内置工具</h2><p><img src="https://www.zoo.team/images/upload/upload_b6fb0e62d71989f1138dc595c552385d.png" alt="deno恐龙标志"></p><p>Deno 目前提供了以下内置工具，在使用 JavaScript 和 TypeScript 时非常有用，只需要执行以下命令即可:</p>`,18),F={href:"https://deno.land/manual@v1.8.3/tools/bundler",target:"_blank",rel:"noopener noreferrer"},I={href:"https://deno.land/manual@v1.8.3/tools/compiler",target:"_blank",rel:"noopener noreferrer"},V={href:"https://deno.land/manual@v1.8.3/tools/script_installer",target:"_blank",rel:"noopener noreferrer"},E={href:"https://deno.land/manual@v1.8.3/tools/dependency_inspector",target:"_blank",rel:"noopener noreferrer"},M={href:"https://deno.land/manual@v1.8.3/tools/documentation_generator",target:"_blank",rel:"noopener noreferrer"},B={href:"https://deno.land/manual@v1.8.3/tools/formatter",target:"_blank",rel:"noopener noreferrer"},J={href:"https://deno.land/manual@v1.8.3/tools/repl",target:"_blank",rel:"noopener noreferrer"},U={href:"https://deno.land/manual@v1.8.3/testing",target:"_blank",rel:"noopener noreferrer"},G={href:"https://deno.land/manual@v1.8.3/tools/linter",target:"_blank",rel:"noopener noreferrer"},W=n("h2",{id:"支持-typrscript",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#支持-typrscript","aria-hidden":"true"},"#"),a(" 支持 TyprScript")],-1),L=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/570fe1b9ef544689b065386ffbf57cfe~tplv-k3u1fbpfcp-zoom-1.image",alt:"tsbanner.jpeg"})],-1),H=n("p",null,"使用 Deno 运行 TypeScript 代码不需要编译步骤以及繁琐的配置文件—— Deno 会自动为你执行这一步骤。",-1),Y={href:"https://github.com/denoland/deno/tree/main/cli/tsc",target:"_blank",rel:"noopener noreferrer"},O={href:"https://github.com/denoland/deno/blob/main/cli/tsc.rs",target:"_blank",rel:"noopener noreferrer"},Z=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// globalThis.exec 这个函数在/cli/tsc/99_main_compiler.js中</span>
<span class="token comment">// 其主要作用就是把TypeScript转换成JavaScript</span>
<span class="token keyword">let</span> exec_source <span class="token operator">=</span> format<span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>globalThis<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> request_str<span class="token punctuation">)</span><span class="token punctuation">;</span>

  runtime
    <span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">[</span>native code<span class="token punctuation">]</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> startup_source<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>Could not properly start the compiler runtime<span class="token punctuation">.</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
  runtime<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">[</span>native_code<span class="token punctuation">]</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span>exec_source<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前段时间 Deno 内部把 TS 改回 JS 的讨论很是热闹，但并不意味着 Deno 放弃了 TypeScript，它依然是一个安全的 TS/JS Runtime。</p><p>例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// index.ts</span>
<span class="token keyword">const</span> <span class="token literal-property property">str</span><span class="token operator">:</span> string <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>hello word<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以直接在命令行运行并打印出 hello word：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>deno run index<span class="token punctuation">.</span>ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="支持-es-模块标准" tabindex="-1"><a class="header-anchor" href="#支持-es-模块标准" aria-hidden="true">#</a> 支持 ES 模块标准</h2>`,7),Q={href:"https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/",target:"_blank",rel:"noopener noreferrer"},K=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 从 URL 导入import React from &amp;quot;https://cdn.bootcdn.net/ajax/libs/react/17.0.1/cjs/react-jsx-dev-runtime.development.js&amp;quot;;// 从相对路径导入import * as Api from &amp;quot;./service.js&amp;quot;;// 从绝对路径导入import &amp;quot;/index.js&amp;quot;;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>需要注意的是，Deno 不支持以下写法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> foo from <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>foo<span class="token punctuation">.</span>js<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">import</span> bar from <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>bar<span class="token operator">/</span>index<span class="token punctuation">.</span>js<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">import</span> zoo from <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token operator">/</span>index<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token comment">// 没有后缀</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="兼容浏览器-api" tabindex="-1"><a class="header-anchor" href="#兼容浏览器-api" aria-hidden="true">#</a> 兼容浏览器 API</h2><p><img src="https://www.zoo.team/images/upload/upload_95b308682ffe2983335bbcb7e4d6d92d.png" alt="chromebanner.png"></p><p>Deno 通过与浏览器 API 保持一致，来减少大家的认知。</p><ul><li>模块系统：从上面的介绍看出 Deno 是完全遵循浏览器实现的。</li><li>默认安全</li><li>对于异步操作返回 Promise</li><li>使用 ArrayBuffer 处理二进制</li><li>存在 window 全局变量</li><li>支持 fetch、webCrypto、worker 等 Web 标准，也支持 onload、onunload、addEventListener 等事件操作函数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">,</span> window <span class="token operator">===</span> self<span class="token punctuation">,</span> window <span class="token operator">===</span> globalThis<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true true true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="支持-promise" tabindex="-1"><a class="header-anchor" href="#支持-promise" aria-hidden="true">#</a> 支持 Promise</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5b1c580078514bbcbf49093fdc18e2ca~tplv-k3u1fbpfcp-zoom-1.image" alt="promisebanner.png"></p><p>Deno 所有的异步操作，一律返回 Promise，并且全局支持 await。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 读取异步接口数据const response = await fetch(&amp;quot;http://my.json.host/data.json&amp;quot;);console.log(response.status)console.log(response.statusText);const jsonData = await response.json();// 读取文件const decoder = new TextDecoder(&amp;quot;utf-8&amp;quot;);const data = await Deno.readFile(&amp;quot;hello.txt&amp;quot;);console.log(decoder.decode(data));</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="去中心化包" tabindex="-1"><a class="header-anchor" href="#去中心化包" aria-hidden="true">#</a> 去中心化包</h2><p>Deno 没有 package.json、node_modules，那么它是怎么进行包管理的呢？我们先看下面的例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// index.jsimport { white, bgRed } from &amp;quot;https://deno.land/std/fmt/colors.ts&amp;quot;;console.log(bgRed(white(&amp;quot;hello world!&amp;quot;)));// 命令行执行&amp;gt; deno run index.jsDownload https://deno.land/std/fmt/colors.tsCompile https://deno.land/std/fmt/colors.tshello world!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们看到执行时会有 <code>Download</code> 和 <code>Compile</code> 两个步骤，于是乎我们会产生几个疑问：</p><p><strong>1、每次执行都要下载吗？</strong></p><p>答：不需要每次下载，有缓存机制。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> deno run index<span class="token punctuation">.</span>jshello world<span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>2、Download 和 Compile 的文件在哪里呢？</strong></p><p>答：我们可以通过上面介绍的自带工具 deno info 来查看依赖关系。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> deno info index<span class="token punctuation">.</span>jslocal<span class="token operator">:</span> <span class="token operator">/</span>Users<span class="token operator">/</span>xxx<span class="token operator">/</span>Desktop<span class="token operator">/</span>index<span class="token punctuation">.</span>tstype<span class="token operator">:</span> TypeScriptemit<span class="token operator">:</span> <span class="token operator">/</span>Users<span class="token operator">/</span>xxx<span class="token operator">/</span>Library<span class="token operator">/</span>Caches<span class="token operator">/</span>deno<span class="token operator">/</span>gen<span class="token operator">/</span>file<span class="token operator">/</span>Users<span class="token operator">/</span>xxx<span class="token operator">/</span>Desktop<span class="token operator">/</span>index<span class="token punctuation">.</span>ts<span class="token punctuation">.</span>jsdependencies<span class="token operator">:</span> <span class="token number">0</span> <span class="token function">unique</span> <span class="token punctuation">(</span>total 41B<span class="token punctuation">)</span>file<span class="token operator">:</span><span class="token operator">/</span><span class="token comment">//Users/xxx/Desktop/index.ts (41B)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>3、依赖代码更新了怎么办？</strong></p><p>答：当依赖模块更新时，我们可以通过 <code>--reload</code> 进行更新缓存，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> deno run <span class="token operator">--</span>reload index<span class="token punctuation">.</span>js<span class="token comment">// 通过白名单的方式更新部分依赖&amp;gt; deno run --reload=https://deno.land index.js</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>4、多版本怎么处理？</strong></p><p>答：暂时没有好的解决方案，只能通过 git tag 的方式区分版本。</p><p>Deno 是通过 URL 导入代码，可以在互联网上的任何地方托管模块。并且相比 Node 的 require 读取文件，它显得更加轻巧玲珑，并且无需集中注册表即可分发 Deno 软件包。不需要 package.json 文件和依赖项列表，因为所有模块都是在应用程序运行时下载，编译和缓存的。</p><h1 id="上手-deno" tabindex="-1"><a class="header-anchor" href="#上手-deno" aria-hidden="true">#</a> 上手 Deno</h1><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><p>使用 Shell (macOS 和 Linux):</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>curl -fsSL https://deno.land/x/install/install.sh | sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用 PowerShell (Windows):</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>iwr https://deno.land/x/install/install.ps1 -useb | iex
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运行 <strong>deno --version</strong>，如果它打印出 Deno 版本，说明安装成功。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> deno <span class="token operator">--</span>versiondeno <span class="token number">1.8</span><span class="token number">.1</span> <span class="token punctuation">(</span>release<span class="token punctuation">,</span> aarch64<span class="token operator">-</span>apple<span class="token operator">-</span>darwin<span class="token punctuation">)</span>v8 <span class="token number">9.0</span><span class="token number">.257</span><span class="token punctuation">.</span>3typescript <span class="token number">4.2</span><span class="token number">.2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="实战体验" tabindex="-1"><a class="header-anchor" href="#实战体验" aria-hidden="true">#</a> 实战体验</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ca1684a9023d40efb4de68ed757686fc~tplv-k3u1fbpfcp-zoom-1.image" alt="deno-getting-started.jpeg"></p><h3 id="hello-word" tabindex="-1"><a class="header-anchor" href="#hello-word" aria-hidden="true">#</a> Hello Word</h3><p>本地创建一个 index.ts 文件，内容如下所示：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// index.tsconsole.log(&amp;quot;Welcome to Deno 🦕&amp;quot;);</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>打开终端，输入以下命令行：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> deno run index<span class="token punctuation">.</span>ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以上输出 &quot;Welcome to Deno 🦕&quot;。</p><h3 id="http-请求" tabindex="-1"><a class="header-anchor" href="#http-请求" aria-hidden="true">#</a> HTTP 请求</h3><p>本地创建一个 http.ts 文件，内容如下所示：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> url <span class="token operator">=</span> Deno<span class="token punctuation">.</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 取得第一个命令行参数，存储到变量 url。const res = await fetch(url); // 向指定的地址发出请求，等待响应，然后存储到变量 res。const body = new Uint8Array(await res.arrayBuffer()); // 把响应体解析为一个 ArrayBuffer，等待接收完毕，将其转换为 Uint8Array，最后存储到变量 body。await Deno.stdout.write(body); // 把 body 的内容写入标准输出流 stdout。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>打开终端，输入以下命令行：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>deno run <span class="token operator">--</span>allow<span class="token operator">-</span>net<span class="token operator">=</span>api<span class="token punctuation">.</span>github<span class="token punctuation">.</span>com http<span class="token punctuation">.</span>ts https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>api<span class="token punctuation">.</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>users<span class="token operator">/</span>answer518
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以上输出 json 对象。</p><h3 id="远程导入" tabindex="-1"><a class="header-anchor" href="#远程导入" aria-hidden="true">#</a> 远程导入</h3><p>从远程模块导入 <strong>add</strong> 和 <strong>multiply</strong> 方法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>  add<span class="token punctuation">,</span>  multiply<span class="token punctuation">,</span><span class="token punctuation">}</span> from <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>x<span class="token punctuation">.</span>nest<span class="token punctuation">.</span>land<span class="token operator">/</span>ramda@<span class="token number">0.27</span><span class="token number">.0</span><span class="token operator">/</span>source<span class="token operator">/</span>index<span class="token punctuation">.</span>js<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">totalCost</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">outbound</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">inbound</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">tax</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span><span class="token operator">:</span> number <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span>outbound<span class="token punctuation">,</span> inbound<span class="token punctuation">)</span><span class="token punctuation">,</span> tax<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">totalCost</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">1.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 60console.log(totalCost(45, 27, 1.15)); // 82.8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="支持-wasm" tabindex="-1"><a class="header-anchor" href="#支持-wasm" aria-hidden="true">#</a> 支持 WASM</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// wasm.tsconst wasmCode = new Uint8Array([  0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127,  3, 130, 128, 128, 128, 0, 1, 0, 4, 132, 128, 128, 128, 0, 1, 112, 0, 0,  5, 131, 128, 128, 128, 0, 1, 0, 1, 6, 129, 128, 128, 128, 0, 0, 7, 145,  128, 128, 128, 0, 2, 6, 109, 101, 109, 111, 114, 121, 2, 0, 4, 109, 97,  105, 110, 0, 0, 10, 138, 128, 128, 128, 0, 1, 132, 128, 128, 128, 0, 0,  65, 42, 11]);const wasmModule = new WebAssembly.Module(wasmCode);const wasmInstance = new WebAssembly.Instance(wasmModule);const main = wasmInstance.exports.main as CallableFunction;console.log(main().toString());</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>打开终端，输入以下命令行：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> deno run wasm<span class="token punctuation">.</span>ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以上输出数字42。</p><h3 id="restful-服务" tabindex="-1"><a class="header-anchor" href="#restful-服务" aria-hidden="true">#</a> RESTful 服务</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// restful.tsimport { Application, Router } from &amp;quot;https://deno.land/x/oak/mod.ts&amp;quot;;const books = new Map&amp;lt;string, any&amp;gt;();books.set(&amp;quot;1&amp;quot;, {  id: &amp;quot;1&amp;quot;,  title: &amp;quot;平凡的世界&amp;quot;,  author: &amp;quot;路遥&amp;quot;,});const router = new Router();router  .get(&amp;quot;/&amp;quot;, (context) =&amp;gt; {    context.response.body = &amp;quot;Hello world!&amp;quot;;  })  .get(&amp;quot;/book&amp;quot;, (context) =&amp;gt; {    context.response.body = Array.from(books.values());  })  .get(&amp;quot;/book/:id&amp;quot;, (context) =&amp;gt; {    if (context.params &amp;amp;&amp;amp; context.params.id &amp;amp;&amp;amp; books.has(context.params.id)) {      context.response.body = books.get(context.params.id);    }  });const app = new Application();app.use(router.routes());app.use(router.allowedMethods());await app.listen({ hostname: &amp;#39;127.0.0.1&amp;#39;, port: 8000 });</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>终端输入以下命令：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> deno run  <span class="token operator">--</span>allow<span class="token operator">-</span>net restful<span class="token punctuation">.</span>ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,62),$={href:"http://localhost:8000/book/1",target:"_blank",rel:"noopener noreferrer"},nn=t(`<h3 id="静态资源服务" tabindex="-1"><a class="header-anchor" href="#静态资源服务" aria-hidden="true">#</a> 静态资源服务</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// static.tsimport { Application } from &amp;quot;https://deno.land/x/oak/mod.ts&amp;quot;;const app = new Application();app.use(async (context) =&amp;gt; {  await context.send({    root: Deno.cwd(), // 静态资源的根路径  });});await app.listen({ hostname: &amp;quot;127.0.0.1&amp;quot;, port: 8000 });</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>终端输入以下命令：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> deno run  <span class="token operator">--</span>allow<span class="token operator">-</span>net <span class="token operator">--</span>allow<span class="token operator">-</span>read <span class="token keyword">static</span><span class="token punctuation">.</span>ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,4),an={href:"http://localhost:8000/static.ts",target:"_blank",rel:"noopener noreferrer"},sn=n("h1",{id:"结束语",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#结束语","aria-hidden":"true"},"#"),a(" 结束语")],-1),en=n("p",null,[a("Deno 是一个非常伟大的项目，但却不是 "),n("strong",null,"“下一代 Nods.js ”"),a("。Ryan Dahl 自己也说： "),n("strong",null,"“Node.js isn't going anywhere”"),a(" 。并且 Deno 还处在开发中，功能还不稳定，不建议用于生产环境。但是，它已经是一个可用的工具，有很多新特性都是 Node 所没有的，大家可以多多试玩。")],-1),tn=n("h2",{id:"推荐阅读",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#推荐阅读","aria-hidden":"true"},"#"),a(" 推荐阅读")],-1),pn={href:"https://juejin.cn/post/6955998176549535758",target:"_blank",rel:"noopener noreferrer"},on={href:"https://juejin.cn/post/6948210854126944292",target:"_blank",rel:"noopener noreferrer"},cn=n("h2",{id:"招贤纳士",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#招贤纳士","aria-hidden":"true"},"#"),a(" 招贤纳士")],-1),ln=n("p",null,"政采云前端团队（ZooTeam），一个年轻富有激情和创造力的前端团队，隶属于政采云产品研发部，Base 在风景如画的杭州。团队现有 40 余个前端小伙伴，平均年龄 27 岁，近 3 成是全栈工程师，妥妥的青年风暴团。成员构成既有来自于阿里、网易的“老”兵，也有浙大、中科大、杭电等校的应届新人。团队在日常的业务对接之外，还在物料体系、工程平台、搭建平台、性能体验、云端应用、数据分析及可视化等方向进行技术探索和实战，推动并落地了一系列的内部技术产品，持续探索前端技术体系的新边界。",-1),rn=n("p",null,[a("如果你想改变一直被事折腾，希望开始能折腾事；如果你想改变一直被告诫需要多些想法，却无从破局；如果你想改变你有能力去做成那个结果，却不需要你；如果你想改变你想做成的事需要一个团队去支撑，但没你带人的位置；如果你想改变既定的节奏，将会是“5 年工作时间 3 年工作经验”；如果你想改变本来悟性不错，但总是有那一层窗户纸的模糊… 如果你相信相信的力量，相信平凡人能成就非凡事，相信能遇到更好的自己。如果你希望参与到随着业务腾飞的过程，亲手推动一个有着深入的业务理解、完善的技术体系、技术创造价值、影响力外溢的前端团队的成长历程，我觉得我们该聊聊。任何时间，等着你写点什么，发给 "),n("code",null,"ZooTeam@cai-inc.com")],-1),un=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ff91eb605a84431c90c1f3b9cef51c76~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1);function dn(kn,mn){const s=l("ExternalLinkIcon");return o(),c("div",null,[i,n("p",null,[a("> 这是第 99 篇不掺水的原创，想获取更多原创好文，请搜索公众号关注我们吧~ 本文首发于政采云前端博客："),n("a",u,[a("聊聊Deno的那些事"),e(s)])]),d,k,m,n("p",null,[a("Deno 是一个简单、现代、安全的 "),n("a",v,[a("JavaScript"),e(s)]),a("、"),n("a",h,[a("TypeScript"),e(s)]),a("、"),n("a",b,[a("Webassembly"),e(s)]),a(" 运行时环境。")]),g,f,n("ul",null,[n("li",null,[n("a",_,[a("Rust"),e(s)]),a("（Deno 的底层是用 Rust 开发，而 Node 是用 C++）")]),n("li",null,[n("a",w,[a("Tokio"),e(s)]),a("（Deno 的事件机制是基于 Tokio，而 Node 是基于 libuv）")]),n("li",null,[n("a",j,[a("TypeScript"),e(s)])]),n("li",null,[n("a",x,[a("V8"),e(s)])])]),y,q,n("p",null,[a("Deno 起源于 Node 的创建者 "),D,a("，这也是大家对 Deno 项目充满期待的原因之一。在 JSConfEu 上，"),N,a(" 在他的的"),n("a",S,[a("演讲"),e(s)]),a("中说出了自己对 Node 中存在的一些缺陷，并解释了如何围绕 Node 的架构做出更好的决定，在演讲的最后，宣布了 Deno 的第一个原型，并承诺构建一个更好、更安全的运行时环境。")]),C,n("p",null,[a("写惯前端的童鞋可能不是很明白这个东西是干啥用的？但是其实平时你都会接触到，只是概念不同而已。前端我们一般称其为打包构建，类似工具诸如 webpack、rollup、parcel 做的事情。它们最后的目标其实都是想得到一些目标性的文件，这里我们的目标是"),n("a",T,[a("编译 V8 "),e(s)]),a("代码。")]),n("p",null,[a("Node 的 V8 构建系统是 "),n("a",A,[a("GYP"),e(s)]),a("（Generate Your Projects），而 Chrome 的 V8 已升级为 "),n("a",z,[a("GN"),e(s)]),a("（Generate Ninja）。我们知道 V8 是由 Google 开发的，这也证明 Node 和 Google 的亲儿子 Chrome 渐行渐远，而且 GN 的构建速度比 GYP 快20倍，因为 GN 是用 C++ 编写，比起用 python 写的 GYP 快了很多。但是 Node 底层架构已无法挽回。")]),X,n("p",null,[a("Node 使用 "),n("a",P,[a("require"),e(s)]),a(" 引用其他脚本文件，其内部逻辑如下：")]),R,n("ul",null,[n("li",null,[n("a",F,[a("deno bundler"),e(s)]),a(" (自带打包和 tree shaking功能，可以将我们的代码打包成单文件)")]),n("li",null,[n("a",I,[a("deno compile"),e(s)]),a(" (将 Deno 项目构建为完全独立的可执行文件)")]),n("li",null,[n("a",V,[a("deno installe"),e(s)]),a(" (可以将我们的代码生成可执行文件进行直接使用)")]),n("li",null,[n("a",E,[a("deno info"),e(s)]),a(" (查看所有模块的依赖关系树)")]),n("li",null,[n("a",M,[a("deno doc"),e(s)]),a(" (将源代码中的注释生成文档)")]),n("li",null,[n("a",B,[a("deno fmt"),e(s)]),a(" (递归地格式化每个子目录中的每个文件)")]),n("li",null,[n("a",J,[a("deno repl"),e(s)]),a(" (启动一个 read-eval-print-loop，它允许您在全局上下文中交互式地构建程序状态)")]),n("li",null,[n("a",U,[a("deno test"),e(s)]),a(" (对名为 .test 的文件进行单元测试)")]),n("li",null,[n("a",G,[a("deno lint"),e(s)]),a(" (代码检测器)")])]),W,L,H,n("p",null,[n("a",Y,[a("源码"),e(s)]),a("中我们发现，Deno 其实是集成了一个 TypeScript 编译器和一个用于运行时快照的小型编译器主机。转换的"),n("a",O,[a("核心代码"),e(s)]),a("如下：")]),Z,n("p",null,[a("Deno 采用的是 ES Module 的浏览器实现。"),n("a",Q,[a("ES Module"),e(s)]),a(" 大家应该都是比较熟悉的，它是 JavaScript 官方的标准化模块系统，其浏览器实现如下所示：")]),K,n("p",null,[a("本地访问 "),n("a",$,[a("http://localhost:8000/book/1"),e(s)]),a(" 将会返回id为1的book数据。")]),nn,n("p",null,[a("本地访问 "),n("a",an,[a("http://localhost:8000/static.ts"),e(s)]),a(" 将会返回 static.ts 的源码。")]),sn,en,tn,n("p",null,[n("a",pn,[a("数据可视化探索之 SpreadJS"),e(s)])]),n("p",null,[n("a",on,[a("H5 页面列表缓存方案"),e(s)])]),cn,ln,rn,un])}const hn=p(r,[["render",dn],["__file","聊聊Deno的那些事.html.vue"]]);export{hn as default};
